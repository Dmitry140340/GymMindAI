import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –ë–û–¢–ê\n');
console.log('=' .repeat(80) + '\n');

const checks = {
  total: 0,
  passed: 0,
  failed: 0,
  warnings: 0,
  results: []
};

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
console.log('üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...\n');

const requiredFiles = [
  'src/index.js',
  'src/bot/handlers.js',
  'src/bot/keyboards.js',
  'src/services/database.js',
  'src/services/coze.js',
  'src/services/payment.js',
  'package.json',
  '.env'
];

requiredFiles.forEach(file => {
  checks.total++;
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    checks.passed++;
    checks.results.push({ type: 'success', message: `‚úÖ ${file}` });
    console.log(`‚úÖ ${file}`);
  } else {
    checks.failed++;
    checks.results.push({ type: 'error', message: `‚ùå ${file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢` });
    console.log(`‚ùå ${file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
  }
});

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n');

const packageJson = JSON.parse(
  fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8')
);

const requiredDeps = [
  'node-telegram-bot-api',
  'axios',
  'dotenv',
  'express',
  'sqlite3',
  'uuid'
];

requiredDeps.forEach(dep => {
  checks.total++;
  if (packageJson.dependencies && packageJson.dependencies[dep]) {
    checks.passed++;
    checks.results.push({ 
      type: 'success', 
      message: `‚úÖ ${dep} v${packageJson.dependencies[dep]}` 
    });
    console.log(`‚úÖ ${dep} v${packageJson.dependencies[dep]}`);
  } else {
    checks.failed++;
    checks.results.push({ type: 'error', message: `‚ùå ${dep} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù` });
    console.log(`‚ùå ${dep} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
  }
});

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');

const envPath = path.join(__dirname, '.env');
let envContent = '';

if (fs.existsSync(envPath)) {
  envContent = fs.readFileSync(envPath, 'utf8');
  
  const requiredEnvVars = [
    'BOT_TOKEN',
    'COZE_API_TOKEN',
    'BOT_ID',
    'YOOKASSA_SHOP_ID',
    'YOOKASSA_SECRET_KEY',
    'WEBHOOK_DOMAIN'
  ];
  
  requiredEnvVars.forEach(envVar => {
    checks.total++;
    const pattern = new RegExp(`^${envVar}=.+`, 'm');
    
    if (pattern.test(envContent)) {
      const value = envContent.match(pattern)[0].split('=')[1].trim();
      if (value && value !== 'your_value_here' && value !== '') {
        checks.passed++;
        checks.results.push({ 
          type: 'success', 
          message: `‚úÖ ${envVar} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω` 
        });
        console.log(`‚úÖ ${envVar} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      } else {
        checks.warnings++;
        checks.results.push({ 
          type: 'warning', 
          message: `‚ö†Ô∏è  ${envVar} - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω` 
        });
        console.log(`‚ö†Ô∏è  ${envVar} - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      }
    } else {
      checks.failed++;
      checks.results.push({ 
        type: 'error', 
        message: `‚ùå ${envVar} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç` 
      });
      console.log(`‚ùå ${envVar} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
  });
} else {
  checks.failed++;
  checks.results.push({ 
    type: 'error', 
    message: '‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω' 
  });
  console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
console.log('\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

const dbPath = path.join(__dirname, 'data', 'subscriptions.db');
checks.total++;

if (fs.existsSync(dbPath)) {
  const stats = fs.statSync(dbPath);
  checks.passed++;
  checks.results.push({ 
    type: 'success', 
    message: `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${(stats.size / 1024).toFixed(2)} KB)` 
  });
  console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${(stats.size / 1024).toFixed(2)} KB)`);
} else {
  checks.warnings++;
  checks.results.push({ 
    type: 'warning', 
    message: '‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ' 
  });
  console.log('‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ');
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ handlers.js
console.log('\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...\n');

const handlersPath = path.join(__dirname, 'src', 'bot', 'handlers.js');
const handlersContent = fs.readFileSync(handlersPath, 'utf8');

const criticalHandlers = [
  { name: 'start_work', pattern: /data === 'start_work'/ },
  { name: 'my_status', pattern: /data === 'my_status'/ },
  { name: 'pay_monthly', pattern: /data === 'pay_monthly'/ },
  { name: 'accept_agreement', pattern: /data === 'accept_agreement'/ },
  { name: 'main_menu', pattern: /data === 'main_menu'/ }
];

criticalHandlers.forEach(handler => {
  checks.total++;
  if (handler.pattern.test(handlersContent)) {
    checks.passed++;
    checks.results.push({ 
      type: 'success', 
      message: `‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ${handler.name} –Ω–∞–π–¥–µ–Ω` 
    });
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ${handler.name} –Ω–∞–π–¥–µ–Ω`);
  } else {
    checks.failed++;
    checks.results.push({ 
      type: 'error', 
      message: `‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ${handler.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç` 
    });
    console.log(`‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ${handler.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
  }
});

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ keyboards.js
console.log('\n‚å®Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...\n');

const keyboardsPath = path.join(__dirname, 'src', 'bot', 'keyboards.js');
const keyboardsContent = fs.readFileSync(keyboardsPath, 'utf8');

const criticalKeyboards = [
  'mainKeyboard',
  'subscriptionKeyboard',
  'userAgreementKeyboard',
  'aiToolsKeyboard',
  'analyticsKeyboard'
];

criticalKeyboards.forEach(keyboard => {
  checks.total++;
  const pattern = new RegExp(`export const ${keyboard}`);
  if (pattern.test(keyboardsContent)) {
    checks.passed++;
    checks.results.push({ 
      type: 'success', 
      message: `‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ${keyboard} –Ω–∞–π–¥–µ–Ω–∞` 
    });
    console.log(`‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ${keyboard} –Ω–∞–π–¥–µ–Ω–∞`);
  } else {
    checks.failed++;
    checks.results.push({ 
      type: 'error', 
      message: `‚ùå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ${keyboard} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç` 
    });
    console.log(`‚ùå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ${keyboard} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
  }
});

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('\n' + '='.repeat(80));
console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢\n');

const totalChecks = checks.passed + checks.failed + checks.warnings;
const successRate = ((checks.passed / totalChecks) * 100).toFixed(1);

console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${totalChecks}`);
console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${checks.passed}`);
console.log(`‚ùå –û—à–∏–±–æ–∫: ${checks.failed}`);
console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${checks.warnings}`);
console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${successRate}%\n`);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
let botStatus = '';
let statusIcon = '';
let recommendations = [];

if (checks.failed === 0 && checks.warnings === 0) {
  botStatus = '–ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£';
  statusIcon = 'üéâ';
  recommendations.push('–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
  recommendations.push('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: npm start');
} else if (checks.failed === 0) {
  botStatus = '–ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£ (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏)';
  statusIcon = '‚úÖ';
  recommendations.push('–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:');
  checks.results.filter(r => r.type === 'warning').forEach(r => {
    recommendations.push(`  - ${r.message.replace('‚ö†Ô∏è  ', '')}`);
  });
} else if (checks.failed <= 3) {
  botStatus = '–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê';
  statusIcon = '‚ö†Ô∏è';
  recommendations.push('–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:');
  checks.results.filter(r => r.type === 'error').forEach(r => {
    recommendations.push(`  - ${r.message.replace('‚ùå ', '')}`);
  });
} else {
  botStatus = '–ù–ï –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£';
  statusIcon = '‚ùå';
  recommendations.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:');
  checks.results.filter(r => r.type === 'error').forEach(r => {
    recommendations.push(`  - ${r.message.replace('‚ùå ', '')}`);
  });
  recommendations.push('\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:');
  recommendations.push('  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: npm install');
  recommendations.push('  2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª .env');
  recommendations.push('  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: node auto_fix_buttons.js');
}

console.log(`${statusIcon} –°—Ç–∞—Ç—É—Å: ${botStatus}\n`);
console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n');
recommendations.forEach(rec => console.log(rec));

console.log('\n' + '='.repeat(80));

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
const reportContent = `# –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** ${new Date().toLocaleString('ru-RU')}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:** ${totalChecks}
- **–£—Å–ø–µ—à–Ω–æ:** ${checks.passed}
- **–û—à–∏–±–æ–∫:** ${checks.failed}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** ${checks.warnings}
- **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:** ${successRate}%

## –°—Ç–∞—Ç—É—Å

${statusIcon} **${botStatus}**

## –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

${checks.results.map(r => r.message).join('\n')}

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

${recommendations.join('\n')}

---

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ FitnessBotAI*
`;

fs.writeFileSync(
  path.join(__dirname, 'BOT_HEALTH_CHECK.md'),
  reportContent,
  'utf8'
);

console.log(`\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: BOT_HEALTH_CHECK.md\n`);

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
process.exit(checks.failed > 0 ? 1 : 0);

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–• –ü–†–û–ë–õ–ï–ú\n');
console.log('=' .repeat(80) + '\n');

const handlersPath = path.join(__dirname, 'src', 'bot', 'handlers.js');
const keyboardsPath = path.join(__dirname, 'src', 'bot', 'keyboards.js');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
let handlersContent = fs.readFileSync(handlersPath, 'utf8');
let keyboardsContent = fs.readFileSync(keyboardsPath, 'utf8');

let changes = [];

// 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤ keyboards.js
console.log('üìù –®–∞–≥ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã paymentSuccessKeyboard...');

const paymentSuccessKeyboard = `
// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
export const paymentSuccessKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üéâ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: 'start_work' }
      ],
      [
        { text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'my_status' }
      ],
      [
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  }
};
`;

if (!keyboardsContent.includes('paymentSuccessKeyboard')) {
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π
  const lines = keyboardsContent.split('\n');
  lines.splice(lines.length - 1, 0, paymentSuccessKeyboard);
  keyboardsContent = lines.join('\n');
  changes.push('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ paymentSuccessKeyboard');
  console.log('   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
} else {
  console.log('   ‚ö†Ô∏è  –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
}

// 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ handlers.js
console.log('\nüìù –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∫–Ω–æ–ø–æ–∫...');

const callbackHandlers = `
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
    if (data === 'start_work') {
      try {
        await bot.deleteMessage(chatId, messageId).catch(() => {});
        await bot.sendMessage(
          chatId,
          'üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\\n\\n' +
          '–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          { parse_mode: 'Markdown', ...mainKeyboard }
        );
        return;
      } catch (error) {
        console.error('Error in start_work handler:', error);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if (data === 'my_status') {
      try {
        const dbUser = await getUserByTelegramId(userId);
        const subscription = await getActiveSubscription(dbUser.id);
        
        let statusMessage = 'üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**\\n\\n';
        
        if (subscription && subscription.status === 'active') {
          const endDate = new Date(subscription.end_date).toLocaleString('ru-RU');
          statusMessage += \`‚úÖ **–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\\n\`;
          statusMessage += \`üìã –ü–ª–∞–Ω: \${subscription.plan_type}\\n\`;
          statusMessage += \`üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: \${endDate}\\n\`;
          statusMessage += \`üîÑ –ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \${subscription.requests_used}/\${subscription.requests_limit}\\n\`;
        } else {
          const freeRequests = await getUserFreeRequests(dbUser.id);
          statusMessage += \`‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\\n\\n\`;
          statusMessage += \`üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: \${freeRequests.used}/\${freeRequests.limit}\\n\\n\`;
          statusMessage += \`–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üíé –ü–æ–¥–ø–∏—Å–∫–∞"\`;
        }
        
        await bot.editMessageText(statusMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        });
        return;
      } catch (error) {
        console.error('Error in my_status handler:', error);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if (data === 'pay_monthly') {
      try {
        await processPayment(bot, chatId, messageId, userId, 'monthly');
        return;
      } catch (error) {
        console.error('Error in pay_monthly handler:', error);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if (data === 'pay_quarterly') {
      try {
        await processPayment(bot, chatId, messageId, userId, 'quarterly');
        return;
      } catch (error) {
        console.error('Error in pay_quarterly handler:', error);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if (data === 'pay_yearly') {
      try {
        await processPayment(bot, chatId, messageId, userId, 'yearly');
        return;
      } catch (error) {
        console.error('Error in pay_yearly handler:', error);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
    if (data === 'cancel_payment') {
      try {
        await bot.editMessageText(
          '‚ùå **–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\\n\\n' +
          '–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∑–∂–µ.',
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üíé –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω', callback_data: 'subscription_menu' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
              ]
            }
          }
        );
        return;
      } catch (error) {
        console.error('Error in cancel_payment handler:', error);
      }
    }

`;

// –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ confirm_payment)
const insertPattern = /if \(data\.startsWith\('confirm_payment_'\)\) \{[\s\S]*?\n\s*\}/;
const match = handlersContent.match(insertPattern);

if (match && !handlersContent.includes("data === 'start_work'")) {
  const insertPosition = handlersContent.indexOf(match[0]) + match[0].length;
  handlersContent = 
    handlersContent.slice(0, insertPosition) + 
    callbackHandlers + 
    handlersContent.slice(insertPosition);
  
  changes.push('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: start_work, my_status, pay_monthly, pay_quarterly, pay_yearly, cancel_payment');
  console.log('   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
} else if (handlersContent.includes("data === 'start_work'")) {
  console.log('   ‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
} else {
  console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
  console.log('   ‚ÑπÔ∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ');
}

// 3. –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ keyboards.js
console.log('\nüìù –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...');

if (!keyboardsContent.includes('export const paymentSuccessKeyboard') && 
    keyboardsContent.includes('paymentSuccessKeyboard')) {
  // –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, —ç—Ç–æ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –≤ —à–∞–≥–µ 1
  console.log('   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...\n');

if (changes.length > 0) {
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
  const backupHandlers = handlersPath + '.backup';
  const backupKeyboards = keyboardsPath + '.backup';
  
  fs.copyFileSync(handlersPath, backupHandlers);
  fs.copyFileSync(keyboardsPath, backupKeyboards);
  
  console.log('üì¶ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:');
  console.log(`   - ${backupHandlers}`);
  console.log(`   - ${backupKeyboards}\n`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  fs.writeFileSync(handlersPath, handlersContent, 'utf8');
  fs.writeFileSync(keyboardsPath, keyboardsContent, 'utf8');
  
  console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n');
  
  console.log('üìã –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π:');
  changes.forEach((change, index) => {
    console.log(`   ${index + 1}. ${change}`);
  });
  
  console.log('\n' + '='.repeat(80));
  console.log('\n‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!\n');
  console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö handlers.js –∏ keyboards.js');
  console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: npm start');
  console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ callback-–∫–Ω–æ–ø–∫–∏ –≤—Ä—É—á–Ω—É—é');
  console.log('   4. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏');
  console.log('\n' + '='.repeat(80));
  
} else {
  console.log('‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç\n');
  console.log('='.repeat(80));
}

// –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
const fixReport = `# –û—Ç—á–µ—Ç –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö

**–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}

## –í–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

${changes.length > 0 ? changes.map((c, i) => `${i + 1}. ${c}`).join('\n') : '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å'}

## –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

### 1. paymentSuccessKeyboard
–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏.

**–ö–Ω–æ–ø–∫–∏:**
- üéâ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É (start_work)
- üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å (my_status)
- üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (main_menu)

### 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫

#### start_work
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏.

#### my_status
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª—è–º–∏.

#### pay_monthly, pay_quarterly, pay_yearly
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –≤—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.

#### cancel_payment
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã.

## –§–∞–π–ª—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π

- \`src/bot/handlers.js.backup\`
- \`src/bot/keyboards.js.backup\`

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
3. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

## –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:

\`\`\`bash
# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
cp src/bot/handlers.js.backup src/bot/handlers.js
cp src/bot/keyboards.js.backup src/bot/keyboards.js
\`\`\`
`;

fs.writeFileSync(
  path.join(__dirname, 'FIX_REPORT.md'),
  fixReport,
  'utf8'
);

console.log(`\nüìÑ –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: FIX_REPORT.md\n`);

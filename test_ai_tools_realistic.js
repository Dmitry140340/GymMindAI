// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫–∞–∫ –≤ –±–æ—Ç–µ
import { runWorkflow } from './src/services/coze.js';
import dotenv from 'dotenv';

dotenv.config();

console.log('üß¨ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ò-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í');
console.log('==========================================\n');

// –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã:');
console.log('üîë COZE_API_KEY:', !!process.env.COZE_API_KEY);
console.log('ü§ñ COZE_BOT_ID:', process.env.COZE_BOT_ID);
console.log('‚ö° COZE_TRAINING_PROGRAM_WORKFLOW_ID:', process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID);
console.log('ü•ó COZE_NUTRITION_PLAN_WORKFLOW_ID:', process.env.COZE_NUTRITION_PLAN_WORKFLOW_ID);
console.log('üî¨ COZE_DEEP_RESEARCH_WORKFLOW_ID:', process.env.COZE_DEEP_RESEARCH_WORKFLOW_ID);
console.log('üß™ COZE_COMPOSITION_ANALYSIS_WORKFLOW_ID:', process.env.COZE_COMPOSITION_ANALYSIS_WORKFLOW_ID);
console.log('');

const testUserId = '999999999';

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ)
async function testTrainingProgram() {
  console.log('üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–ï–°–¢ 1: –ü–†–û–ì–†–ê–ú–ú–ê –¢–†–ï–ù–ò–†–û–í–û–ö (–∫–∞–∫ –≤ –±–æ—Ç–µ)');
  console.log('===========================================');
  
  try {
    const workflowId = process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID;
    
    const workflowParameters = {
      workout_goal: '–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
      experience_level: '—Å—Ä–µ–¥–Ω–∏–π',
      available_days: '4',
      session_duration: '60-90 –º–∏–Ω—É—Ç',
      equipment: '–ø–æ–ª–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª',
      limitations: '–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π',
      current_weight: '75',
      target_weight: '85',
      height: '180',
      user_id: testUserId,
      request_type: 'training_program'
    };
    
    console.log('üÜî Workflow ID:', workflowId);
    console.log('üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(workflowParameters, null, 2));
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º workflow...');
    
    const startTime = Date.now();
    const result = await runWorkflow(workflowId, workflowParameters);
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${duration}ms`);
    console.log('üìä Success:', result.success);
    console.log('üìù Message length:', result.message?.length || 'undefined');
    console.log('üí¨ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', result.message?.substring(0, 200) + '...');
    
    return { success: result.success, duration, result };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return { success: false, error: error.message };
  }
}

// –¢–µ—Å—Ç 2: –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
async function testNutritionPlan() {
  console.log('\nü•ó –¢–ï–°–¢ 2: –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø (–∫–∞–∫ –≤ –±–æ—Ç–µ)');
  console.log('=================================');
  
  try {
    const workflowId = process.env.COZE_NUTRITION_PLAN_WORKFLOW_ID;
    
    const workflowParameters = {
      goal: '–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
      weight: '75',
      height: '180',
      age: '28',
      gender: '–º—É–∂—Å–∫–æ–π',
      activity_level: '–≤—ã—Å–æ–∫–∞—è (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)',
      allergies: '–Ω–µ—Ç',
      dietary_restrictions: '–Ω–µ—Ç',
      preferred_meals: '5',
      budget: '—Å—Ä–µ–¥–Ω–∏–π',
      user_id: testUserId,
      request_type: 'nutrition_plan'
    };
    
    console.log('üÜî Workflow ID:', workflowId);
    console.log('üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(workflowParameters, null, 2));
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º workflow...');
    
    const startTime = Date.now();
    const result = await runWorkflow(workflowId, workflowParameters);
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${duration}ms`);
    console.log('üìä Success:', result.success);
    console.log('üìù Message length:', result.message?.length || 'undefined');
    console.log('üçΩÔ∏è –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', result.message?.substring(0, 200) + '...');
    
    return { success: result.success, duration, result };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return { success: false, error: error.message };
  }
}

// –¢–µ—Å—Ç 3: –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
async function testDeepResearch() {
  console.log('\nüî¨ –¢–ï–°–¢ 3: –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï (–∫–∞–∫ –≤ –±–æ—Ç–µ)');
  console.log('==========================================');
  
  try {
    const workflowId = process.env.COZE_DEEP_RESEARCH_WORKFLOW_ID;
    
    const workflowParameters = {
      research_query: '–í–ª–∏—è–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–Ω–∞ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
      user_id: testUserId,
      request_type: 'deepresearch'
    };
    
    console.log('üÜî Workflow ID:', workflowId);
    console.log('üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(workflowParameters, null, 2));
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º workflow...');
    
    const startTime = Date.now();
    const result = await runWorkflow(workflowId, workflowParameters);
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${duration}ms`);
    console.log('üìä Success:', result.success);
    console.log('üìù Message length:', result.message?.length || 'undefined');
    console.log('üìö –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', result.message?.substring(0, 200) + '...');
    
    return { success: result.success, duration, result };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return { success: false, error: error.message };
  }
}

// –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞
async function testCompositionAnalysis() {
  console.log('\nüß™ –¢–ï–°–¢ 4: –ê–ù–ê–õ–ò–ó –°–û–°–¢–ê–í–ê (–∫–∞–∫ –≤ –±–æ—Ç–µ)');
  console.log('====================================');
  
  try {
    const workflowId = process.env.COZE_COMPOSITION_ANALYSIS_WORKFLOW_ID;
    
    const workflowParameters = {
      product_name: '–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –ø–æ—Ä–æ—à–æ–∫',
      ingredients: '—Å—ã–≤–æ—Ä–æ—Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ç–µ–∏–Ω –∏–∑–æ–ª—è—Ç, –ª–µ—Ü–∏—Ç–∏–Ω, –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã, —Å—Ç–µ–≤–∏—è',
      nutritional_info: '–±–µ–ª–∫–∏ 25–≥, —É–≥–ª–µ–≤–æ–¥—ã 2–≥, –∂–∏—Ä—ã 1–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é 30–≥',
      purpose: '–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
      user_id: testUserId,
      request_type: 'composition_analysis'
    };
    
    console.log('üÜî Workflow ID:', workflowId);
    console.log('üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(workflowParameters, null, 2));
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º workflow...');
    
    const startTime = Date.now();
    const result = await runWorkflow(workflowId, workflowParameters);
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${duration}ms`);
    console.log('üìä Success:', result.success);
    console.log('üìù Message length:', result.message?.length || 'undefined');
    console.log('‚öóÔ∏è –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', result.message?.substring(0, 200) + '...');
    
    return { success: result.success, duration, result };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return { success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runRealisticTests() {
  console.log('‚è±Ô∏è –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', new Date().toLocaleString());
  console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:', testUserId);
  console.log('');
  
  const results = {};
  let successCount = 0;
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  results.trainingProgram = await testTrainingProgram();
  if (results.trainingProgram.success) successCount++;
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // –¢–µ—Å—Ç 2: –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è  
  results.nutritionPlan = await testNutritionPlan();
  if (results.nutritionPlan.success) successCount++;
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // –¢–µ—Å—Ç 3: –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
  results.deepResearch = await testDeepResearch();
  if (results.deepResearch.success) successCount++;
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞
  results.compositionAnalysis = await testCompositionAnalysis();
  if (results.compositionAnalysis.success) successCount++;
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
  console.log('================');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/4`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString()}`);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('- üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', results.trainingProgram.success ? 
    `‚úÖ ${results.trainingProgram.duration}ms` : 
    `‚ùå ${results.trainingProgram.error}`);
  console.log('- ü•ó –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:', results.nutritionPlan.success ? 
    `‚úÖ ${results.nutritionPlan.duration}ms` : 
    `‚ùå ${results.nutritionPlan.error}`);
  console.log('- üî¨ –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:', results.deepResearch.success ? 
    `‚úÖ ${results.deepResearch.duration}ms` : 
    `‚ùå ${results.deepResearch.error}`);
  console.log('- üß™ –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞:', results.compositionAnalysis.success ? 
    `‚úÖ ${results.compositionAnalysis.duration}ms` : 
    `‚ùå ${results.compositionAnalysis.error}`);
  
  if (successCount === 4) {
    console.log('\nüèÜ –í–°–ï –ò–ò-–ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!');
  } else {
    console.log(`\n‚ö†Ô∏è ${4 - successCount} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.`);
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runRealisticTests().then(() => {
  console.log('\nüèÅ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});

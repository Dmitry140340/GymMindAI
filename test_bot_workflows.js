import { runWorkflow } from './src/services/coze_new.js';
import dotenv from 'dotenv';

dotenv.config();

async function testBotWorkflows() {
    console.log('ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW –ß–ï–†–ï–ó –°–ï–†–í–ò–° –ë–û–¢–ê');
    console.log('===========================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üîë COZE_API_KEY:', !!process.env.COZE_API_KEY);
    console.log('ü§ñ COZE_BOT_ID:', process.env.COZE_BOT_ID);
    console.log('‚ö° COZE_TRAINING_PROGRAM_WORKFLOW_ID:', process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID);
    console.log('ü•ó COZE_NUTRITION_PLAN_WORKFLOW_ID:', process.env.COZE_NUTRITION_PLAN_WORKFLOW_ID);
    console.log('üî¨ COZE_DEEP_RESEARCH_WORKFLOW_ID:', process.env.COZE_DEEP_RESEARCH_WORKFLOW_ID);
    console.log('üß™ COZE_COMPOSITION_ANALYSIS_WORKFLOW_ID:', process.env.COZE_COMPOSITION_ANALYSIS_WORKFLOW_ID);
    
    console.log('\n‚è±Ô∏è –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', new Date().toLocaleString());
    const testUserId = '999999999';
    
    console.log('\nüèãÔ∏è‚Äç‚ôÇÔ∏è –¢–ï–°–¢ 1: –ü–†–û–ì–†–ê–ú–ú–ê –¢–†–ï–ù–ò–†–û–í–û–ö (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π)');
    console.log('===========================================');
    
    const trainingParams = {
        workout_goal: "–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
        experience_level: "—Å—Ä–µ–¥–Ω–∏–π",
        available_days: "4",
        session_duration: "60-90 –º–∏–Ω—É—Ç",
        equipment: "–ø–æ–ª–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª",
        limitations: "–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
        current_weight: "75",
        target_weight: "85",
        height: "180",
        user_id: testUserId,
        request_type: "training_program"
    };
    
    try {
        const trainingResult = await runWorkflow(
            process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID,
            trainingParams
        );
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:');
        console.log('Success:', trainingResult.success);
        console.log('Interactive:', trainingResult.isInteractive);
        console.log('Event ID:', trainingResult.eventId);
        console.log('Message length:', trainingResult.message?.length || 0);
        
        if (trainingResult.message) {
            console.log('üí¨ –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:', trainingResult.message.substring(0, 300) + '...');
        }
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error.message);
    }
    
    console.log('\nüî¨ –¢–ï–°–¢ 2: –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï (–ø—Ä–æ—Å—Ç–æ–π)');
    console.log('=========================================');
    
    const researchParams = {
        research_topic: "–≤–ª–∏—è–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–Ω–∞ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        user_id: testUserId,
        research_depth: "–ø–æ–¥—Ä–æ–±–Ω–æ",
        include_studies: "–¥–∞"
    };
    
    try {
        const researchResult = await runWorkflow(
            process.env.COZE_DEEP_RESEARCH_WORKFLOW_ID,
            researchParams
        );
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:');
        console.log('Success:', researchResult.success);
        console.log('Message length:', researchResult.message?.length || 0);
        
        if (researchResult.message) {
            console.log('üí¨ –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:', researchResult.message.substring(0, 300) + '...');
        }
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error.message);
    }
    
    console.log('\nüß™ –¢–ï–°–¢ 3: –ê–ù–ê–õ–ò–ó –°–û–°–¢–ê–í–ê (–ø—Ä–æ—Å—Ç–æ–π)');
    console.log('==================================');
    
    const analysisParams = {
        product_name: "—Ç–≤–æ—Ä–æ–≥ 9% –∂–∏—Ä–Ω–æ—Å—Ç–∏",
        analysis_type: "nutritional",
        user_id: testUserId,
        detailed: "–¥–∞"
    };
    
    try {
        const analysisResult = await runWorkflow(
            process.env.COZE_COMPOSITION_ANALYSIS_WORKFLOW_ID,
            analysisParams
        );
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–∞–≤–∞:');
        console.log('Success:', analysisResult.success);
        console.log('Message length:', analysisResult.message?.length || 0);
        
        if (analysisResult.message) {
            console.log('üí¨ –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:', analysisResult.message.substring(0, 300) + '...');
        }
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–∞–≤–∞:', error.message);
    }
    
    console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
    console.log('‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', new Date().toLocaleString());
}

testBotWorkflows().catch(console.error);

import dotenv from 'dotenv';
dotenv.config();

class CozeAPIService {
    constructor(apiKey, botId) {
        this.apiKey = apiKey;
        this.botId = botId;
        this.baseURL = 'https://api.coze.com/v1';
    }

    // –ó–∞–ø—É—Å–∫ workflow —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
    async runWorkflowComplete(workflowId, parameters) {
        const url = `${this.baseURL}/workflow/stream_run`;
        
        console.log('üì§ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π workflow:', {
            workflow_id: workflowId,
            parameters
        });

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    workflow_id: workflowId,
                    parameters: parameters,
                    bot_id: this.botId
                })
            });

            console.log('üì• Workflow API - —Å—Ç–∞—Ç—É—Å:', response.status);
            
            if (!response.ok) {
                const error = await response.text();
                console.log('‚ùå –û—à–∏–±–∫–∞ Workflow API:', error);
                return null;
            }

            // –ß–∏—Ç–∞–µ–º stream –æ—Ç–≤–µ—Ç
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let buffer = '';
            let fullContent = '';
            
            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                
                buffer += decoder.decode(value, { stream: true });
                const lines = buffer.split('\n');
                buffer = lines.pop();
                
                for (const line of lines) {
                    if (line.trim()) {
                        const content = this.parseSSELine(line);
                        if (content) {
                            fullContent += content + '\n';
                        }
                    }
                }
            }
            
            return fullContent;
            
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ Workflow:', error.message);
            return null;
        }
    }

    parseSSELine(line) {
        if (line.startsWith('data: ')) {
            try {
                const data = JSON.parse(line.slice(6));
                
                if (data.content && data.node_title !== 'Question') {
                    console.log(`üì® [${data.node_title}]:`, data.content.substring(0, 150) + '...');
                    return data.content;
                }
                
                if (data.error_code) {
                    console.log('‚ùå –û—à–∏–±–∫–∞:', data.error_message);
                }
                
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            }
        }
        return null;
    }
}

async function testCompleteWorkflow() {
    console.log('üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–†–ê–ú–ú–´ –¢–†–ï–ù–ò–†–û–í–û–ö');
    console.log('===============================================');
    
    const coze = new CozeAPIService(
        process.env.COZE_API_KEY,
        process.env.COZE_BOT_ID
    );
    
    // –ü–æ–ª–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    const parameters = {
        workout_goal: "–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
        experience_level: "—Å—Ä–µ–¥–Ω–∏–π", 
        available_days: "4",
        session_duration: "60-90 –º–∏–Ω—É—Ç",
        equipment: "–ø–æ–ª–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª",
        limitations: "–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
        current_weight: "75",
        target_weight: "85",
        height: "180",
        age: "25",
        gender: "–º—É–∂—Å–∫–æ–π",
        preferences: "—Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
        user_id: "999999999",
        request_type: "training_program",
        // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        user_answers: "1. –Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã\n2. —Å—Ä–µ–¥–Ω–∏–π\n3. 25 –ª–µ—Ç\n4. –º—É–∂—Å–∫–æ–π\n5. —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n6. –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    };
    
    console.log('‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º workout workflow —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...');
    const result = await coze.runWorkflowComplete(
        process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID,
        parameters
    );
    
    if (result) {
        console.log('\n‚úÖ –ü–†–û–ì–†–ê–ú–ú–ê –¢–†–ï–ù–ò–†–û–í–û–ö –ü–û–õ–£–ß–ï–ù–ê:');
        console.log('================================');
        console.log(result);
    } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    }
}

testCompleteWorkflow();

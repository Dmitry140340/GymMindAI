/**
 * üß™ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏)
 */

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...\n');

// –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockMetrics = [
  { type: 'weight', value: 80, date: '2025-08-01' },
  { type: 'weight', value: 79.5, date: '2025-08-15' },
  { type: 'weight', value: 78.8, date: '2025-09-01' },
  { type: 'weight', value: 78.2, date: '2025-09-13' }
];

const mockWorkouts = [
  { type: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', duration: 45, date: '2025-08-01', exercises: JSON.stringify([{name: '–ñ–∏–º –ª–µ–∂–∞'}]) },
  { type: '–ö–∞—Ä–¥–∏–æ', duration: 30, date: '2025-08-03', exercises: null },
  { type: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', duration: 60, date: '2025-08-05', exercises: JSON.stringify([{name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è'}, {name: '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞'}]) },
  { type: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', duration: 50, date: '2025-09-10', exercises: JSON.stringify([{name: '–ñ–∏–º –ª–µ–∂–∞'}]) },
  { type: '–ö–∞—Ä–¥–∏–æ', duration: 35, date: '2025-09-12', exercises: null }
];

const mockGoals = [
  {
    goal_type: '–°–Ω–∏–∑–∏—Ç—å –≤–µ—Å',
    target_value: '75',
    current_value: '80',
    created_at: '2025-08-01'
  }
];

// –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –º–æ–¥—É–ª—è (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function analyzeWeightProgress(metrics) {
  const weightData = metrics.filter(m => m.type === 'weight').sort((a, b) => new Date(a.date) - new Date(b.date));
  
  if (weightData.length === 0) {
    return {
      status: 'no_data',
      message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ'
    };
  }

  if (weightData.length === 1) {
    return {
      status: 'insufficient_data',
      currentWeight: weightData[0].value,
      message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π'
    };
  }

  const firstWeight = weightData[0].value;
  const lastWeight = weightData[weightData.length - 1].value;
  const weightChange = lastWeight - firstWeight;
  const weightChangePercent = ((weightChange / firstWeight) * 100).toFixed(1);
  
  let trend = 'stable';
  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
  const recentData = weightData.filter(w => new Date(w.date) >= thirtyDaysAgo);
  
  if (recentData.length >= 2) {
    const recentChange = recentData[recentData.length - 1].value - recentData[0].value;
    if (recentChange > 1) trend = 'increasing';
    else if (recentChange < -1) trend = 'decreasing';
  }

  return {
    status: 'has_data',
    currentWeight: lastWeight,
    startWeight: firstWeight,
    change: weightChange,
    changePercent: weightChangePercent,
    trend: trend,
    totalRecords: weightData.length,
    daysTracked: Math.ceil((new Date(weightData[weightData.length - 1].date) - new Date(weightData[0].date)) / (1000 * 60 * 60 * 24))
  };
}

function analyzeWorkoutProgress(workouts) {
  if (workouts.length === 0) {
    return {
      status: 'no_data',
      message: '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö'
    };
  }

  const workoutTypes = {};
  let totalDuration = 0;
  let totalExercises = 0;

  workouts.forEach(workout => {
    const type = workout.type || '–î—Ä—É–≥–æ–µ';
    workoutTypes[type] = (workoutTypes[type] || 0) + 1;
    totalDuration += workout.duration || 0;
    
    if (workout.exercises) {
      try {
        const exercises = JSON.parse(workout.exercises);
        totalExercises += exercises.length;
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }
  });

  const sortedWorkouts = workouts.sort((a, b) => new Date(a.date) - new Date(b.date));
  const firstWorkout = new Date(sortedWorkouts[0].date);
  const lastWorkout = new Date(sortedWorkouts[sortedWorkouts.length - 1].date);
  const totalDays = Math.ceil((lastWorkout - firstWorkout) / (1000 * 60 * 60 * 24)) || 1;
  const frequency = (workouts.length / totalDays * 7).toFixed(1);

  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
  const recentWorkouts = workouts.filter(w => new Date(w.date) >= thirtyDaysAgo);

  return {
    status: 'has_data',
    totalWorkouts: workouts.length,
    totalDuration: totalDuration,
    totalExercises: totalExercises,
    averageDuration: Math.round(totalDuration / workouts.length),
    frequency: frequency,
    workoutTypes: workoutTypes,
    recentWorkouts: recentWorkouts.length,
    daysActive: totalDays,
    mostFrequentType: Object.keys(workoutTypes).reduce((a, b) => workoutTypes[a] > workoutTypes[b] ? a : b)
  };
}

function calculateOverallScore(weightProgress, workoutProgress, goalProgress) {
  let score = 0;
  let factors = 0;

  if (weightProgress.status === 'has_data') {
    factors++;
    if (weightProgress.totalRecords >= 5) score += 30;
    else if (weightProgress.totalRecords >= 3) score += 20;
    else score += 10;
  }

  if (workoutProgress.status === 'has_data') {
    factors++;
    const frequency = parseFloat(workoutProgress.frequency);
    if (frequency >= 3) score += 40;
    else if (frequency >= 2) score += 30;
    else if (frequency >= 1) score += 20;
    else score += 10;
  }

  if (factors === 0) return { score: 0, level: '–ù–æ–≤–∏—á–æ–∫', emoji: 'üå±', factors: 0 };
  
  const normalizedScore = Math.round(score / factors * (factors === 2 ? 1.2 : 1.5));

  let level = '–ù–æ–≤–∏—á–æ–∫';
  let emoji = 'üå±';
  
  if (normalizedScore >= 80) {
    level = '–ú–∞—Å—Ç–µ—Ä';
    emoji = 'üèÜ';
  } else if (normalizedScore >= 60) {
    level = '–ü—Ä–æ—Ñ–∏';
    emoji = 'üí™';
  } else if (normalizedScore >= 40) {
    level = '–ê—Ç–ª–µ—Ç';
    emoji = 'üî•';
  } else if (normalizedScore >= 20) {
    level = '–õ—é–±–∏—Ç–µ–ª—å';
    emoji = 'üìà';
  }

  return {
    score: normalizedScore,
    level,
    emoji,
    factors
  };
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Å–∞:');
const weightAnalysis = analyzeWeightProgress(mockMetrics);
console.log(JSON.stringify(weightAnalysis, null, 2));

console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:');
const workoutAnalysis = analyzeWorkoutProgress(mockWorkouts);
console.log(JSON.stringify(workoutAnalysis, null, 2));

console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞:');
const overallScore = calculateOverallScore(weightAnalysis, workoutAnalysis, {});
console.log(JSON.stringify(overallScore, null, 2));

console.log('\n‚úÖ –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
console.log('\nüìä –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
console.log(`${overallScore.emoji} –£—Ä–æ–≤–µ–Ω—å: ${overallScore.level} (${overallScore.score}/100)`);
console.log(`‚öñÔ∏è –í–µ—Å: ${weightAnalysis.change.toFixed(1)} –∫–≥ (${weightAnalysis.changePercent}%)`);
console.log(`üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${workoutAnalysis.totalWorkouts} –∑–∞ ${workoutAnalysis.daysActive} –¥–Ω–µ–π`);
console.log(`üìà –ß–∞—Å—Ç–æ—Ç–∞: ${workoutAnalysis.frequency} —Ä–∞–∑/–Ω–µ–¥–µ–ª—é`);

console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

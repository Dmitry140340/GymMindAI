import sqlite3 from 'sqlite3';

async function showUsers() {
    try {
        console.log('üìä –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const db = new sqlite3.Database('data/subscriptions.db');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await new Promise((resolve, reject) => {
            db.all(`
                SELECT 
                    telegram_id,
                    username,
                    first_name,
                    last_name,
                    created_at,
                    requests_used,
                    requests_limit,
                    free_requests_used,
                    free_requests_limit,
                    agreement_accepted
                FROM users 
                ORDER BY created_at DESC
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
        
        if (users.length === 0) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
        
        users.forEach((user, index) => {
            console.log(`${index + 1}. üë§ ID: ${user.telegram_id}`);
            console.log(`   üìù –ò–º—è: ${user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} ${user.last_name || ''}`);
            console.log(`   üè∑Ô∏è Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.created_at}`);
            console.log(`   üéØ –ó–∞–ø—Ä–æ—Å—ã: ${user.requests_used || 0}/${user.requests_limit || 0}`);
            console.log(`   üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: ${user.free_requests_used || 0}/${user.free_requests_limit || 0}`);
            console.log(`   ‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ: ${user.agreement_accepted ? '–ø—Ä–∏–Ω—è—Ç–æ' : '–Ω–µ –ø—Ä–∏–Ω—è—Ç–æ'}`);
            console.log('');
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        console.log('üí≥ –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏...\n');
        
        const subscriptions = await new Promise((resolve, reject) => {
            db.all(`
                SELECT 
                    s.user_id,
                    s.status,
                    s.created_at,
                    s.expires_at,
                    s.amount,
                    u.username,
                    u.first_name
                FROM subscriptions s
                JOIN users u ON s.user_id = u.telegram_id
                WHERE s.status = 'active'
                ORDER BY s.created_at DESC
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
        
        if (subscriptions.length > 0) {
            console.log(`üí∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptions.length}\n`);
            
            subscriptions.forEach((sub, index) => {
                console.log(`${index + 1}. üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${sub.first_name} (@${sub.username})`);
                console.log(`   üÜî ID: ${sub.user_id}`);
                console.log(`   üíµ –°—É–º–º–∞: ${sub.amount} RUB`);
                console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${sub.created_at}`);
                console.log(`   ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${sub.expires_at}`);
                console.log('');
            });
        } else {
            console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        await db.close();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    }
}

showUsers();
import { initDatabase, updateUserSubscription, getActiveSubscription } from './src/services/database.js';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => {
  return new Promise(resolve => rl.question(query, resolve));
};

const fixExistingPayments = async () => {
  console.log('üîß –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');

    console.log('üìã –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:');
    console.log('   - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('   - –¢–∏–ø –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (basic/standard/premium)');
    console.log('   - ID –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n');

    const users = [];
    
    while (true) {
      const telegramId = await question('–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ "stop" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ');
      
      if (telegramId.toLowerCase() === 'stop') {
        break;
      }

      if (!telegramId || isNaN(telegramId)) {
        console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID\n');
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      const existingSubscription = await getActiveSubscription(parseInt(telegramId));
      
      if (existingSubscription) {
        console.log(`‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:`);
        console.log(`   –ü–ª–∞–Ω: ${existingSubscription.plan_type}`);
        console.log(`   –î–æ: ${new Date(existingSubscription.end_date).toLocaleString('ru-RU')}`);
        console.log(`   –õ–∏–º–∏—Ç: ${existingSubscription.requests_limit}\n`);
        continue;
      }

      console.log(`üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      
      const planType = await question('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–∞ (basic/standard/premium): ');
      
      if (!['basic', 'standard', 'premium'].includes(planType)) {
        console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞–Ω–∞\n');
        continue;
      }

      const paymentId = await question('ID –ø–ª–∞—Ç–µ–∂–∞ (Enter –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ');
      
      users.push({
        telegramId: parseInt(telegramId),
        planType,
        paymentId: paymentId || `manual_fix_${Date.now()}_${telegramId}`
      });

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å\n`);
    }

    if (users.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      rl.close();
      return;
    }

    console.log(`\nüìã –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    for (const user of users) {
      console.log(`   - ${user.telegramId} (${user.planType})`);
    }

    const confirm = await question('\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ');
    
    if (confirm.toLowerCase() !== 'y') {
      console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      rl.close();
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...\n');

    for (const user of users) {
      try {
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId}...`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞
        const planDetails = {
          'basic': { requests_limit: 100, name: '–ë–∞–∑–æ–≤—ã–π' },
          'standard': { requests_limit: 300, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
          'premium': { requests_limit: 600, name: '–ü—Ä–µ–º–∏—É–º' }
        };

        const plan = planDetails[user.planType];
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        const subscriptionData = {
          subscription_type: user.planType,
          subscription_end: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // +30 –¥–Ω–µ–π
          requests_limit: plan.requests_limit,
          requests_used: 0,
          payment_id: user.paymentId
        };

        const result = await updateUserSubscription(user.telegramId, subscriptionData);
        
        if (result.success) {
          console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${user.telegramId}:`);
          console.log(`   –ü–ª–∞–Ω: ${plan.name} (${plan.requests_limit} –∑–∞–ø—Ä–æ—Å–æ–≤)`);
          console.log(`   –î–æ: ${new Date(subscriptionData.subscription_end).toLocaleString('ru-RU')}`);
          console.log(`   Payment ID: ${user.paymentId}\n`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${user.telegramId}\n`);
        }

      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId}:`, error.message);
      }
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –£–≤–µ–¥–æ–º–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Ç–æ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('2. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–ú–æ–π —Å—Ç–∞—Ç—É—Å" –≤ –±–æ—Ç–µ');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }

  rl.close();
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixExistingPayments();
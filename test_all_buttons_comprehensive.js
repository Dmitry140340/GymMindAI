/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –±–æ—Ç–µ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ –∏–∑ keyboards.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏–∑ keyboards.js
const ALL_BUTTONS = {
  '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (mainKeyboard)': [
    'ü§ñ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä',
    'üß¨ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    'üíé –ü–æ–¥–ø–∏—Å–∫–∞',
    'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
    'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
    'üéØ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ',
    'üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥',
    '‚ùì –ü–æ–º–æ—â—å'
  ],
  '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (analyticsKeyboard)': [
    'üìà –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞',
    'üèãÔ∏è‚Äç‚ôÇÔ∏è –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
    'üìä –û–±—â–∏–π –æ—Ç—á–µ—Ç',
    'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (workoutKeyboard)': [
    'üí™ –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
    'üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ',
    'üßò‚Äç‚ôÄÔ∏è –ô–æ–≥–∞/–†–∞—Å—Ç—è–∂–∫–∞',
    'ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (userDataKeyboard)': [
    '‚öñÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å',
    'üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å',
    'üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
    'üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–ó–∞–ø–∏—Å–∏ (recordsKeyboard)': [
    'üèãÔ∏è‚Äç‚ôÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
    '‚öñÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞',
    'üéØ –ú–æ–∏ —Ü–µ–ª–∏',
    'üìà –ü—Ä–æ–≥—Ä–µ—Å—Å',
    'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–ü–æ–¥–ø–∏—Å–∫–∞ (subscriptionKeyboard)': [
    'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
    'üìã –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',
    'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ (subscriptionPlansKeyboard)': [
    'üíé –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω - 150‚ÇΩ',
    '‚≠ê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω - 300‚ÇΩ',
    'üöÄ –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω - 450‚ÇΩ',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (paymentConfirmKeyboard)': [
    'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–ü–æ–º–æ—â—å (helpKeyboard)': [
    'üí¨ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?',
    '‚ö° –ß—Ç–æ —É–º–µ–µ—Ç –ò–ò-—Ç—Ä–µ–Ω–µ—Ä?',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (aiToolsKeyboard)': [
    '/training_program',
    '/nutrition_plan',
    '/deepresearch',
    '/composition_analysis',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
  ],
  '–¢–∏–ø—ã —Ü–µ–ª–µ–π (goalTypesKeyboard)': [
    'üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É',
    '‚öñÔ∏è –°–Ω–∏–∑–∏—Ç—å –≤–µ—Å',
    'üí™ –£–≤–µ–ª–∏—á–∏—Ç—å —Å–∏–ª—É',
    'üèÉ‚Äç‚ôÇÔ∏è –£–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
    'ü§∏‚Äç‚ôÇÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –≥–∏–±–∫–æ—Å—Ç—å',
    '‚ö° –û–±—â–∞—è —Ñ–∏–∑–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
    '‚ùå –û—Ç–º–µ–Ω–∞'
  ],
  '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (deleteRecordsKeyboard)': [
    'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
    'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–µ—Å–∞',
    'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª–∏',
    'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë',
    '‚ùå –û—Ç–º–µ–Ω–∞'
  ],
  '–ù–∞–≤–∏–≥–∞—Ü–∏—è': [
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ',
    'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
  ],
  'Callback –∫–Ω–æ–ø–∫–∏ (inline)': [
    'accept_agreement',
    'decline_agreement',
    'back_to_plans',
    'pay_monthly',
    'pay_quarterly',
    'pay_yearly',
    'confirm_payment',
    'cancel_payment'
  ]
};

console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–ù–û–ü–û–ö\n');
console.log('='.repeat(60));

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª handlers.js
const handlersPath = path.join(__dirname, 'src', 'bot', 'handlers.js');
const handlersContent = fs.readFileSync(handlersPath, 'utf8');

let totalButtons = 0;
let foundHandlers = 0;
let missingHandlers = [];

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–Ω–æ–ø–æ–∫
for (const [category, buttons] of Object.entries(ALL_BUTTONS)) {
  console.log(`\nüìã ${category}:`);
  console.log('-'.repeat(60));
  
  for (const button of buttons) {
    totalButtons++;
    
    // –†–∞–∑–ª–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫
    let hasHandler = false;
    let handlerType = '';
    
    if (category === 'Callback –∫–Ω–æ–ø–∫–∏ (inline)') {
      // –î–ª—è callback –∫–Ω–æ–ø–æ–∫ –∏—â–µ–º case –∏–ª–∏ if —Å callback_data
      const callbackPattern1 = new RegExp(`case '${button.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}':`);
      const callbackPattern2 = new RegExp(`callbackQuery\\.data === '${button.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}'`);
      const callbackPattern3 = new RegExp(`data === '${button.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}'`);
      
      if (callbackPattern1.test(handlersContent) || 
          callbackPattern2.test(handlersContent) || 
          callbackPattern3.test(handlersContent)) {
        hasHandler = true;
        handlerType = 'callback_query';
      }
    } else if (button.startsWith('/')) {
      // –î–ª—è –∫–æ–º–∞–Ω–¥ –∏—â–µ–º bot.onText –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
      const commandPattern1 = new RegExp(`bot\\.onText\\([^)]*${button.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`);
      const commandPattern2 = new RegExp(`text === '${button.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}'`);
      const commandPattern3 = new RegExp(`text\\.startsWith\\('${button.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}'\\)`);
      
      if (commandPattern1.test(handlersContent) || 
          commandPattern2.test(handlersContent) || 
          commandPattern3.test(handlersContent)) {
        hasHandler = true;
        handlerType = 'command';
      }
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
      const escapedButton = button.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      const textPattern1 = new RegExp(`text === '${escapedButton}'`);
      const textPattern2 = new RegExp(`text\\.includes\\('${escapedButton.split(' ')[0]}'\\)`);
      const textPattern3 = new RegExp(`text\\.includes\\('${escapedButton}'\\)`);
      
      if (textPattern1.test(handlersContent) || 
          textPattern2.test(handlersContent) || 
          textPattern3.test(handlersContent)) {
        hasHandler = true;
        handlerType = 'text message';
      }
    }
    
    if (hasHandler) {
      console.log(`  ‚úÖ "${button}" - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω (${handlerType})`);
      foundHandlers++;
    } else {
      console.log(`  ‚ùå "${button}" - –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ï –ù–ê–ô–î–ï–ù!`);
      missingHandlers.push({ category, button });
    }
  }
}

console.log('\n' + '='.repeat(60));
console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
console.log(`  –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: ${totalButtons}`);
console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${foundHandlers}`);
console.log(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: ${missingHandlers.length}`);
console.log(`  üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: ${((foundHandlers / totalButtons) * 100).toFixed(1)}%`);

if (missingHandlers.length > 0) {
  console.log('\n‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:');
  console.log('='.repeat(60));
  
  for (const { category, button } of missingHandlers) {
    console.log(`  ‚Ä¢ [${category}] "${button}"`);
  }
  
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('  1. –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ handlers.js');
  console.log('  2. –ò–ª–∏ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ keyboards.js');
  console.log('  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–∞—Ö');
  
  process.exit(1);
} else {
  console.log('\n‚úÖ –í–°–ï –ö–ù–û–ü–ö–ò –ò–ú–ï–Æ–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò!');
  console.log('   –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
  process.exit(0);
}

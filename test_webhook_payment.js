import axios from 'axios';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://85.198.80.51/webhook/payment'; // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HTTPS –ø–æ—Ä—Ç  
const TEST_TELEGRAM_ID = process.env.TEST_TELEGRAM_ID || '659874549';

async function testWebhookPayment() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ø–ª–∞—Ç–µ–∂–∞\n');
    console.log(`üìç Webhook URL: ${WEBHOOK_URL}`);
    console.log(`üë§ Test Telegram ID: ${TEST_TELEGRAM_ID}\n`);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç YooKassa
    const webhookData = {
        type: 'notification',
        event: 'payment.succeeded',
        object: {
            id: `test_payment_${Date.now()}`,
            status: 'succeeded',
            paid: true,
            amount: {
                value: '300.00',
                currency: 'RUB'
            },
            metadata: {
                telegram_id: TEST_TELEGRAM_ID,
                plan_type: 'standard',
                requests_limit: '300'
            },
            payment_method: {
                type: 'bank_card',
                id: 'test_method_123'
            },
            created_at: new Date().toISOString(),
            captured_at: new Date().toISOString()
        }
    };
    
    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook...');
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(webhookData, null, 2));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await axios.post(
            WEBHOOK_URL,
            webhookData,
            {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'YooKassa/Webhook-Test'
                },
                timeout: 10000
            }
        );
        
        console.log('\n‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
        console.log('üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(response.data, null, 2));
        
        if (response.data.success) {
            console.log('üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:');
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.data.result.telegramId}`);
            console.log(`üì¶ –ü–ª–∞–Ω: ${response.data.result.planType}`);
            console.log(`üí≥ ID –ø–ª–∞—Ç–µ–∂–∞: ${response.data.result.paymentId}`);
            console.log(`üÜî ID –ø–æ–¥–ø–∏—Å–∫–∏: ${response.data.result.subscriptionId}`);
        }
        
        console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ');
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook:');
        
        if (error.response) {
            console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
            console.error('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(error.response.data, null, 2));
        } else if (error.request) {
            console.error('üì° –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞:', WEBHOOK_URL);
        } else {
            console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        }
    }
}

// –¢–µ—Å—Ç –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞–Ω–æ–≤
async function testAllPlans() {
    const plans = [
        { type: 'basic', price: '150.00', requests: 100, name: '–ë–∞–∑–æ–≤—ã–π' },
        { type: 'standard', price: '300.00', requests: 300, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
        { type: 'premium', price: '450.00', requests: 600, name: '–ü—Ä–µ–º–∏—É–º' }
    ];
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞–Ω–æ–≤...\n');
    
    for (const plan of plans) {
        console.log(`üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω: ${plan.name} (${plan.type})`);
        
        const testData = {
            type: 'notification',
            event: 'payment.succeeded',
            object: {
                id: `test_${plan.type}_${Date.now()}`,
                status: 'succeeded',
                paid: true,
                amount: {
                    value: plan.price,
                    currency: 'RUB'
                },
                metadata: {
                    telegram_id: TEST_TELEGRAM_ID,
                    plan_type: plan.type,
                    requests_limit: plan.requests.toString()
                },
                created_at: new Date().toISOString(),
                captured_at: new Date().toISOString()
            }
        };
        
        try {
            const response = await axios.post(WEBHOOK_URL, testData, {
                headers: { 'Content-Type': 'application/json' },
                timeout: 10000
            });
            
            if (response.data.success) {
                console.log(`‚úÖ –ü–ª–∞–Ω ${plan.name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞ ${plan.name}:`, response.data.error);
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∞ ${plan.name}:`, error.message);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log('');
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π\n');
    console.log('===========================================\n');
    console.log('‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (npm start)\n');
    
    try {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        await testWebhookPayment();
        
        console.log('\n===========================================\n');
        
        // –¢–µ—Å—Ç –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤
        await testAllPlans();
        
        console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();

/**
 * üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´ –ò –ü–û–î–ü–ò–°–û–ö
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa
 * 3. –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (webhook)
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
 * 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
 * 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
 * 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
 */

import dotenv from 'dotenv';
import { 
  initDatabase,
  createOrUpdateUser, 
  getUserByTelegramId,
  getActiveSubscription,
  createSubscription,
  getAllUserSubscriptions,
  canUserMakeRequest,
  incrementRequestUsage,
  createPayment
} from './src/services/database.js';

import { createSubscriptionPayment } from './src/services/payment.js';

dotenv.config();

// üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_CONFIG = {
  testUser: {
    id: 111222333, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π ID
    first_name: '–¢–µ—Å—Ç',
    last_name: '–û–ø–ª–∞—Ç–∞',
    username: 'test_payment_user_2024'
  },
  
  testPlans: [
    { 
      type: 'basic', 
      amount: parseInt(process.env.BASIC_PRICE || '150'), 
      requests: parseInt(process.env.BASIC_REQUESTS || '100'),
      description: '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω'
    },
    { 
      type: 'premium', 
      amount: parseInt(process.env.PREMIUM_PRICE || '450'), 
      requests: parseInt(process.env.PREMIUM_REQUESTS || '600'),
      description: '–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω'
    }
  ]
};

// üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let testResults = {
  configCheck: false,
  userCreation: false,
  paymentCreation: false,
  webhookSimulation: false,
  subscriptionCreation: false,
  accessControl: false,
  requestLimits: false,
  paymentHistory: false,
  subscriptionHistory: false,
  multiplePayments: false
};

// üìã –õ–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
let testLogs = [];

function log(message, type = 'info') {
  const timestamp = new Date().toLocaleTimeString('ru-RU');
  const logEntry = `[${timestamp}] ${message}`;
  
  switch(type) {
    case 'success':
      console.log('‚úÖ', logEntry);
      break;
    case 'error':
      console.log('‚ùå', logEntry);
      break;
    case 'warning':
      console.log('‚ö†Ô∏è', logEntry);
      break;
    case 'info':
    default:
      console.log('‚ÑπÔ∏è', logEntry);
      break;
  }
  
  testLogs.push({ timestamp, message, type });
}

// üîß –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function checkConfiguration() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
  
  const requiredEnvVars = [
    'YOOKASSA_PROD_SHOP_ID',
    'YOOKASSA_PROD_SECRET_KEY',
    'BASIC_PRICE',
    'PREMIUM_PRICE',
    'BASIC_REQUESTS',
    'PREMIUM_REQUESTS'
  ];
  
  let configValid = true;
  
  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      log(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${envVar} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, 'error');
      configValid = false;
    } else {
      log(`${envVar}: ‚úì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
    }
  }
  
  if (configValid) {
    log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞', 'success');
    testResults.configCheck = true;
  } else {
    log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞', 'error');
  }
  
  return configValid;
}

// üë§ –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testUserCreation() {
  log('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await createOrUpdateUser(TEST_CONFIG.testUser);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª—Å—è
    const dbUser = await getUserByTelegramId(TEST_CONFIG.testUser.id);
    
    if (dbUser) {
      log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID=${dbUser.id}, Telegram=${dbUser.telegram_id}`, 'success');
      log(`–ò–º—è: ${dbUser.first_name} ${dbUser.last_name || ''}`);
      log(`Username: ${dbUser.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      
      testResults.userCreation = true;
      return dbUser;
    } else {
      log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
      return null;
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`, 'error');
    return null;
  }
}

// üí≥ –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
async function testPaymentCreation(user) {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π...');
  
  const paymentResults = [];
  
  for (const plan of TEST_CONFIG.testPlans) {
    try {
      log(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–ª–∞–Ω–∞: ${plan.description} (${plan.amount}‚ÇΩ)`);
      
      const paymentData = await createSubscriptionPayment(
        user,
        plan.type,
        plan.amount,
        `–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ${plan.description}`
      );
      
      if (paymentData && paymentData.success && paymentData.payment) {
        const payment = paymentData.payment;
        
        log(`–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ID=${payment.id}`, 'success');
        log(`–°—É–º–º–∞: ${payment.amount.value} ${payment.amount.currency}`);
        log(`–°—Ç–∞—Ç—É—Å: ${payment.status}`);
        log(`URL: ${payment.confirmation.confirmation_url.substring(0, 60)}...`);
        
        paymentResults.push({
          plan: plan.type,
          payment: payment,
          success: true
        });
        
        testResults.paymentCreation = true;
      } else {
        log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–ª–∞–Ω–∞ ${plan.type}`, 'error');
        log(`–î–µ—Ç–∞–ª–∏: ${paymentData?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        
        paymentResults.push({
          plan: plan.type,
          payment: null,
          success: false,
          error: paymentData?.error
        });
      }
    } catch (error) {
      log(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ ${plan.type}: ${error.message}`, 'error');
      paymentResults.push({
        plan: plan.type,
        payment: null,
        success: false,
        error: error.message
      });
    }
  }
  
  return paymentResults;
}

// üéØ –≠–¢–ê–ü 4: –ò–º–∏—Ç–∞—Ü–∏—è webhook'–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async function simulateSuccessfulPayment(user, plan) {
  log(`–ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∞: ${plan.description}...`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (—Ñ—É–Ω–∫—Ü–∏—è createSubscription –ø—Ä–∏–Ω–∏–º–∞–µ—Ç telegramId, –∞ –Ω–µ user.id)
    const subscription = await createSubscription(
      user.telegram_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –≤–º–µ—Å—Ç–æ internal id
      plan.type,
      plan.amount,
      `test_payment_${Date.now()}`
    );
    
    if (subscription) {
      log('–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞', 'success');
      log(`–ü–ª–∞–Ω: ${plan.type}`);
      log(`–°—É–º–º–∞: ${plan.amount}‚ÇΩ`);
      log(`–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: ${plan.requests}`);
      
      testResults.webhookSimulation = true;
      testResults.subscriptionCreation = true;
      
      return subscription;
    } else {
      log('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
      return null;
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã: ${error.message}`, 'error');
    return null;
  }
}

// üîê –≠–¢–ê–ü 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
async function testAccessControl(user) {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const activeSubscription = await getActiveSubscription(user.id);
    
    if (activeSubscription) {
      log('–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞', 'success');
      log(`–ü–ª–∞–Ω: ${activeSubscription.plan_type}`);
      log(`–°—Ç–∞—Ç—É—Å: ${activeSubscription.status}`);
      log(`–ó–∞–ø—Ä–æ—Å–æ–≤: ${activeSubscription.requests_used}/${activeSubscription.requests_limit}`);
    } else {
      log('–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'warning');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
    const requestStatus = await canUserMakeRequest(user.id);
    
    log(`–ú–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã: ${requestStatus.canMake}`);
    log(`–¢–∏–ø –¥–æ—Å—Ç—É–ø–∞: ${requestStatus.type}`);
    log(`–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${requestStatus.remaining}/${requestStatus.total || requestStatus.limit}`);
    
    if (requestStatus.canMake) {
      testResults.accessControl = true;
      return true;
    } else {
      log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã', 'error');
      return false;
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`, 'error');
    return false;
  }
}

// üìä –≠–¢–ê–ü 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
async function testRequestLimits(user) {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤...');
  
  try {
    const initialStatus = await canUserMakeRequest(user.id);
    log(`–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${initialStatus.remaining} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ`);
    
    // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const testRequestsCount = Math.min(10, initialStatus.remaining);
    
    for (let i = 1; i <= testRequestsCount; i++) {
      await incrementRequestUsage(user.id);
      const newStatus = await canUserMakeRequest(user.id);
      log(`–ó–∞–ø—Ä–æ—Å ${i}: –æ—Å—Ç–∞–ª–æ—Å—å ${newStatus.remaining} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      
      if (i === 1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª—Å—è
        if (newStatus.remaining === initialStatus.remaining - 1) {
          log('–°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'success');
          testResults.requestLimits = true;
        } else {
          log('–°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
        }
      }
    }
    
    return true;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: ${error.message}`, 'error');
    return false;
  }
}

// üìà –≠–¢–ê–ü 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
async function testHistory(user) {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫
    const allSubscriptions = await getAllUserSubscriptions(user.id);
    
    if (allSubscriptions && allSubscriptions.length > 0) {
      log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${allSubscriptions.length}`, 'success');
      
      allSubscriptions.forEach((sub, index) => {
        log(`–ü–æ–¥–ø–∏—Å–∫–∞ ${index + 1}: ${sub.plan_type} (${sub.status}) - ${sub.amount}‚ÇΩ`);
      });
      
      testResults.subscriptionHistory = true;
      testResults.paymentHistory = true;
    } else {
      log('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø—É—Å—Ç–∞', 'warning');
    }
    
    return true;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`, 'error');
    return false;
  }
}

// üíØ –≠–¢–ê–ü 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
async function testMultiplePayments(user) {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É (–ø—Ä–µ–º–∏—É–º)
    const premiumPlan = TEST_CONFIG.testPlans.find(p => p.type === 'premium');
    
    if (premiumPlan) {
      const secondSubscription = await simulateSuccessfulPayment(user, premiumPlan);
      
      if (secondSubscription) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –ø–æ–¥–ø–∏—Å–∫—É
        const activeSubscription = await getActiveSubscription(user.id);
        
        if (activeSubscription && activeSubscription.requests_limit >= premiumPlan.requests) {
          log('–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –ø–æ–¥–ø–∏—Å–∫—É', 'success');
          testResults.multiplePayments = true;
        } else {
          log('–°–∏—Å—Ç–µ–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
        }
      }
    }
    
    return true;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${error.message}`, 'error');
    return false;
  }
}

// üìä –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function printTestResults() {
  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´');
  console.log('='.repeat(60));
  
  const tests = [
    { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', key: 'configCheck', weight: 1 },
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', key: 'userCreation', weight: 2 },
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π (YooKassa)', key: 'paymentCreation', weight: 3 },
    { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã', key: 'webhookSimulation', weight: 3 },
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', key: 'subscriptionCreation', weight: 3 },
    { name: '–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞', key: 'accessControl', weight: 3 },
    { name: '–°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤', key: 'requestLimits', weight: 2 },
    { name: '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', key: 'paymentHistory', weight: 1 },
    { name: '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫', key: 'subscriptionHistory', weight: 1 },
    { name: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', key: 'multiplePayments', weight: 2 }
  ];
  
  let totalWeight = 0;
  let passedWeight = 0;
  
  tests.forEach((test, index) => {
    const passed = testResults[test.key];
    const status = passed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    const importance = '‚≠ê'.repeat(test.weight);
    
    console.log(`${index + 1}. ${test.name}: ${status} ${importance}`);
    
    totalWeight += test.weight;
    if (passed) passedWeight += test.weight;
  });
  
  const percentage = Math.round((passedWeight / totalWeight) * 100);
  
  console.log('\n' + '-'.repeat(60));
  console.log(`üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedWeight}/${totalWeight} –≤–µ—Å–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü (${percentage}%)`);
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´:');
  
  if (testResults.configCheck) {
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
  }
  
  if (testResults.userCreation) {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
  
  if (testResults.paymentCreation) {
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YooKassa —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π YooKassa');
  }
  
  if (testResults.subscriptionCreation && testResults.webhookSimulation) {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–ª–∞—Ç–µ–∂–µ–π');
  }
  
  if (testResults.accessControl) {
    console.log('‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ—Å—Ç—É–ø–∞');
  }
  
  const userMemoryWorks = testResults.userCreation && 
                         testResults.subscriptionCreation && 
                         testResults.accessControl && 
                         testResults.subscriptionHistory;
  
  console.log('\nüß† –ó–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
  if (userMemoryWorks) {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –¢–û–ß–ù–û –ó–ê–ü–û–ú–ò–ù–ê–ï–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∏');
    console.log('   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    console.log('   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ');
    console.log('   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
  
  // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
  console.log('\nüèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:');
  if (percentage >= 90) {
    console.log('üéâ –°–ò–°–¢–ï–ú–ê –û–ü–õ–ê–¢–´ –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!');
    console.log('   –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else if (percentage >= 75) {
    console.log('üëç –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ');
    console.log('   –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
  } else if (percentage >= 50) {
    console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏');
    console.log('   –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  } else {
    console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    console.log('   –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
  }
}

// üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runComprehensiveTest() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´');
  console.log('='.repeat(60));
  console.log(`‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${TEST_CONFIG.testUser.first_name} ${TEST_CONFIG.testUser.last_name}`);
  console.log(`üì± Telegram ID: ${TEST_CONFIG.testUser.id}`);
  console.log('='.repeat(60));
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await initDatabase();
    log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'success');
    
    // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const configValid = await checkConfiguration();
    if (!configValid) {
      log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', 'error');
      return;
    }
    
    // –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await testUserCreation();
    if (!user) {
      log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
      return;
    }
    
    // –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
    const paymentResults = await testPaymentCreation(user);
    
    // –≠—Ç–∞–ø 4: –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    const basicPlan = TEST_CONFIG.testPlans.find(p => p.type === 'basic');
    if (basicPlan) {
      const subscription = await simulateSuccessfulPayment(user, basicPlan);
      
      if (subscription) {
        // –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
        await testAccessControl(user);
        
        // –≠—Ç–∞–ø 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        await testRequestLimits(user);
        
        // –≠—Ç–∞–ø 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        await testHistory(user);
        
        // –≠—Ç–∞–ø 8: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        await testMultiplePayments(user);
      }
    }
    
  } catch (error) {
    log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error');
    console.error('Stack trace:', error.stack);
  } finally {
    console.log('\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', new Date().toLocaleString('ru-RU'));
    printTestResults();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runComprehensiveTest();

import dotenv from 'dotenv';
dotenv.config();

class CozeAPIService {
    constructor(apiKey, botId) {
        this.apiKey = apiKey;
        this.botId = botId;
        this.baseURL = 'https://api.coze.com/v1';
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    async resumeWorkflow(eventId, answer) {
        const url = `${this.baseURL}/workflow/stream_resume`;
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:', {
            event_id: eventId,
            response: answer
        });

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    event_id: eventId,
                    response: answer
                    // –£–±–∏—Ä–∞–µ–º interrupt_type - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω—É–∂–µ–Ω
                })
            });

            console.log('üì• Resume Workflow API - —Å—Ç–∞—Ç—É—Å:', response.status);
            
            if (!response.ok) {
                const error = await response.text();
                console.log('‚ùå –û—à–∏–±–∫–∞ Resume API:', error);
                return null;
            }

            // –ß–∏—Ç–∞–µ–º stream –æ—Ç–≤–µ—Ç
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let buffer = '';
            
            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                
                buffer += decoder.decode(value, { stream: true });
                const lines = buffer.split('\n');
                buffer = lines.pop(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É
                
                for (const line of lines) {
                    if (line.trim()) {
                        this.parseSSELine(line);
                    }
                }
            }
            
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ Resume Workflow:', error.message);
            return null;
        }
    }

    parseSSELine(line) {
        if (line.startsWith('data: ')) {
            try {
                const data = JSON.parse(line.slice(6));
                console.log('üì® Received:', data);
                
                if (data.content) {
                    console.log('üí¨ –ö–æ–Ω—Ç–µ–Ω—Ç:', data.content.substring(0, 200) + '...');
                }
            } catch (error) {
                console.log('üîç Raw line:', line);
            }
        }
    }
}

async function testInteractiveWorkflow() {
    console.log('üèãÔ∏è‚Äç‚ôÇÔ∏è –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–†–ê–ú–ú–´ –¢–†–ï–ù–ò–†–û–í–û–ö');
    console.log('=====================================================');
    
    const coze = new CozeAPIService(
        process.env.COZE_API_KEY,
        process.env.COZE_BOT_ID
    );
    
    // Event ID –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    const eventId = '7549604686841741318/67070290456674026';
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    const answers = `1. –ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: –Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
2. –ú–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: —Å—Ä–µ–¥–Ω–∏–π
3. –ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç: 25 –ª–µ—Ç
4. –ü–æ–ª: –º—É–∂—Å–∫–æ–π
5. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
6. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –ø–æ–ª–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω`;

    console.log('üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã:', answers);
    
    await coze.resumeWorkflow(eventId, answers);
}

testInteractiveWorkflow();

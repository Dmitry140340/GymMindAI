/**
 * üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´
 * –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

import dotenv from 'dotenv';
import { 
  initDatabase,
  createOrUpdateUser, 
  getUserByTelegramId,
  getActiveSubscription,
  createSubscription,
  canUserMakeRequest,
  incrementRequestUsage,
  getAllUserSubscriptions
} from './src/services/database.js';

dotenv.config();

console.log('üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´');
console.log('='.repeat(50));

async function diagnoseProblem() {
  try {
    await initDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      id: 888777666,
      first_name: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
      last_name: '–¢–µ—Å—Ç',
      username: 'diagnostic_user'
    };
    
    await createOrUpdateUser(testUser);
    const dbUser = await getUserByTelegramId(testUser.id);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID=${dbUser.id}, Telegram=${dbUser.telegram_id}`);
    
    // üîç –ü–†–û–ë–õ–ï–ú–ê: createSubscription —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
    console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 1: –ö–∞–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞');
    
    console.log('üìù –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ createSubscription...');
    const subscription = await createSubscription(
      testUser.id, // telegram_id
      'basic',     // plan_type
      150,         // amount
      `test_payment_${Date.now()}`
    );
    
    if (subscription) {
      console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allSubscriptions = await getAllUserSubscriptions(testUser.id);
      console.log('üìä –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      allSubscriptions.forEach((sub, index) => {
        console.log(`   ${index + 1}. –ü–ª–∞–Ω: ${sub.plan_type}, –°—Ç–∞—Ç—É—Å: ${sub.status}, –õ–∏–º–∏—Ç: ${sub.requests_limit}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
      const activeSubscription = await getActiveSubscription(dbUser.id);
      console.log('\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç getActiveSubscription:');
      if (activeSubscription) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞: ${activeSubscription.plan_type} (${activeSubscription.status})`);
      } else {
        console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
        console.log('üí° –≠—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ getActiveSubscription –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å "active"');
        console.log('üí° –ê createSubscription —Å–æ–∑–¥–∞–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const requestStatus = await canUserMakeRequest(dbUser.id);
      console.log('\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç canUserMakeRequest:');
      console.log(`   –ú–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã: ${requestStatus.canMake}`);
      console.log(`   –¢–∏–ø –¥–æ—Å—Ç—É–ø–∞: ${requestStatus.type}`);
      console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${requestStatus.remaining}`);
      
      if (requestStatus.canMake && requestStatus.type === 'subscription') {
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ-—Ç–∞–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞');
      } else if (requestStatus.canMake && requestStatus.type === 'free') {
        console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ª–∏–º–∏—Ç—É');
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã');
      }
      
    } else {
      console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üìã –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú:');
    
    const allSubs = await getAllUserSubscriptions(testUser.id);
    const activeSub = await getActiveSubscription(dbUser.id);
    const access = await canUserMakeRequest(dbUser.id);
    
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:', allSubs.length > 0 ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('2. –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', activeSub ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('3. –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞:', access.canMake ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('4. –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', (allSubs.length > 0 && dbUser) ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    console.log('\nüí° –í–´–í–û–î:');
    if (allSubs.length > 0 && !activeSub) {
      console.log('üéØ –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, –Ω–æ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏');
      console.log('üîß –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç—å createSubscription —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏,');
      console.log('   –ª–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    if (access.canMake) {
      console.log('‚úÖ –•–û–†–û–®–ê–Ø –ù–û–í–û–°–¢–¨: –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –¢–û–ß–ù–û –ó–ê–ü–û–ú–ò–ù–ê–ï–¢–°–Ø –ò –ü–û–õ–£–ß–ê–ï–¢ –î–û–°–¢–£–ü!');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –ª–∏–º–∏—Ç–æ–≤
    console.log('\nüß™ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ –õ–ò–ú–ò–¢–û–í:');
    const initialRequests = access.remaining;
    
    await incrementRequestUsage(dbUser.id);
    const newAccess = await canUserMakeRequest(dbUser.id);
    
    if (newAccess.remaining < initialRequests) {
      console.log('‚úÖ –õ–ò–ú–ò–¢–´ –ó–ê–ü–†–û–°–û–í –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
      console.log(`   –ë—ã–ª–æ: ${initialRequests}, —Å—Ç–∞–ª–æ: ${newAccess.remaining}`);
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

diagnoseProblem();

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
import dotenv from 'dotenv';
import { 
  initDatabase,
  createOrUpdateUser,
  getActiveSubscription,
  createSubscription,
  activateSubscription,
  checkExpiredSubscriptions,
  canUserMakeRequest,
  incrementRequestUsage
} from './src/services/database.js';

dotenv.config();

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...');

try {
  await initDatabase();
  
  const testUserId = 888888888;
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await createOrUpdateUser({
    id: testUserId,
    username: 'subscription_test',
    first_name: 'Sub',
    last_name: 'Test'
  });

  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –∏–∑ .env
  const basicPrice = process.env.BASIC_PRICE;
  const standardPrice = process.env.STANDARD_PRICE;
  const premiumPrice = process.env.PREMIUM_PRICE;
  
  console.log(`üí∞ Basic –ø–ª–∞–Ω: ${basicPrice}‚ÇΩ`);
  console.log(`üí∞ Standard –ø–ª–∞–Ω: ${standardPrice}‚ÇΩ`);
  console.log(`üí∞ Premium –ø–ª–∞–Ω: ${premiumPrice}‚ÇΩ`);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É Basic
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ Basic –ø–æ–¥–ø–∏—Å–∫–∏...');
  const testPaymentId = `test_payment_${Date.now()}`;
  const subscriptionId = await createSubscription(
    testUserId,
    'basic',
    new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
    testPaymentId
  );
  
  if (subscriptionId) {
    console.log('‚úÖ Basic –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, ID:', subscriptionId);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    console.log('üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏...');
    await activateSubscription(testPaymentId, 'basic');
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const activeSubscription = await getActiveSubscription(testUserId);
    if (activeSubscription) {
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', activeSubscription.plan_type);
      console.log('üìä –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:', activeSubscription.requests_limit);
      console.log('üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤:', activeSubscription.requests_used);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('üîÑ –¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤...');
    const canMakeRequest = await canUserMakeRequest(testUserId);
    console.log('‚úÖ –ú–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å:', canMakeRequest);
    
    if (canMakeRequest.canMake) {
      await incrementRequestUsage(testUserId);
      console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    console.log('üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');
    await checkExpiredSubscriptions();
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏');
  }

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫:', error.message);
}

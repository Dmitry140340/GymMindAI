import dotenv from 'dotenv';
dotenv.config();

class CozeInteractiveWorkflowTester {
    constructor() {
        this.apiKey = process.env.COZE_API_KEY;
        this.botId = process.env.COZE_BOT_ID;
        this.baseURL = 'https://api.coze.com/v1';
    }

    // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow
    async startWorkflow(workflowId, parameters) {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π workflow:', workflowId);
        console.log('üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', parameters);

        try {
            const response = await fetch(`${this.baseURL}/workflow/stream_run`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    workflow_id: workflowId,
                    parameters: parameters,
                    bot_id: this.botId
                })
            });

            console.log('üì• Workflow start response status:', response.status);

            if (!response.ok) {
                const error = await response.text();
                console.log('‚ùå Workflow start error:', error);
                return null;
            }

            return this.processStream(response);

        } catch (error) {
            console.error('‚ùå Workflow start exception:', error.message);
            return null;
        }
    }

    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow
    async resumeWorkflow(eventId, userAnswer, workflowId) {
        console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º workflow —Å eventId:', eventId);
        console.log('üí¨ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userAnswer);

        try {
            const response = await fetch(`${this.baseURL}/workflow/stream_resume`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    event_id: eventId,
                    resume_data: userAnswer,  
                    interrupt_type: 2,       
                    workflow_id: workflowId, // –î–æ–±–∞–≤–ª—è–µ–º workflow_id
                    bot_id: this.botId       // –î–æ–±–∞–≤–ª—è–µ–º bot_id
                })
            });

            console.log('üì• Workflow resume response status:', response.status);

            if (!response.ok) {
                const error = await response.text();
                console.log('‚ùå Workflow resume error:', error);
                return null;
            }

            return this.processStream(response);

        } catch (error) {
            console.error('‚ùå Workflow resume exception:', error.message);
            return null;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ streaming –æ—Ç–≤–µ—Ç–∞
    async processStream(response) {
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let buffer = '';
        let messages = [];
        let eventId = null;
        let isComplete = false;

        try {
            let inactiveCount = 0;
            const maxInactive = 10; // –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
            
            while (true) {
                const { done, value } = await reader.read();
                if (done) {
                    console.log('üì° Stream ended');
                    break;
                }

                if (value.length === 0) {
                    inactiveCount++;
                    if (inactiveCount > maxInactive) {
                        console.log('‚è±Ô∏è Timeout waiting for data');
                        break;
                    }
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    continue;
                }
                
                inactiveCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                buffer += decoder.decode(value, { stream: true });
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –±—É—Ñ–µ—Ä–µ
                while (buffer.includes('\n\n')) {
                    const eventEnd = buffer.indexOf('\n\n');
                    const eventData = buffer.slice(0, eventEnd);
                    buffer = buffer.slice(eventEnd + 2);
                    
                    console.log('üîç Processing event:', eventData);
                    const result = this.parseSSEEvent(eventData);
                    if (result) {
                        if (result.type === 'message') {
                            messages.push(result.content);
                            console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', result.content.substring(0, 150) + '...');
                        } else if (result.type === 'interrupt') {
                            eventId = result.eventId;
                            console.log('‚è∏Ô∏è Workflow —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞, eventId:', eventId);
                        } else if (result.type === 'done') {
                            isComplete = true;
                            console.log('‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω');
                        }
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå Stream processing error:', error.message);
        }

        return {
            messages: messages.join('\n'),
            eventId,
            isComplete,
            success: true
        };
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ SSE —Å–æ–±—ã—Ç–∏—è
    parseSSEEvent(eventText) {
        const lines = eventText.split('\n');
        let eventType = null;
        let data = null;
        
        for (const line of lines) {
            if (line.startsWith('event: ')) {
                eventType = line.slice(7).trim();
            } else if (line.startsWith('data: ')) {
                data = line.slice(6).trim();
            }
        }
        
        if (data) {
            try {
                const parsed = JSON.parse(data);
                
                if (parsed.content && parsed.content.length > 5) {
                    return {
                        type: 'message',
                        content: parsed.content
                    };
                }
                
                if (parsed.interrupt_data && parsed.interrupt_data.event_id) {
                    return {
                        type: 'interrupt',
                        eventId: parsed.interrupt_data.event_id
                    };
                }
                
                if (eventType === 'Done' || parsed.status === 'completed') {
                    return {
                        type: 'done'
                    };
                }
                
            } catch (error) {
                console.log('‚ö†Ô∏è Parse error for:', data);
            }
        }
        return null;
    }
}

async function testCompleteInteractiveWorkflow() {
    console.log('üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û WORKFLOW');
    console.log('========================================');
    
    const tester = new CozeInteractiveWorkflowTester();
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    const params = {
        workout_goal: "–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
        experience_level: "—Å—Ä–µ–¥–Ω–∏–π",
        available_days: "4",
        session_duration: "60-90 –º–∏–Ω—É—Ç",
        equipment: "–ø–æ–ª–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª",
        limitations: "–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
        current_weight: "75",
        target_weight: "85",
        height: "180",
        user_id: "999999999",
        request_type: "training_program"
    };
    
    console.log('\nüéØ –®–ê–ì 1: –ó–∞–ø—É—Å–∫–∞–µ–º workflow');
    console.log('===========================');
    
    const startResult = await tester.startWorkflow(
        process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID,
        params
    );
    
    if (!startResult || !startResult.eventId) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å workflow –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å eventId');
        return;
    }
    
    console.log('‚úÖ Workflow –∑–∞–ø—É—â–µ–Ω, –ø–æ–ª—É—á–µ–Ω eventId:', startResult.eventId);
    console.log('üí¨ –í–æ–ø—Ä–æ—Å –æ—Ç workflow:', startResult.messages);
    
    // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    const answers = `1. –ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: –Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
2. –ú–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: —Å—Ä–µ–¥–Ω–∏–π  
3. –ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç: 25 –ª–µ—Ç
4. –ü–æ–ª: –º—É–∂—Å–∫–æ–π
5. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–∂–∏–º —à—Ç–∞–Ω–≥–∏, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, —Å—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞)
6. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–æ—Ä—Ç–∑–∞–ª—É`;

    console.log('\nüéØ –®–ê–ì 2: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã');
    console.log('=============================');
    console.log('üìù –ù–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:', answers);
    
    const resumeResult = await tester.resumeWorkflow(
        startResult.eventId, 
        answers,
        process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID
    );
    
    if (resumeResult && resumeResult.success) {
        console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–ì–†–ê–ú–ú–´ –¢–†–ï–ù–ò–†–û–í–û–ö:');
        console.log('=================================');
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:', resumeResult.messages);
        console.log('üîÑ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω:', resumeResult.isComplete);
        
        if (resumeResult.eventId) {
            console.log('üí° –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, eventId:', resumeResult.eventId);
        }
    } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    }
    
    console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
}

testCompleteInteractiveWorkflow().catch(console.error);

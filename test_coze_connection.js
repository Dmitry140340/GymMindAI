// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Coze API
import axios from 'axios';

console.log('üîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö COZE API');
console.log('====================================\n');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env
const COZE_API_KEY = 'pat_fAHGFHej2Ek6kUE423HXkuuk7tYJVKjIr1zGS0sKAWddHK9c2qkJP5C30C2VW3mG';
const COZE_BOT_ID = '7428947126656434182';
const COZE_WORKFLOW_ID = '7446536649765609488';

console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
console.log(`üîë API Key: ${COZE_API_KEY.substring(0, 20)}...`);
console.log(`ü§ñ Bot ID: ${COZE_BOT_ID}`);
console.log(`‚ö° Workflow ID: ${COZE_WORKFLOW_ID}\n`);

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞
async function testApiKeyValidation() {
  console.log('üîç –¢–ï–°–¢ 1: –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ê');
  console.log('===========================');
  
  try {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞...');
    
    const response = await axios.get('https://api.coze.com/v1/bots', {
      headers: {
        'Authorization': `Bearer ${COZE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    console.log('‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω!');
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤:', response.data?.data?.length || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    
    if (response.data?.data) {
      console.log('ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:');
      response.data.data.slice(0, 3).forEach((bot, index) => {
        console.log(`  ${index + 1}. ${bot.name || bot.id} (ID: ${bot.id})`);
      });
    }
    
    return { success: true, data: response.data };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞:');
    console.error('Status:', error.response?.status);
    console.error('Status Text:', error.response?.statusText);
    console.error('Error Data:', JSON.stringify(error.response?.data, null, 2));
    
    if (error.response?.status === 401) {
      console.log('\nüö® –û—à–∏–±–∫–∞ 401: API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫');
      console.log('- –¢–æ–∫–µ–Ω –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∏–ª–∏ –ø–µ—Ä–µ–∏–∑–¥–∞–Ω');
      console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
    }
    
    return { success: false, error: error.response?.data || error.message };
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
async function testBotChat() {
  console.log('\nüí¨ –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –ß–ê–¢–ê –° –ë–û–¢–û–ú');
  console.log('==============================');
  
  try {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É...');
    
    const chatData = {
      bot_id: COZE_BOT_ID,
      user_id: '999999999',
      query: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.',
      stream: false
    };
    
    console.log('üì§ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(chatData, null, 2));
    
    const response = await axios.post('https://api.coze.com/v3/chat', chatData, {
      headers: {
        'Authorization': `Bearer ${COZE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
    
    console.log('‚úÖ –ß–∞—Ç —Å –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üí¨ ID –¥–∏–∞–ª–æ–≥–∞:', response.data?.data?.id);
    console.log('üìù –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞:', response.data?.data?.status);
    
    if (response.data?.data?.messages) {
      console.log('üì® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', response.data.data.messages.length);
      const lastMessage = response.data.data.messages[response.data.data.messages.length - 1];
      if (lastMessage?.content) {
        console.log('üí≠ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞:', lastMessage.content.substring(0, 200) + '...');
      }
    }
    
    return { success: true, data: response.data };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º:');
    console.error('Status:', error.response?.status);
    console.error('Error Data:', JSON.stringify(error.response?.data, null, 2));
    
    return { success: false, error: error.response?.data || error.message };
  }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ—Ä–∫—Ñ–ª–æ—É
async function testWorkflowAccess() {
  console.log('\n‚ö° –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –í–û–†–ö–§–õ–û–£');
  console.log('===================================');
  
  try {
    console.log(`üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–æ—Ä–∫—Ñ–ª–æ—É ID: ${COZE_WORKFLOW_ID}...`);
    
    const workflowData = {
      workflow_id: COZE_WORKFLOW_ID,
      parameters: { test: 'connection' },
      is_async: false
    };
    
    console.log('üì§ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(workflowData, null, 2));
    
    const response = await axios.post('https://api.coze.com/v1/workflow/run', workflowData, {
      headers: {
        'Authorization': `Bearer ${COZE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
    
    console.log('‚úÖ –í–æ—Ä–∫—Ñ–ª–æ—É –¥–æ—Å—Ç—É–ø–µ–Ω!');
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üÜî ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', response.data?.data?.execute_id);
    console.log('üìà –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', response.data?.data?.status);
    
    return { success: true, data: response.data };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ—Ä–∫—Ñ–ª–æ—É:');
    console.error('Status:', error.response?.status);
    console.error('Error Data:', JSON.stringify(error.response?.data, null, 2));
    
    if (error.response?.status === 404) {
      console.log('\nüö® –û—à–∏–±–∫–∞ 404: –í–æ—Ä–∫—Ñ–ª–æ—É –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Workflow ID');
      console.log('- –í–æ—Ä–∫—Ñ–ª–æ—É –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      console.log('- –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ—Ä–∫—Ñ–ª–æ—É');
    }
    
    return { success: false, error: error.response?.data || error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runConnectionTests() {
  console.log('‚è±Ô∏è –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', new Date().toLocaleString());
  console.log('');
  
  const results = {};
  let successCount = 0;
  
  // –¢–µ—Å—Ç 1: API –∫–ª—é—á
  results.apiKey = await testApiKeyValidation();
  if (results.apiKey.success) successCount++;
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –¢–µ—Å—Ç 2: –ß–∞—Ç —Å –±–æ—Ç–æ–º
  results.botChat = await testBotChat();
  if (results.botChat.success) successCount++;
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –¢–µ—Å—Ç 3: –í–æ—Ä–∫—Ñ–ª–æ—É
  results.workflowAccess = await testWorkflowAccess();
  if (results.workflowAccess.success) successCount++;
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø');
  console.log('============================');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/3`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString()}`);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('- üîë API –∫–ª—é—á:', results.apiKey.success ? '‚úÖ –í–∞–ª–∏–¥–µ–Ω' : '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
  console.log('- üí¨ –ß–∞—Ç —Å –±–æ—Ç–æ–º:', results.botChat.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('- ‚ö° –í–æ—Ä–∫—Ñ–ª–æ—É:', results.workflowAccess.success ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  
  if (successCount === 3) {
    console.log('\nüèÜ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ COZE API –†–ê–ë–û–¢–ê–Æ–¢!');
  } else if (successCount === 0) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Coze API –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á');
  } else {
    console.log(`\n‚ö†Ô∏è ${3 - successCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è`);
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runConnectionTests().then(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
});

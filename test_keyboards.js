// –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞
import dotenv from 'dotenv';
import { 
  mainKeyboard,
  subscriptionPlansKeyboard,
  paymentConfirmKeyboard,
  aiToolsKeyboard,
  analyticsKeyboard,
  userDataKeyboard,
  workoutKeyboard,
  goalTypesKeyboard,
  helpKeyboard,
  userAgreementKeyboard,
  recordsKeyboard,
  subscriptionKeyboard
} from './src/bot/keyboards.js';

dotenv.config();

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function testKeyboard(keyboardName, keyboard) {
  console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${keyboardName}`);
  
  try {
    if (!keyboard) {
      console.log(`‚ùå ${keyboardName}: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞`);
      return false;
    }

    if (!keyboard.reply_markup) {
      console.log(`‚ùå ${keyboardName}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç reply_markup`);
      return false;
    }

    if (!keyboard.reply_markup.keyboard && !keyboard.reply_markup.inline_keyboard) {
      console.log(`‚ùå ${keyboardName}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç keyboard –∏–ª–∏ inline_keyboard`);
      return false;
    }

    const buttons = keyboard.reply_markup.keyboard || keyboard.reply_markup.inline_keyboard;
    
    if (!Array.isArray(buttons) || buttons.length === 0) {
      console.log(`‚ùå ${keyboardName}: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫`);
      return false;
    }

    let totalButtons = 0;
    buttons.forEach((row, rowIndex) => {
      if (Array.isArray(row)) {
        totalButtons += row.length;
        row.forEach((button, buttonIndex) => {
          const buttonText = button.text || button.callback_data || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞';
          console.log(`  üì± –†—è–¥ ${rowIndex + 1}, –ö–Ω–æ–ø–∫–∞ ${buttonIndex + 1}: "${buttonText}"`);
        });
      } else {
        totalButtons += 1;
        const buttonText = row.text || row.callback_data || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞';
        console.log(`  üì± –ö–Ω–æ–ø–∫–∞: "${buttonText}"`);
      }
    });

    console.log(`‚úÖ ${keyboardName}: ${totalButtons} –∫–Ω–æ–ø–æ–∫, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`);
    return true;

  } catch (error) {
    console.log(`‚ùå ${keyboardName}: –æ—à–∏–±–∫–∞ - ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const keyboards = [
  ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainKeyboard],
  ['–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫', subscriptionPlansKeyboard],
  ['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞', paymentConfirmKeyboard],
  ['–ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', aiToolsKeyboard],
  ['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', analyticsKeyboard],
  ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', userDataKeyboard],
  ['–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', workoutKeyboard],
  ['–¢–∏–ø—ã —Ü–µ–ª–µ–π', goalTypesKeyboard],
  ['–ü–æ–º–æ—â—å', helpKeyboard],
  ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', userAgreementKeyboard],
  ['–ó–∞–ø–∏—Å–∏', recordsKeyboard],
  ['–ü–æ–¥–ø–∏—Å–∫–∞', subscriptionKeyboard]
];

let successCount = 0;
let totalCount = keyboards.length;

keyboards.forEach(([name, keyboard]) => {
  if (testKeyboard(name, keyboard)) {
    successCount++;
  }
});

console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–ù–û–ü–û–ö:');
console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalCount}`);
console.log(`‚ùå –û—à–∏–±–∫–∏: ${totalCount - successCount}/${totalCount}`);
console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successCount / totalCount) * 100)}%`);

if (successCount === totalCount) {
  console.log('\nüéâ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
} else {
  console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.');
}

// –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–Ω–æ–ø–æ–∫
console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–Ω–æ–ø–æ–∫...');

try {
  // –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
  const plans = ['basic', 'standard', 'premium'];
  plans.forEach(plan => {
    const keyboard = paymentConfirmKeyboard(plan);
    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∞ ${plan}: —Ä–∞–±–æ—Ç–∞–µ—Ç`);
  });

  console.log('‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç');
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö: ${error.message}`);
}

console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

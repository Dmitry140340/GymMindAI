// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow —á–µ—Ä–µ–∑ Workflow Stream Resume API
export async function continueInteractiveWorkflow(eventId, userResponse, workflowType, userId) {
  try {
    console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow —á–µ—Ä–µ–∑ Workflow Stream Resume API:', { eventId, userResponse, workflowType, userId });

    if (!eventId) {
      throw new Error('Event ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è workflow');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º workflow_id –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
    let workflowId;
    switch (workflowType) {
      case 'nutrition_plan':
        workflowId = process.env.COZE_NUTRITION_PLAN_WORKFLOW_ID;
        break;
      case 'training_program':
        workflowId = process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID;
        break;
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø workflow: ${workflowType}`);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Workflow Stream Resume API
    const response = await axios.post(
      `${COZE_API_BASE_URL}/v1/workflow/stream_resume`,
      {
        event_id: eventId,
        resume_data: userResponse,     // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        interrupt_type: 2,             // –¢–∏–ø 2 –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        workflow_id: workflowId,       // ID workflow –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        bot_id: process.env.COZE_BOT_ID // ID –±–æ—Ç–∞
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000,
        responseType: 'stream'
      }
    );

    console.log('üì• –û—Ç–≤–µ—Ç Workflow Stream Resume API - —Å—Ç–∞—Ç—É—Å:', response.status);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º streaming –æ—Ç–≤–µ—Ç –æ—Ç Workflow Resume API
    return new Promise((resolve, reject) => {
      let resultMessage = '';
      let isDone = false;
      let newEventId = null;

      response.data.on('data', (chunk) => {
        const chunkStr = chunk.toString();
        console.log('üîç –ü–æ–ª—É—á–µ–Ω resume chunk:', chunkStr);

        // –ü–∞—Ä—Å–∏–º Server-Sent Events —Ñ–æ—Ä–º–∞—Ç
        const lines = chunkStr.split('\n');
        let currentEvent = { id: null, event: null, data: null };

        for (const line of lines) {
          if (line.trim() === '') {
            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è SSE - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if (currentEvent.event && currentEvent.data) {
              console.log('üîç –ü–æ–ª–Ω–æ–µ SSE —Å–æ–±—ã—Ç–∏–µ (resume):', currentEvent);

              try {
                const eventData = JSON.parse(currentEvent.data);
                console.log('üì® Parsed SSE event (resume):', currentEvent.event, eventData);

                if (currentEvent.event === 'Message') {
                  if (eventData.content) {
                    console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (resume):', eventData.content.substring(0, 100) + '...');
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON-–æ–±–µ—Ä—Ç–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    let content = eventData.content;
                    if (typeof content === 'string' && content.startsWith('{"output":')) {
                      try {
                        const parsed = JSON.parse(content);
                        content = parsed.output || content;
                      } catch (e) {
                        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                      }
                    }
                    
                    resultMessage += content;
                  }
                } else if (currentEvent.event === 'Interrupt') {
                  console.log('‚è∏Ô∏è Workflow —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
                  if (eventData.interrupt_data && eventData.interrupt_data.event_id) {
                    newEventId = eventData.interrupt_data.event_id;
                    console.log('üîë –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π event_id –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', newEventId);
                  }
                  isDone = false; // –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
                } else if (currentEvent.event === 'Done') {
                  console.log('‚úÖ Workflow –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω');
                  isDone = true;
                } else if (currentEvent.event === 'Error') {
                  console.log('‚ùå –û—à–∏–±–∫–∞ workflow (resume):', eventData);
                  reject(new Error(eventData.error_message || '–û—à–∏–±–∫–∞ workflow resume'));
                  return;
                }
              } catch (parseError) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å SSE data (resume):', currentEvent.data);
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseError.message);
              }

              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
              currentEvent = { id: null, event: null, data: null };
              continue;
            }
          }

          // –ü–∞—Ä—Å–∏–º SSE –ø–æ–ª—è
          if (line.startsWith('id:')) {
            currentEvent.id = line.slice(3).trim();
          } else if (line.startsWith('event:')) {
            currentEvent.event = line.slice(6).trim();
          } else if (line.startsWith('data:')) {
            currentEvent.data = line.slice(5).trim();
          }
        }
      });

      response.data.on('end', () => {
        console.log('üîö Resume streaming –∑–∞–≤–µ—Ä—à–µ–Ω');
        console.log('üí¨ –†–µ–∑—É–ª—å—Ç–∞—Ç resume:', resultMessage.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        console.log('‚úÖ isDone:', isDone);
        console.log('üîë newEventId:', newEventId);

        resolve({
          success: true,
          message: resultMessage || 'Workflow resume –≤—ã–ø–æ–ª–Ω–µ–Ω',
          eventId: newEventId,
          isComplete: isDone
        });
      });

      response.data.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ resume streaming:', error);
        reject(error);
      });
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow:', error.message);
    if (error.response) {
      console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (resume):', error.response.data);
    }
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è workflow: ${error.message}`
    };
  }
}

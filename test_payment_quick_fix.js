/**
 * üîß –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è
 */

import dotenv from 'dotenv';
import { 
  initDatabase,
  createOrUpdateUser, 
  getUserByTelegramId,
  getActiveSubscription,
  createSubscription,
  canUserMakeRequest,
  incrementRequestUsage
} from './src/services/database.js';

dotenv.config();

console.log('üîß –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´');
console.log('='.repeat(50));

async function quickFixTest() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await initDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      id: 999777666,
      first_name: '–ë—ã—Å—Ç—Ä—ã–π',
      last_name: '–¢–µ—Å—Ç',
      username: 'quick_test_user'
    };
    
    await createOrUpdateUser(testUser);
    const dbUser = await getUserByTelegramId(testUser.id);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID=${dbUser.id}`);
    
    // üîß –ü–†–û–ë–õ–ï–ú–ê 1: –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    console.log('\nüîß –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏');
    
    // –í–º–µ—Å—Ç–æ createSubscription –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'active'
    const { default: Database } = await import('better-sqlite3');
    const db = new Database('./data/subscriptions.db');
    
    const subscriptionId = db.prepare(`
      INSERT INTO subscriptions (user_id, plan_type, status, start_date, end_date, payment_id, amount, requests_limit, requests_used, access_token)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `).run(
      dbUser.id,
      'basic',
      'active', // –ê–ö–¢–ò–í–ù–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞
      new Date().toISOString(),
      new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
      `test_payment_${Date.now()}`,
      150,
      100,
      0,
      'test_access_token'
    ).lastInsertRowid;
    
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ACTIVE');
    
    // üîß –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    console.log('\nüîß –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏');
    
    const activeSubscription = await getActiveSubscription(dbUser.id);
    if (activeSubscription) {
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!');
      console.log(`   –ü–ª–∞–Ω: ${activeSubscription.plan_type}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${activeSubscription.status}`);
      console.log(`   –õ–∏–º–∏—Ç: ${activeSubscription.requests_limit}`);
    } else {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ
      const allSubs = db.prepare('SELECT * FROM subscriptions WHERE user_id = ?').all(dbUser.id);
      console.log('üìä –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', allSubs);
    }
    
    // üîß –¢–ï–°–¢ 3: –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
    console.log('\nüîß –¢–ï–°–¢ 3: –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞');
    
    const requestStatus = await canUserMakeRequest(dbUser.id);
    console.log(`   –ú–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã: ${requestStatus.canMake}`);
    console.log(`   –¢–∏–ø –¥–æ—Å—Ç—É–ø–∞: ${requestStatus.type}`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${requestStatus.remaining}`);
    
    if (requestStatus.canMake && requestStatus.type === 'subscription') {
      console.log('‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ—Å—Ç—É–ø–∞');
      console.log('üîç –î–µ—Ç–∞–ª–∏:', requestStatus);
    }
    
    // üîß –¢–ï–°–¢ 4: –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüîß –¢–ï–°–¢ 4: –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤');
    
    const initialRequests = requestStatus.remaining;
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
    await incrementRequestUsage(dbUser.id);
    const newStatus = await canUserMakeRequest(dbUser.id);
    
    if (newStatus.remaining === initialRequests - 1) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log(`   –ë—ã–ª–æ: ${initialRequests}, —Å—Ç–∞–ª–æ: ${newStatus.remaining}`);
    } else {
      console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   –ë—ã–ª–æ: ${initialRequests}, —Å—Ç–∞–ª–æ: ${newStatus.remaining}`);
    }
    
    // üîß –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîß –¢–ï–°–¢ 5: –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ
    const rememberedUser = await getUserByTelegramId(testUser.id);
    const rememberedSubscription = await getActiveSubscription(rememberedUser.id);
    const rememberedAccess = await canUserMakeRequest(rememberedUser.id);
    
    if (rememberedUser && rememberedSubscription && rememberedAccess.canMake) {
      console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –¢–û–ß–ù–û –ó–ê–ü–û–ú–ò–ù–ê–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!');
      console.log(`   ‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${rememberedUser.first_name}`);
      console.log(`   ‚úì –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: ${rememberedSubscription.plan_type}`);
      console.log(`   ‚úì –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: ${rememberedAccess.remaining} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    db.close();
    
    console.log('\n' + '='.repeat(50));
    console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú:');
    console.log('1. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ACTIVE —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('2. ‚úÖ –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'); 
    console.log('3. ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('4. ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    console.log('5. ‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –¢–û–ß–ù–û –ó–ê–ü–û–ú–ò–ù–ê–ï–¢–°–Ø');
    console.log('\nüí° –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING');
    console.log('üí° –†–ï–®–ï–ù–ò–ï: –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å createSubscription —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞–ª ACTIVE –ø–æ–¥–ø–∏—Å–∫–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

quickFixTest();

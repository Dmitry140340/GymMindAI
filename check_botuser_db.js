import sqlite3 from 'sqlite3';

async function checkBotUserDatabase() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö botuser...\n');
        
        const db = new sqlite3.Database('/home/botuser/GymMindAI/data/subscriptions.db');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ botuser:');
        const users = await new Promise((resolve, reject) => {
            db.all("SELECT * FROM users ORDER BY created_at DESC", (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
        
        if (users.length === 0) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        } else {
            console.log(`\nüìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
            
            users.forEach((user, index) => {
                console.log(`${index + 1}. üë§ ID: ${user.telegram_id}`);
                console.log(`   üìù –ò–º—è: ${user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
                console.log(`   üè∑Ô∏è Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.created_at}`);
                console.log(`   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.last_activity || '–Ω–µ –±—ã–ª–æ'}`);
                if (user.free_requests_limit !== null) {
                    console.log(`   üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${user.free_requests_used || 0}/${user.free_requests_limit}`);
                }
                if (user.requests_limit !== null) {
                    console.log(`   üéØ –ü–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${user.requests_used || 0}/${user.requests_limit}`);
                }
                console.log(`   ‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ: ${user.agreement_accepted ? '–ø—Ä–∏–Ω—è—Ç–æ' : '–Ω–µ –ø—Ä–∏–Ω—è—Ç–æ'}`);
                console.log('');
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        console.log('üí≥ –ü–æ–¥–ø–∏—Å–∫–∏:');
        const subscriptions = await new Promise((resolve, reject) => {
            db.all("SELECT * FROM subscriptions ORDER BY created_at DESC", (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
        
        if (subscriptions.length === 0) {
            console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        } else {
            console.log(`\nüí∞ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptions.length}\n`);
            
            subscriptions.forEach((sub, index) => {
                console.log(`${index + 1}. üÜî User ID: ${sub.user_id}`);
                console.log(`   üíµ –°—Ç–∞—Ç—É—Å: ${sub.status}`);
                console.log(`   üì¶ –¢–∏–ø: ${sub.plan_type}`);
                console.log(`   üí∞ –°—É–º–º–∞: ${sub.amount} RUB`);
                console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${sub.created_at}`);
                if (sub.start_date) console.log(`   üöÄ –ù–∞—á–∞–ª–æ: ${sub.start_date}`);
                if (sub.end_date) console.log(`   ‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${sub.end_date}`);
                if (sub.payment_id) console.log(`   üßæ Payment ID: ${sub.payment_id}`);
                console.log('');
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã workout –µ—Å–ª–∏ –µ—Å—Ç—å
        try {
            const workouts = await new Promise((resolve, reject) => {
                db.all("SELECT COUNT(*) as count FROM workouts", (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows[0].count);
                });
            });
            
            if (workouts > 0) {
                console.log(`üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–æ: ${workouts}`);
            }
        } catch (e) {
            console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ workouts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
        }
        
        db.close();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

checkBotUserDatabase();
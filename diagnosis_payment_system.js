import { initDatabase } from './src/services/database.js';
import { db } from './src/services/database.js';

const diagnosisPaymentSystem = async () => {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n');

  try {
    await initDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const totalUsers = await new Promise((resolve, reject) => {
      db.get('SELECT COUNT(*) as count FROM users', (err, row) => {
        if (err) reject(err);
        else resolve(row.count);
      });
    });
    
    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);

    // –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const subscriptions = await new Promise((resolve, reject) => {
      db.all(`
        SELECT status, COUNT(*) as count 
        FROM subscriptions 
        GROUP BY status
      `, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    console.log('üìã –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    subscriptions.forEach(sub => {
      console.log(`   ${sub.status}: ${sub.count}`);
    });

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    console.log('\nüéØ –ê–ö–¢–ò–í–ù–´–ï –ü–û–î–ü–ò–°–ö–ò:');
    const activeSubscriptions = await new Promise((resolve, reject) => {
      db.all(`
        SELECT s.*, u.telegram_id, u.username 
        FROM subscriptions s
        JOIN users u ON s.user_id = u.id
        WHERE s.status = 'active' AND datetime(s.end_date) > datetime('now')
        ORDER BY s.created_at DESC
      `, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    if (activeSubscriptions.length > 0) {
      activeSubscriptions.forEach((sub, index) => {
        console.log(`${index + 1}. Telegram ID: ${sub.telegram_id}`);
        console.log(`   –ü–ª–∞–Ω: ${sub.plan_type}`);
        console.log(`   –õ–∏–º–∏—Ç: ${sub.requests_limit}`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${sub.requests_used || 0}`);
        console.log(`   –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(sub.end_date).toLocaleString('ru-RU')}`);
        console.log(`   Payment ID: ${sub.payment_id}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${new Date(sub.created_at).toLocaleString('ru-RU')}\n`);
      });
    } else {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n');
    }

    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
    console.log('‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    
    // –ü–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –Ω–æ —Å—Ç–∞—Ç—É—Å–æ–º active
    const expiredActive = await new Promise((resolve, reject) => {
      db.all(`
        SELECT s.*, u.telegram_id 
        FROM subscriptions s
        JOIN users u ON s.user_id = u.id
        WHERE s.status = 'active' AND datetime(s.end_date) <= datetime('now')
      `, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    if (expiredActive.length > 0) {
      console.log(`üìÖ –ü–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º (${expiredActive.length}):`);
      expiredActive.forEach(sub => {
        console.log(`   - Telegram ID: ${sub.telegram_id} (–∏—Å—Ç–µ–∫ ${new Date(sub.end_date).toLocaleString('ru-RU')})`);
      });
      console.log('');
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫
    const usersWithoutSubs = await new Promise((resolve, reject) => {
      db.all(`
        SELECT u.telegram_id, u.username, u.created_at
        FROM users u
        LEFT JOIN subscriptions s ON u.id = s.user_id AND s.status = 'active'
        WHERE s.id IS NULL
        ORDER BY u.created_at DESC
        LIMIT 10
      `, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    if (usersWithoutSubs.length > 0) {
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–ø–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ –≤—Å–µ—Ö):`);
      usersWithoutSubs.forEach(user => {
        console.log(`   - Telegram ID: ${user.telegram_id} (${user.username || '–±–µ–∑ username'})`);
        console.log(`     –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
      });
      console.log('');
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    console.log('üí∞ –ü–û–°–õ–ï–î–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ò (–ø–æ payment_id):');
    const recentPayments = await new Promise((resolve, reject) => {
      db.all(`
        SELECT s.*, u.telegram_id
        FROM subscriptions s
        JOIN users u ON s.user_id = u.id
        WHERE s.payment_id IS NOT NULL AND s.payment_id != ''
        ORDER BY s.created_at DESC
        LIMIT 5
      `, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    if (recentPayments.length > 0) {
      recentPayments.forEach((payment, index) => {
        console.log(`${index + 1}. ${payment.payment_id}`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${payment.telegram_id}`);
        console.log(`   –ü–ª–∞–Ω: ${payment.plan_type}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${payment.status}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(payment.created_at).toLocaleString('ru-RU')}\n`);
      });
    } else {
      console.log('‚ùå –ü–ª–∞—Ç–µ–∂–∏ —Å payment_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
    }

    console.log('üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø:');
    console.log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node fix_existing_payments.js');
    console.log('2. –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:');
    console.log('   - –í –±–æ—Ç–µ –µ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
    console.log('3. –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ webhook: /webhook/payment');
    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ URL webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ YooKassa');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }

  process.exit(0);
};

diagnosisPaymentSystem();
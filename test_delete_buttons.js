/**
 * –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
 */

import { readFile } from 'fs/promises';

async function testDeleteButtons() {
  console.log('üß™ –¢–ï–°–¢ –ö–ù–û–ü–û–ö –£–î–ê–õ–ï–ù–ò–Ø\n');
  
  try {
    // –ß–∏—Ç–∞–µ–º keyboards.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫
    const keyboardsContent = await readFile('src/bot/keyboards.js', 'utf8');
    console.log('‚úÖ –§–∞–π–ª keyboards.js –ø—Ä–æ—á–∏—Ç–∞–Ω');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ keyboards.js
    const deleteButtons = [
      'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏',
      'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 
      'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–µ—Å–∞',
      'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª–∏',
      'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë'
    ];
    
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –ö–ù–û–ü–û–ö –í KEYBOARDS.JS:');
    for (const button of deleteButtons) {
      if (keyboardsContent.includes(button)) {
        console.log(`‚úÖ ${button} - –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        console.log(`‚ùå ${button} - –ù–ï –ù–ê–ô–î–ï–ù–ê`);
      }
    }
    
    // –ß–∏—Ç–∞–µ–º handlers.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const handlersContent = await readFile('src/bot/handlers.js', 'utf8');
    console.log('\n‚úÖ –§–∞–π–ª handlers.js –ø—Ä–æ—á–∏—Ç–∞–Ω');
    
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –í HANDLERS.JS:');
    for (const button of deleteButtons) {
      if (handlersContent.includes(`if (text === '${button}')`) || 
          handlersContent.includes(`text === '${button}'`)) {
        console.log(`‚úÖ ${button} - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω`);
      } else {
        console.log(`‚ùå ${button} - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmFunctions = [
      'confirmDeleteAllGoals',
      'confirmDeleteAllData', 
      'processDeleteAllGoals',
      'processDeleteAllData'
    ];
    
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø:');
    for (const func of confirmFunctions) {
      if (handlersContent.includes(`function ${func}`) || 
          handlersContent.includes(`async function ${func}`)) {
        console.log(`‚úÖ ${func} - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        console.log(`‚ùå ${func} - —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ù–ê–ô–î–ï–ù–ê`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmCommands = [
      '–£–î–ê–õ–ò–¢–¨ –í–°–ï –¢–†–ï–ù–ò–†–û–í–ö–ò',
      '–£–î–ê–õ–ò–¢–¨ –í–°–ï –í–ï–°–ê',
      '–£–î–ê–õ–ò–¢–¨ –í–°–ï –¶–ï–õ–ò',
      '–£–î–ê–õ–ò–¢–¨ –í–°–ï –î–ê–ù–ù–´–ï'
    ];
    
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ê–ù–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø:');
    for (const command of confirmCommands) {
      if (handlersContent.includes(`'${command}'`)) {
        console.log(`‚úÖ ${command} - –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        console.log(`‚ùå ${command} - –∫–æ–º–∞–Ω–¥–∞ –ù–ï –ù–ê–ô–î–ï–ù–ê`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    const waitingStates = [
      'waiting_confirm_delete_all_workouts',
      'waiting_confirm_delete_all_weights',
      'waiting_confirm_delete_all_goals',
      'waiting_confirm_delete_all_data'
    ];
    
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô –û–ñ–ò–î–ê–ù–ò–Ø:');
    for (const state of waitingStates) {
      if (handlersContent.includes(`'${state}'`)) {
        console.log(`‚úÖ ${state} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ`);
      } else {
        console.log(`‚ùå ${state} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï –ù–ê–ô–î–ï–ù–û`);
      }
    }
    
    // –ß–∏—Ç–∞–µ–º database.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –ë–î
    const databaseContent = await readFile('src/services/database.js', 'utf8');
    console.log('\n‚úÖ –§–∞–π–ª database.js –ø—Ä–æ—á–∏—Ç–∞–Ω');
    
    const dbFunctions = [
      'deleteAllWorkouts',
      'deleteAllWeights', 
      'deleteAllGoals'
    ];
    
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô –ë–î:');
    for (const func of dbFunctions) {
      if (databaseContent.includes(`export async function ${func}`) ||
          databaseContent.includes(`function ${func}`)) {
        console.log(`‚úÖ ${func} - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        console.log(`‚ùå ${func} - —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ù–ê–ô–î–ï–ù–ê`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ handlers.js
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –í HANDLERS.JS:');
    for (const func of dbFunctions) {
      if (handlersContent.includes(func)) {
        console.log(`‚úÖ ${func} - –∏–º–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω`);
      } else {
        console.log(`‚ùå ${func} - –∏–º–ø–æ—Ä—Ç –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    }
    
    console.log('\nüéØ –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï:');
    
    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let totalChecks = 0;
    let passedChecks = 0;
    
    // –ö–Ω–æ–ø–∫–∏ –≤ keyboards.js (5 –∫–Ω–æ–ø–æ–∫)
    totalChecks += deleteButtons.length;
    for (const button of deleteButtons) {
      if (keyboardsContent.includes(button)) passedChecks++;
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ handlers.js (5 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    totalChecks += deleteButtons.length;
    for (const button of deleteButtons) {
      if (handlersContent.includes(`text === '${button}'`)) passedChecks++;
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (4 —Ñ—É–Ω–∫—Ü–∏–∏)
    totalChecks += confirmFunctions.length;
    for (const func of confirmFunctions) {
      if (handlersContent.includes(`function ${func}`)) passedChecks++;
    }
    
    // –ö–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (4 –∫–æ–º–∞–Ω–¥—ã)
    totalChecks += confirmCommands.length;
    for (const command of confirmCommands) {
      if (handlersContent.includes(`'${command}'`)) passedChecks++;
    }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è (4 —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    totalChecks += waitingStates.length;
    for (const state of waitingStates) {
      if (handlersContent.includes(`'${state}'`)) passedChecks++;
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –ë–î (3 —Ñ—É–Ω–∫—Ü–∏–∏)
    totalChecks += dbFunctions.length;
    for (const func of dbFunctions) {
      if (databaseContent.includes(`function ${func}`)) passedChecks++;
    }
    
    // –ò–º–ø–æ—Ä—Ç—ã (3 –∏–º–ø–æ—Ä—Ç–∞)
    totalChecks += dbFunctions.length;
    for (const func of dbFunctions) {
      if (handlersContent.includes(func)) passedChecks++;
    }
    
    const successRate = Math.round((passedChecks / totalChecks) * 100);
    
    if (successRate === 100) {
      console.log(`üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! (${passedChecks}/${totalChecks})`);
      console.log('‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (successRate >= 90) {
      console.log(`üü° –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ü–†–û–í–ï–†–û–ö –ü–†–û–ô–î–ï–ù–´ (${passedChecks}/${totalChecks} - ${successRate}%)`);
      console.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
    } else {
      console.log(`üî¥ –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (${passedChecks}/${totalChecks} - ${successRate}%)`);
      console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testDeleteButtons();

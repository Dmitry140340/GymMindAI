import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üî¨ –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê: –û–¢ –ê –î–û –Ø\n');
console.log('='.repeat(80) + '\n');

const testResults = {
  total: 0,
  passed: 0,
  failed: 0,
  warnings: 0,
  categories: {}
};

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 1: –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê
// ============================================================================

async function testProjectStructure() {
  console.log('üìÇ –¢–ï–°–¢ 1: –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê\n');
  
  const category = {
    name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  const requiredFiles = {
    'package.json': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
    '.env': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
    'src/index.js': '–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    'src/bot/handlers.js': '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞',
    'src/bot/keyboards.js': '–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
    'src/services/database.js': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
    'src/services/coze.js': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Coze AI',
    'src/services/payment.js': '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
    'data/': '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö'
  };
  
  for (const [file, description] of Object.entries(requiredFiles)) {
    testResults.total++;
    const filePath = path.join(__dirname, file);
    const exists = fs.existsSync(filePath);
    
    category.tests.push({
      name: `${file} - ${description}`,
      status: exists ? 'passed' : 'failed',
      message: exists ? '–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–§–ê–ô–õ –û–¢–°–£–¢–°–¢–í–£–ï–¢'
    });
    
    if (exists) {
      testResults.passed++;
      category.passed++;
      console.log(`  ‚úÖ ${file} - ${description}`);
    } else {
      testResults.failed++;
      category.failed++;
      console.log(`  ‚ùå ${file} - ${description} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  }
  
  testResults.categories['structure'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 2: –ó–ê–í–ò–°–ò–ú–û–°–¢–ò NPM
// ============================================================================

async function testDependencies() {
  console.log('üì¶ –¢–ï–°–¢ 2: –ó–ê–í–ò–°–ò–ú–û–°–¢–ò NPM\n');
  
  const category = {
    name: '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  const packageJson = JSON.parse(
    fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8')
  );
  
  const requiredDeps = {
    'node-telegram-bot-api': 'Telegram Bot API',
    'axios': 'HTTP –∫–ª–∏–µ–Ω—Ç',
    'dotenv': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
    'express': 'Web —Å–µ—Ä–≤–µ—Ä',
    'sqlite3': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
    'uuid': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UUID',
    'canvas': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    'chart.js': '–ì—Ä–∞—Ñ–∏–∫–∏',
    'chartjs-node-canvas': '–ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è Node.js'
  };
  
  for (const [dep, description] of Object.entries(requiredDeps)) {
    testResults.total++;
    const installed = packageJson.dependencies && packageJson.dependencies[dep];
    
    category.tests.push({
      name: `${dep} - ${description}`,
      status: installed ? 'passed' : 'failed',
      message: installed ? `v${packageJson.dependencies[dep]}` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'
    });
    
    if (installed) {
      testResults.passed++;
      category.passed++;
      console.log(`  ‚úÖ ${dep} - ${description} (${packageJson.dependencies[dep]})`);
    } else {
      testResults.failed++;
      category.failed++;
      console.log(`  ‚ùå ${dep} - ${description} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules
  testResults.total++;
  const nodeModulesExists = fs.existsSync(path.join(__dirname, 'node_modules'));
  
  if (nodeModulesExists) {
    testResults.passed++;
    category.passed++;
    console.log(`  ‚úÖ node_modules - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
  } else {
    testResults.failed++;
    category.failed++;
    console.log(`  ‚ùå node_modules - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´ (–∑–∞–ø—É—Å—Ç–∏—Ç–µ npm install)`);
  }
  
  testResults.categories['dependencies'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 3: –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
// ============================================================================

async function testEnvironmentVariables() {
  console.log('üîê –¢–ï–°–¢ 3: –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø\n');
  
  const category = {
    name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
    tests: [],
    passed: 0,
    failed: 0,
    warnings: 0
  };
  
  const envPath = path.join(__dirname, '.env');
  
  if (!fs.existsSync(envPath)) {
    testResults.total++;
    testResults.failed++;
    category.failed++;
    console.log('  ‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω\n');
    testResults.categories['environment'] = category;
    return;
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  
  const requiredVars = {
    'TELEGRAM_BOT_TOKEN': { required: true, desc: '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞' },
    'BOT_TOKEN': { required: true, desc: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' },
    'COZE_API_TOKEN': { required: true, desc: 'API —Ç–æ–∫–µ–Ω Coze' },
    'BOT_ID': { required: true, desc: 'ID –±–æ—Ç–∞ Coze' },
    'YOOKASSA_SHOP_ID': { required: true, desc: 'ID –º–∞–≥–∞–∑–∏–Ω–∞ YooKassa' },
    'YOOKASSA_SECRET_KEY': { required: true, desc: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á YooKassa' },
    'WEBHOOK_DOMAIN': { required: false, desc: '–î–æ–º–µ–Ω –¥–ª—è webhook' },
    'PORT': { required: false, desc: '–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞' }
  };
  
  for (const [varName, config] of Object.entries(requiredVars)) {
    testResults.total++;
    const pattern = new RegExp(`^${varName}=(.*)`, 'm');
    const match = envContent.match(pattern);
    
    if (match) {
      const value = match[1].trim();
      const isEmpty = !value || value === '' || value === 'your_value_here';
      
      if (isEmpty && config.required) {
        testResults.warnings++;
        category.warnings++;
        category.tests.push({
          name: `${varName} - ${config.desc}`,
          status: 'warning',
          message: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'
        });
        console.log(`  ‚ö†Ô∏è  ${varName} - ${config.desc} - –ù–ï –ù–ê–°–¢–†–û–ï–ù–ê`);
      } else if (isEmpty && !config.required) {
        testResults.passed++;
        category.passed++;
        category.tests.push({
          name: `${varName} - ${config.desc}`,
          status: 'passed',
          message: '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'
        });
        console.log(`  ‚úÖ ${varName} - ${config.desc} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`);
      } else {
        testResults.passed++;
        category.passed++;
        category.tests.push({
          name: `${varName} - ${config.desc}`,
          status: 'passed',
          message: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞'
        });
        console.log(`  ‚úÖ ${varName} - ${config.desc}`);
      }
    } else {
      if (config.required) {
        testResults.failed++;
        category.failed++;
        category.tests.push({
          name: `${varName} - ${config.desc}`,
          status: 'failed',
          message: '–û–¢–°–£–¢–°–¢–í–£–ï–¢'
        });
        console.log(`  ‚ùå ${varName} - ${config.desc} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
      } else {
        testResults.passed++;
        category.passed++;
        console.log(`  ‚úÖ ${varName} - ${config.desc} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)`);
      }
    }
  }
  
  testResults.categories['environment'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 4: –ë–ê–ó–ê –î–ê–ù–ù–´–•
// ============================================================================

async function testDatabase() {
  console.log('üíæ –¢–ï–°–¢ 4: –ë–ê–ó–ê –î–ê–ù–ù–´–•\n');
  
  const category = {
    name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –ë–î
  testResults.total++;
  const dbPath = path.join(__dirname, 'data', 'subscriptions.db');
  const dbExists = fs.existsSync(dbPath);
  
  if (dbExists) {
    const stats = fs.statSync(dbPath);
    testResults.passed++;
    category.passed++;
    category.tests.push({
      name: '–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      status: 'passed',
      message: `–†–∞–∑–º–µ—Ä: ${(stats.size / 1024).toFixed(2)} KB`
    });
    console.log(`  ‚úÖ subscriptions.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${(stats.size / 1024).toFixed(2)} KB)`);
  } else {
    testResults.warnings++;
    category.warnings = (category.warnings || 0) + 1;
    category.tests.push({
      name: '–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      status: 'warning',
      message: '–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ'
    });
    console.log(`  ‚ö†Ô∏è  subscriptions.db - –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã database.js
  testResults.total++;
  const dbServicePath = path.join(__dirname, 'src', 'services', 'database.js');
  
  if (fs.existsSync(dbServicePath)) {
    const dbContent = fs.readFileSync(dbServicePath, 'utf8');
    
    const requiredFunctions = [
      'initDatabase',
      'createOrUpdateUser',
      'getUserByTelegramId',
      'getActiveSubscription',
      'createSubscription',
      'addFitnessMetric',
      'getUserMetrics',
      'getUserFreeRequests'
    ];
    
    let allFunctionsExist = true;
    for (const func of requiredFunctions) {
      if (!dbContent.includes(`export function ${func}`) && 
          !dbContent.includes(`export async function ${func}`)) {
        allFunctionsExist = false;
        console.log(`  ‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è ${func} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    if (allFunctionsExist) {
      testResults.passed++;
      category.passed++;
      category.tests.push({
        name: '–§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        status: 'passed',
        message: '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç'
      });
      console.log(`  ‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
    } else {
      testResults.failed++;
      category.failed++;
      category.tests.push({
        name: '–§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        status: 'failed',
        message: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
      });
    }
  }
  
  testResults.categories['database'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 5: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê
// ============================================================================

async function testBotHandlers() {
  console.log('‚öôÔ∏è  –¢–ï–°–¢ 5: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê\n');
  
  const category = {
    name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  const handlersPath = path.join(__dirname, 'src', 'bot', 'handlers.js');
  
  if (!fs.existsSync(handlersPath)) {
    testResults.total++;
    testResults.failed++;
    category.failed++;
    console.log('  ‚ùå –§–∞–π–ª handlers.js –Ω–µ –Ω–∞–π–¥–µ–Ω\n');
    testResults.categories['handlers'] = category;
    return;
  }
  
  const handlersContent = fs.readFileSync(handlersPath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  const criticalHandlers = {
    'setupBotHandlers': '–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
    'handleTextMessage': '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
    'handleCallbackQuery': '–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫',
    "data === 'accept_agreement'": '–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è',
    "data === 'start_work'": '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã',
    "data === 'my_status'": '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',
    "text === 'ü§ñ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä'": '–ò–ò-—Ç—Ä–µ–Ω–µ—Ä',
    "text === 'üíé –ü–æ–¥–ø–∏—Å–∫–∞'": '–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏',
    "text === 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'": '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    "text === 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'": '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
    '/training_program': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
    '/nutrition_plan': '–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è'
  };
  
  for (const [handler, description] of Object.entries(criticalHandlers)) {
    testResults.total++;
    const exists = handlersContent.includes(handler);
    
    category.tests.push({
      name: `${handler}`,
      status: exists ? 'passed' : 'failed',
      message: description
    });
    
    if (exists) {
      testResults.passed++;
      category.passed++;
      console.log(`  ‚úÖ ${handler} - ${description}`);
    } else {
      testResults.failed++;
      category.failed++;
      console.log(`  ‚ùå ${handler} - ${description} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
  testResults.total++;
  const hasExports = handlersContent.includes('export function setupBotHandlers') ||
                     handlersContent.includes('export { setupBotHandlers');
  
  if (hasExports) {
    testResults.passed++;
    category.passed++;
    console.log(`  ‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã`);
  } else {
    testResults.failed++;
    category.failed++;
    console.log(`  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏–π`);
  }
  
  testResults.categories['handlers'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 6: –ö–õ–ê–í–ò–ê–¢–£–†–´
// ============================================================================

async function testKeyboards() {
  console.log('‚å®Ô∏è  –¢–ï–°–¢ 6: –ö–õ–ê–í–ò–ê–¢–£–†–´\n');
  
  const category = {
    name: '–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  const keyboardsPath = path.join(__dirname, 'src', 'bot', 'keyboards.js');
  
  if (!fs.existsSync(keyboardsPath)) {
    testResults.total++;
    testResults.failed++;
    category.failed++;
    console.log('  ‚ùå –§–∞–π–ª keyboards.js –Ω–µ –Ω–∞–π–¥–µ–Ω\n');
    testResults.categories['keyboards'] = category;
    return;
  }
  
  const keyboardsContent = fs.readFileSync(keyboardsPath, 'utf8');
  
  const requiredKeyboards = {
    'mainKeyboard': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    'subscriptionKeyboard': '–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏',
    'userAgreementKeyboard': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
    'analyticsKeyboard': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
    'aiToolsKeyboard': '–ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    'userDataKeyboard': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏',
    'workoutKeyboard': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
    'goalTypesKeyboard': '–¢–∏–ø—ã —Ü–µ–ª–µ–π',
    'paymentSuccessKeyboard': '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã',
    'helpKeyboard': '–ü–æ–º–æ—â—å'
  };
  
  for (const [keyboard, description] of Object.entries(requiredKeyboards)) {
    testResults.total++;
    const pattern = new RegExp(`export const ${keyboard}`);
    const exists = pattern.test(keyboardsContent);
    
    category.tests.push({
      name: keyboard,
      status: exists ? 'passed' : 'failed',
      message: description
    });
    
    if (exists) {
      testResults.passed++;
      category.passed++;
      console.log(`  ‚úÖ ${keyboard} - ${description}`);
    } else {
      testResults.failed++;
      category.failed++;
      console.log(`  ‚ùå ${keyboard} - ${description} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  }
  
  testResults.categories['keyboards'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 7: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø COZE AI
// ============================================================================

async function testCozeIntegration() {
  console.log('ü§ñ –¢–ï–°–¢ 7: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø COZE AI\n');
  
  const category = {
    name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Coze AI',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  const cozePath = path.join(__dirname, 'src', 'services', 'coze.js');
  
  if (!fs.existsSync(cozePath)) {
    testResults.total++;
    testResults.failed++;
    category.failed++;
    console.log('  ‚ùå –§–∞–π–ª coze.js –Ω–µ –Ω–∞–π–¥–µ–Ω\n');
    testResults.categories['coze'] = category;
    return;
  }
  
  const cozeContent = fs.readFileSync(cozePath, 'utf8');
  
  const requiredFunctions = {
    'runWorkflow': '–ó–∞–ø—É—Å–∫ workflow',
    'getConversationId': '–ü–æ–ª—É—á–µ–Ω–∏–µ conversation ID',
    'clearConversation': '–û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞',
    'continueInteractiveWorkflow': '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow'
  };
  
  for (const [func, description] of Object.entries(requiredFunctions)) {
    testResults.total++;
    const exists = cozeContent.includes(`export function ${func}`) ||
                   cozeContent.includes(`export async function ${func}`);
    
    category.tests.push({
      name: func,
      status: exists ? 'passed' : 'failed',
      message: description
    });
    
    if (exists) {
      testResults.passed++;
      category.passed++;
      console.log(`  ‚úÖ ${func} - ${description}`);
    } else {
      testResults.failed++;
      category.failed++;
      console.log(`  ‚ùå ${func} - ${description} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API endpoint
  testResults.total++;
  const hasApiEndpoint = cozeContent.includes('https://api.coze.com') ||
                         cozeContent.includes('api.coze.com');
  
  if (hasApiEndpoint) {
    testResults.passed++;
    category.passed++;
    console.log(`  ‚úÖ API endpoint –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
  } else {
    testResults.failed++;
    category.failed++;
    console.log(`  ‚ùå API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  testResults.categories['coze'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 8: –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
// ============================================================================

async function testPaymentSystem() {
  console.log('üí≥ –¢–ï–°–¢ 8: –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê\n');
  
  const category = {
    name: '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  const paymentPath = path.join(__dirname, 'src', 'services', 'payment.js');
  
  if (!fs.existsSync(paymentPath)) {
    testResults.total++;
    testResults.failed++;
    category.failed++;
    console.log('  ‚ùå –§–∞–π–ª payment.js –Ω–µ –Ω–∞–π–¥–µ–Ω\n');
    testResults.categories['payment'] = category;
    return;
  }
  
  const paymentContent = fs.readFileSync(paymentPath, 'utf8');
  
  const requiredFunctions = {
    'createSubscriptionPayment': '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞',
    'handlePaymentWebhook': '–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook',
    'verifyPaymentSignature': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏'
  };
  
  for (const [func, description] of Object.entries(requiredFunctions)) {
    testResults.total++;
    const exists = paymentContent.includes(`export function ${func}`) ||
                   paymentContent.includes(`export async function ${func}`) ||
                   paymentContent.includes(`function ${func}`);
    
    category.tests.push({
      name: func,
      status: exists ? 'passed' : 'failed',
      message: description
    });
    
    if (exists) {
      testResults.passed++;
      category.passed++;
      console.log(`  ‚úÖ ${func} - ${description}`);
    } else {
      testResults.failed++;
      category.failed++;
      console.log(`  ‚ùå ${func} - ${description} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ YooKassa API
  testResults.total++;
  const hasYooKassaApi = paymentContent.includes('api.yookassa.ru') ||
                         paymentContent.includes('yookassa');
  
  if (hasYooKassaApi) {
    testResults.passed++;
    category.passed++;
    console.log(`  ‚úÖ YooKassa API –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
  } else {
    testResults.failed++;
    category.failed++;
    console.log(`  ‚ùå YooKassa API –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  testResults.categories['payment'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 9: –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –ì–†–ê–§–ò–ö–ò
// ============================================================================

async function testAnalytics() {
  console.log('üìä –¢–ï–°–¢ 9: –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –ì–†–ê–§–ò–ö–ò\n');
  
  const category = {
    name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  const analyticsPath = path.join(__dirname, 'src', 'services', 'analytics.js');
  
  if (!fs.existsSync(analyticsPath)) {
    testResults.warnings++;
    category.warnings = (category.warnings || 0) + 1;
    console.log('  ‚ö†Ô∏è  –§–∞–π–ª analytics.js –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n');
    testResults.categories['analytics'] = category;
    return;
  }
  
  const analyticsContent = fs.readFileSync(analyticsPath, 'utf8');
  
  const requiredFunctions = {
    'generateWeightChart': '–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞',
    'generateWorkoutChart': '–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
    'generateProgressChart': '–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
    'generateTextReport': '–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç'
  };
  
  for (const [func, description] of Object.entries(requiredFunctions)) {
    testResults.total++;
    const exists = analyticsContent.includes(`export function ${func}`) ||
                   analyticsContent.includes(`export async function ${func}`);
    
    category.tests.push({
      name: func,
      status: exists ? 'passed' : 'failed',
      message: description
    });
    
    if (exists) {
      testResults.passed++;
      category.passed++;
      console.log(`  ‚úÖ ${func} - ${description}`);
    } else {
      testResults.failed++;
      category.failed++;
      console.log(`  ‚ùå ${func} - ${description} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  }
  
  testResults.categories['analytics'] = category;
  console.log('');
}

// ============================================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø 10: –°–ò–ù–¢–ê–ö–°–ò–° –ò –ò–ú–ü–û–†–¢–´
// ============================================================================

async function testSyntaxAndImports() {
  console.log('üîç –¢–ï–°–¢ 10: –°–ò–ù–¢–ê–ö–°–ò–° –ò –ò–ú–ü–û–†–¢–´\n');
  
  const category = {
    name: '–°–∏–Ω—Ç–∞–∫—Å–∏—Å',
    tests: [],
    passed: 0,
    failed: 0
  };
  
  const filesToCheck = [
    'src/index.js',
    'src/bot/handlers.js',
    'src/bot/keyboards.js',
    'src/services/database.js',
    'src/services/coze.js',
    'src/services/payment.js'
  ];
  
  for (const file of filesToCheck) {
    testResults.total++;
    const filePath = path.join(__dirname, file);
    
    if (!fs.existsSync(filePath)) {
      testResults.failed++;
      category.failed++;
      console.log(`  ‚ùå ${file} - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù`);
      continue;
    }
    
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      const issues = [];
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
      const imports = content.match(/import .* from ['"](.*)['"]/g) || [];
      for (const imp of imports) {
        const match = imp.match(/from ['"](.*)['"]/);
        if (match && match[1].startsWith('.')) {
          const importPath = path.resolve(path.dirname(filePath), match[1]);
          const extensions = ['', '.js', '.json'];
          let found = false;
          
          for (const ext of extensions) {
            if (fs.existsSync(importPath + ext)) {
              found = true;
              break;
            }
          }
          
          if (!found) {
            issues.push(`–ò–º–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${match[1]}`);
          }
        }
      }
      
      if (issues.length === 0) {
        testResults.passed++;
        category.passed++;
        category.tests.push({
          name: file,
          status: 'passed',
          message: '–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã'
        });
        console.log(`  ‚úÖ ${file} - –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
      } else {
        testResults.warnings++;
        category.warnings = (category.warnings || 0) + 1;
        category.tests.push({
          name: file,
          status: 'warning',
          message: issues.join(', ')
        });
        console.log(`  ‚ö†Ô∏è  ${file} - ${issues.join(', ')}`);
      }
    } catch (error) {
      testResults.failed++;
      category.failed++;
      category.tests.push({
        name: file,
        status: 'failed',
        message: error.message
      });
      console.log(`  ‚ùå ${file} - –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  testResults.categories['syntax'] = category;
  console.log('');
}

// ============================================================================
// –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í
// ============================================================================

async function runAllTests() {
  await testProjectStructure();
  await testDependencies();
  await testEnvironmentVariables();
  await testDatabase();
  await testBotHandlers();
  await testKeyboards();
  await testCozeIntegration();
  await testPaymentSystem();
  await testAnalytics();
  await testSyntaxAndImports();
}

// ============================================================================
// –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê
// ============================================================================

function generateReport() {
  console.log('='.repeat(80));
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢\n');
  
  const successRate = ((testResults.passed / testResults.total) * 100).toFixed(1);
  
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.total}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${testResults.passed}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${testResults.failed}`);
  console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${testResults.warnings}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%\n`);
  
  // –°—Ç–∞—Ç—É—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n');
  
  for (const [key, category] of Object.entries(testResults.categories)) {
    const total = category.passed + category.failed + (category.warnings || 0);
    const percent = total > 0 ? ((category.passed / total) * 100).toFixed(1) : 0;
    
    let icon = '‚úÖ';
    if (category.failed > 0) icon = '‚ùå';
    else if (category.warnings > 0) icon = '‚ö†Ô∏è';
    
    console.log(`  ${icon} ${category.name}: ${category.passed}/${total} (${percent}%)`);
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  let status = '';
  let recommendations = [];
  
  if (testResults.failed === 0 && testResults.warnings === 0) {
    status = 'üéâ –ë–û–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£!';
    recommendations.push('–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    recommendations.push('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: npm start');
  } else if (testResults.failed === 0) {
    status = '‚úÖ –ë–û–¢ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£ (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏)';
    recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:');
    for (const [key, cat] of Object.entries(testResults.categories)) {
      if (cat.warnings > 0) {
        for (const test of cat.tests) {
          if (test.status === 'warning') {
            recommendations.push(`  - ${test.name}: ${test.message}`);
          }
        }
      }
    }
  } else if (testResults.failed <= 5) {
    status = '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê';
    recommendations.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:');
    for (const [key, cat] of Object.entries(testResults.categories)) {
      if (cat.failed > 0) {
        for (const test of cat.tests) {
          if (test.status === 'failed') {
            recommendations.push(`  - ${test.name}: ${test.message}`);
          }
        }
      }
    }
  } else {
    status = '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´';
    recommendations.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:');
    recommendations.push('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: npm install');
    recommendations.push('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª');
    recommendations.push('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞');
  }
  
  console.log('\n' + '='.repeat(80));
  console.log(`\n${status}\n`);
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n');
  recommendations.forEach(rec => console.log(rec));
  console.log('\n' + '='.repeat(80));
  
  return { status, recommendations, successRate };
}

// ============================================================================
// –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ß–ï–¢–ê
// ============================================================================

function saveReport(status, recommendations, successRate) {
  const reportContent = `# –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞

**–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}  
**–í–µ—Ä—Å–∏—è:** 1.0.0

## –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** ${testResults.total}
- **–£—Å–ø–µ—à–Ω–æ:** ${testResults.passed} (${successRate}%)
- **–û—à–∏–±–æ–∫:** ${testResults.failed}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** ${testResults.warnings}

## –°—Ç–∞—Ç—É—Å

${status}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

${Object.entries(testResults.categories).map(([key, cat]) => {
  const total = cat.passed + cat.failed + (cat.warnings || 0);
  const percent = total > 0 ? ((cat.passed / total) * 100).toFixed(1) : 0;
  
  return `### ${cat.name}

- –í—Å–µ–≥–æ: ${total}
- –£—Å–ø–µ—à–Ω–æ: ${cat.passed}
- –û—à–∏–±–æ–∫: ${cat.failed}
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${cat.warnings || 0}
- –ü—Ä–æ—Ü–µ–Ω—Ç: ${percent}%

#### –î–µ—Ç–∞–ª–∏:

${cat.tests.map(test => `- ${test.status === 'passed' ? '‚úÖ' : test.status === 'failed' ? '‚ùå' : '‚ö†Ô∏è'} **${test.name}**: ${test.message}`).join('\n')}
`;
}).join('\n\n')}

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

${recommendations.join('\n')}

---

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FitnessBotAI*
`;
  
  fs.writeFileSync(
    path.join(__dirname, 'COMPREHENSIVE_TEST_REPORT.md'),
    reportContent,
    'utf8'
  );
  
  console.log('\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: COMPREHENSIVE_TEST_REPORT.md\n');
}

// ============================================================================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

async function main() {
  try {
    await runAllTests();
    const { status, recommendations, successRate } = generateReport();
    saveReport(status, recommendations, successRate);
    
    // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
    process.exit(testResults.failed > 5 ? 1 : 0);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

main();

import { 
  createOrUpdateUser, 
  getUserByTelegramId, 
  getActiveSubscription,
  checkExpiredSubscriptions,
  getUserAccessToken,
  updateUserAgreement,
  // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  addFitnessMetric,
  addWorkout,
  addAchievement,
  getUserMetrics,
  getUserWorkouts,
  getUserAchievements,
  // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  getUserFreeRequests,
  useFreeRequest,
  canUserMakeRequest,
  incrementRequestUsage,
  // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  saveFitnessMetric,
  setUserGoal,
  getUserGoals,
  saveWorkout,
  getLastWeightRecord,
  updateLastWeightRecord,
  deleteLastWeightRecord,
  getLastWorkoutRecord,
  updateLastWorkoutRecord,
  deleteLastWorkoutRecord,
  deleteUserGoal,
  updateUserGoal,
  clearAllUserData,
  getUserDataSummary
} from '../services/database.js';
import { runWorkflow, getConversationId, clearConversation, continueInteractiveWorkflow } from '../services/coze.js';
import { runCozeChat } from '../services/coze_v3.js';
import { createSubscriptionPayment } from '../services/payment.js';
import { analyzeUserProgress, formatProgressReport } from '../services/progress-analyzer.js';
import { 
  generateWeightChart, 
  generateWorkoutChart, 
  generateProgressChart, 
  generateTextReport 
} from '../services/analytics.js';
import {
  mainKeyboard,
  subscriptionKeyboard,
  confirmPaymentKeyboard,
  paymentLinkKeyboard,
  manageSubscriptionKeyboard,
  noSubscriptionKeyboard,
  helpKeyboard,
  analyticsKeyboard,
  workoutKeyboard,
  userAgreementKeyboard,
  aiToolsKeyboard,
  userDataKeyboard,
  workoutTypesKeyboard,
  detailedWorkoutKeyboard,
  popularExercisesKeyboard,
  viewRecordsKeyboard,
  deleteRecordsKeyboard,
  goalTypesKeyboard,
  subscriptionPlansKeyboard,
  paymentConfirmKeyboard
} from './keyboards.js';

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
const userWorkflowContext = new Map();
const userInteractiveWorkflow = new Map();
const activeWorkouts = new Map();

export function setupBotHandlers(bot) {
  // –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
  bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    const startParam = match ? match[1] : null;

    try {
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      await createOrUpdateUser(user);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
      const dbUser = await getUserByTelegramId(user.id);
      
      if (!dbUser.agreement_accepted) {
        await bot.sendMessage(
          chatId,
          'üìÑ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitnessBotAI!**\n\n' +
          '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n\n' +
          '‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö. ' +
          '–í—Å–µ–≥–¥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –∏–ª–∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥–∏–µ—Ç—ã.\n\n' +
          'üîí –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.',
          { parse_mode: 'Markdown', ...userAgreementKeyboard }
        );
        return;
      }
      
      const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitnessBotAI!

ü§ñ –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ò–ò-—Ç—Ä–µ–Ω–µ—Ä, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π!

‚ú® –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∏—Ç–Ω–µ—Å–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—Å

üíé –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      await bot.sendMessage(chatId, welcomeMessage, mainKeyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
      await handleTextMessage(bot, msg);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.on('callback_query', async (callbackQuery) => {
    await handleCallbackQuery(bot, callbackQuery);
  });

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  setInterval(async () => {
    try {
      await checkExpiredSubscriptions();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    }
  }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

async function handleTextMessage(bot, msg) {
  const chatId = msg.chat.id;
  const text = msg.text;
  const user = msg.from;

  console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, text);

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await createOrUpdateUser(user);
    const dbUser = await getUserByTelegramId(user.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
    if (!dbUser.agreement_accepted) {
      await bot.sendMessage(
        chatId,
        '‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.',
        userAgreementKeyboard
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    if (text === 'ü§ñ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä' || text.includes('–ò–ò-—Ç—Ä–µ–Ω–µ—Ä')) {
      userStates.delete(user.id); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–∞
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
      const subscription = await getActiveSubscription(dbUser.id);
      const freeRequests = await getUserFreeRequests(dbUser.id);
      
      let hasAccess = false;
      let requestStatus = null;
      
      if (subscription && subscription.status === 'active') {
        hasAccess = true;
        requestStatus = { type: 'subscription', subscription };
      } else if (freeRequests.remaining > 0) {
        hasAccess = true;
        requestStatus = { type: 'free', remaining: freeRequests.remaining };
      }
      
      if (hasAccess) {
        userStates.set(user.id, 'ai_trainer');
        
        let message = 'ü§ñ **–ò–ò-—Ç—Ä–µ–Ω–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n';
        message += 'üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ:\n';
        message += '‚Ä¢ üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö\n';
        message += '‚Ä¢ ü•ó –ü–∏—Ç–∞–Ω–∏–∏ –∏ –¥–∏–µ—Ç–µ\n';
        message += '‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏\n';
        message += '‚Ä¢ üßò‚Äç‚ôÄÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ —Ä–∞—Å—Ç—è–∂–∫–µ\n\n';
        
        if (requestStatus.type === 'free') {
          message += `üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${requestStatus.remaining}/7\n\n`;
        } else {
          message += 'üíé –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n';
        }
        
        message += 'üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –æ—Ç–≤–µ—á—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ!';
        
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown', ...mainKeyboard });
      } else {
        await bot.sendMessage(
          chatId,
          'üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n' +
          '‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (7/7 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)\n\n' +
          'üíé –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–æ–º –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\n\n' +
          '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:**\n' +
          '‚Ä¢ ü•â –ë–∞–∑–æ–≤—ã–π (150‚ÇΩ) - 30 –¥–Ω–µ–π, 100 –∑–∞–ø—Ä–æ—Å–æ–≤\n' +
          '‚Ä¢ ü•à –°—Ç–∞–Ω–¥–∞—Ä—Ç (300‚ÇΩ) - 30 –¥–Ω–µ–π, 300 –∑–∞–ø—Ä–æ—Å–æ–≤\n' +
          '‚Ä¢ ü•á –ü—Ä–µ–º–∏—É–º (450‚ÇΩ) - 30 –¥–Ω–µ–π, –±–µ–∑–ª–∏–º–∏—Ç',
          { parse_mode: 'Markdown', ...subscriptionKeyboard }
        );
      }
      return;
    }
    
    if (text === 'üìä –ü–æ–¥–ø–∏—Å–∫–∞' || text.includes('–ü–æ–¥–ø–∏—Å–∫–∞')) {
      userStates.delete(user.id);
      await showSubscriptionMenu(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' || text.includes('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')) {
      userStates.delete(user.id);
      await bot.sendMessage(
        chatId,
        'üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        { parse_mode: 'Markdown', ...mainKeyboard }
      );
      return;
    }

    if (text === 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' || text.includes('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')) {
      userStates.delete(user.id);
      await showUserProfile(bot, chatId, user);
      return;
    }

    if (text === 'üéØ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ' || text.includes('–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ')) {
      userStates.delete(user.id);
      await bot.sendMessage(
        chatId,
        'üéØ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏**\n\n' +
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
        '‚Ä¢ ‚öñÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–µ—Å\n' +
        '‚Ä¢ üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —Ü–µ–ª–∏\n' +
        '‚Ä¢ üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n' +
        '‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n' +
        '‚Ä¢ üìß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n' +
        '‚Ä¢ üóëÔ∏è –£–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        { parse_mode: 'Markdown', ...userDataKeyboard }
      );
      return;
    }

    if (text === 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞' || text.includes('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')) {
      userStates.delete(user.id);
      await bot.sendMessage(
        chatId,
        'üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã**\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:',
        { parse_mode: 'Markdown', ...analyticsKeyboard }
      );
      return;
    }

    if (text === '‚ùì –ü–æ–º–æ—â—å' || text.includes('–ü–æ–º–æ—â—å')) {
      userStates.delete(user.id);
      const helpMessage = `‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é FitnessBotAI**

ü§ñ **–ò–ò-—Ç—Ä–µ–Ω–µ—Ä** - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É:
‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π  
‚Ä¢ –î–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π

üìä **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å** - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:
‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π

üéØ **–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-–¥–∞–Ω–Ω—ã–º–∏:
‚Ä¢ –ó–∞–ø–∏—Å—å –≤–µ—Å–∞ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - –æ—Ç—á–µ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏:
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

üíé **–ü–æ–¥–ø–∏—Å–∫–∞** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–æ–º:
‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞—Ä–∏—Ñ–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π

üÜò **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_bot`;

      await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown', ...mainKeyboard });
      return;
    }

    if (text === 'üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥' || text.includes('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥')) {
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates.delete(user.id);
      userWorkflowContext.delete(user.id);
      userInteractiveWorkflow.delete(user.id);
      
      await bot.sendMessage(
        chatId,
        'üîÑ **–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω!**\n\n' +
        '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É.\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        { parse_mode: 'Markdown', ...mainKeyboard }
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–∞
    const userState = userStates.get(user.id);
    
    if (userState === 'ai_trainer') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const subscription = await getActiveSubscription(dbUser.id);
      const requestStatus = await canUserMakeRequest(dbUser.id);
      
      if (!requestStatus.canMake) {
        await bot.sendMessage(
          chatId,
          'üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n' +
          requestStatus.message,
          { parse_mode: 'Markdown', ...subscriptionKeyboard }
        );
        userStates.delete(user.id);
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é"
      const thinkingMessage = await bot.sendMessage(chatId, 'ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      let workflowContext = userWorkflowContext.get(user.id);
      
      let messageWithContext = text;
      if (workflowContext && workflowContext.lastResponse) {
        messageWithContext = `–ö–û–ù–¢–ï–ö–°–¢ –ü–†–ï–î–´–î–£–©–ï–ì–û –†–ê–ó–ì–û–í–û–†–ê:
${workflowContext.lastResponse}

–£–¢–û–ß–ù–Ø–Æ–©–ò–ô –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: ${text}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.`;
      }

      console.log(`üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ Coze API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      
      const aiResponse = await runCozeChat(user.access_token, messageWithContext, user.id, '–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å‚Äë—Ç—Ä–µ–Ω–µ—Ä –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é: –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å–ø–∏—Å–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.');

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞–µ—Ç"
      try {
        await bot.deleteMessage(chatId, thinkingMessage.message_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }

      if (aiResponse.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π
        workflowContext = workflowContext || {};
        workflowContext.lastResponse = aiResponse.message;
        workflowContext.timestamp = Date.now();
        userWorkflowContext.set(user.id, workflowContext);
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if (requestStatus.type === 'free') {
          await useFreeRequest(dbUser.id);
          const freeRequests = await getUserFreeRequests(dbUser.id);
          await bot.sendMessage(
            chatId, 
            aiResponse.message + `\n\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${freeRequests.remaining}/7`
          );
        } else if (requestStatus.type === 'subscription') {
          await incrementRequestUsage(dbUser.id);
          await bot.sendMessage(chatId, aiResponse.message);
        } else {
          await bot.sendMessage(chatId, aiResponse.message);
        }
      } else {
        await bot.sendMessage(chatId, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      return;
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await bot.sendMessage(
      chatId,
      'ü§î –ù–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n' +
      'üí° –î–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–æ–º –Ω–∞–∂–º–∏—Ç–µ "ü§ñ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä"',
      mainKeyboard
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}

async function handleCallbackQuery(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;

  try {
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await bot.answerCallbackQuery(callbackQuery.id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
    if (data === 'accept_agreement') {
      await updateUserAgreement(userId, true);
      
      await bot.editMessageText(
        '‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è!**\n\n' +
        'üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ FitnessBotAI!\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...mainKeyboard
        }
      );
      return;
    }

    if (data === 'decline_agreement') {
      await bot.editMessageText(
        '‚ùå **–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n' +
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n\n' +
        '–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown'
        }
      );
      return;
    }

    if (data === 'main_menu') {
      await bot.editMessageText(
        'üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...mainKeyboard
        }
      );
      return;
    }

    if (data === 'subscription_menu') {
      const dbUser = await getUserByTelegramId(userId);
      await showSubscriptionMenu(bot, chatId, dbUser.id, messageId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    if (data.startsWith('plan_')) {
      const planType = data.replace('plan_', '');
      await showPaymentConfirmation(bot, chatId, messageId, planType);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    if (data.startsWith('confirm_payment_')) {
      const planType = data.replace('confirm_payment_', '');
      await processPayment(bot, chatId, messageId, userId, planType);
      return;
    }

    // –î—Ä—É–≥–∏–µ callback'—ã
    await bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}

async function showSubscriptionMenu(bot, chatId, userId, messageId = null) {
  try {
    const subscription = await getActiveSubscription(userId);
    const freeRequests = await getUserFreeRequests(userId);
    
    let message = 'üìä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π**\n\n';
    
    if (subscription && subscription.status === 'active') {
      const endDate = new Date(subscription.end_date).toLocaleString('ru-RU');
      message += `‚úÖ **–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n`;
      message += `üìã –ü–ª–∞–Ω: ${subscription.plan_type}\n`;
      message += `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate}\n`;
      message += `üîÑ –ó–∞–ø—Ä–æ—Å–æ–≤: ${subscription.requests_used}/${subscription.requests_limit}\n\n`;
      
      if (messageId) {
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...manageSubscriptionKeyboard
        });
      } else {
        await bot.sendMessage(chatId, message, { 
          parse_mode: 'Markdown', 
          ...manageSubscriptionKeyboard 
        });
      }
    } else {
      message += `‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏**\n\n`;
      message += `üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${freeRequests.used}/${freeRequests.limit}\n`;
      message += `üìÖ –°–±—Ä–æ—Å: –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞\n\n`;
      message += `üíé **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:**\n`;
      message += `‚Ä¢ ü•â –ë–∞–∑–æ–≤—ã–π - 150‚ÇΩ (100 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)\n`;
      message += `‚Ä¢ ü•à –°—Ç–∞–Ω–¥–∞—Ä—Ç - 300‚ÇΩ (300 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)\n`;
      message += `‚Ä¢ ü•á –ü—Ä–µ–º–∏—É–º - 450‚ÇΩ (–±–µ–∑–ª–∏–º–∏—Ç/–º–µ—Å—è—Ü)\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:`;
      
      if (messageId) {
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...subscriptionPlansKeyboard
        });
      } else {
        await bot.sendMessage(chatId, message, { 
          parse_mode: 'Markdown', 
          ...subscriptionPlansKeyboard 
        });
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.');
  }
}

async function showUserProfile(bot, chatId, user) {
  try {
    const dbUser = await getUserByTelegramId(user.id);
    const subscription = await getActiveSubscription(dbUser.id);
    const freeRequests = await getUserFreeRequests(dbUser.id);
    
    let profileMessage = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n`;
    profileMessage += `üÜî ID: ${user.id}\n`;
    profileMessage += `üë§ –ò–º—è: ${user.first_name}`;
    if (user.last_name) profileMessage += ` ${user.last_name}`;
    if (user.username) profileMessage += `\nüìß @${user.username}`;
    
    profileMessage += `\nüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(dbUser.created_at).toLocaleDateString('ru-RU')}\n\n`;
    
    if (subscription && subscription.status === 'active') {
      profileMessage += `‚úÖ **–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n`;
      profileMessage += `üìã –ü–ª–∞–Ω: ${subscription.plan_type}\n`;
      profileMessage += `üìÖ –î–æ: ${new Date(subscription.end_date).toLocaleDateString('ru-RU')}\n`;
      profileMessage += `üîÑ –ó–∞–ø—Ä–æ—Å–æ–≤: ${subscription.requests_used}/${subscription.requests_limit}`;
    } else {
      profileMessage += `üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø**\n`;
      profileMessage += `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${freeRequests.used}/${freeRequests.limit} –∑–∞–ø—Ä–æ—Å–æ–≤`;
    }
    
    await bot.sendMessage(chatId, profileMessage, { 
      parse_mode: 'Markdown', 
      ...mainKeyboard 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
  }
}

async function showPaymentConfirmation(bot, chatId, messageId, planType) {
  const plans = {
    basic: { name: '–ë–∞–∑–æ–≤—ã–π', price: 150, requests: 100 },
    standard: { name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç', price: 300, requests: 300 },
    premium: { name: '–ü—Ä–µ–º–∏—É–º', price: 450, requests: '–±–µ–∑–ª–∏–º–∏—Ç' }
  };
  
  const plan = plans[planType];
  if (!plan) return;
  
  const message = `üí≥ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏**\n\n` +
    `üìã –ü–ª–∞–Ω: ${plan.name}\n` +
    `üí∞ –¶–µ–Ω–∞: ${plan.price}‚ÇΩ\n` +
    `üîÑ –ó–∞–ø—Ä–æ—Å–æ–≤: ${plan.requests}\n` +
    `üìÖ –°—Ä–æ–∫: 30 –¥–Ω–µ–π\n\n` +
    `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:`;
  
  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'Markdown',
    ...paymentConfirmKeyboard(planType)
  });
}

async function processPayment(bot, chatId, messageId, telegramId, planType) {
  try {
    await bot.editMessageText(
      '‚è≥ –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã...',
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
    
    const paymentResult = await createSubscriptionPayment(telegramId, planType);
    
    if (paymentResult.success) {
      const message = `üí≥ **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–æ—Ç–æ–≤–∞!**\n\n` +
        `üìã –ü–ª–∞–Ω: ${planType}\n` +
        `üí∞ –°—É–º–º–∞: ${paymentResult.amount}‚ÇΩ\n\n` +
        `üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;
      
      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: paymentResult.paymentUrl }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'subscription_menu' }]
          ]
        }
      });
    } else {
      await bot.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'subscription_menu' }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
    await bot.editMessageText(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'subscription_menu' }]
          ]
        }
      }
    );
  }
}

// Export functions
export { handleTextMessage, handleCallbackQuery };
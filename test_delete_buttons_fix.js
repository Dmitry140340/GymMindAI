// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ deleteRecordsKeyboard –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

import fs from 'fs';
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è...\n');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
const keyboardsPath = path.join(__dirname, 'src', 'bot', 'keyboards.js');
const handlersPath = path.join(__dirname, 'src', 'bot', 'handlers.js');
const databasePath = path.join(__dirname, 'src', 'services', 'database.js');

try {
  const keyboardsContent = fs.readFileSync(keyboardsPath, 'utf8');
  const handlersContent = fs.readFileSync(handlersPath, 'utf8');
  const databaseContent = fs.readFileSync(databasePath, 'utf8');

  console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã\n');

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ keyboards.js
  const deleteButtons = [];
  const deleteButtonsRegex = /üóëÔ∏è[^'"]*/g;
  let match;
  
  while ((match = deleteButtonsRegex.exec(keyboardsContent)) !== null) {
    const buttonText = match[0].trim();
    if (!deleteButtons.includes(buttonText)) {
      deleteButtons.push(buttonText);
    }
  }

  console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ keyboards.js:');
  deleteButtons.forEach(button => console.log(`  ‚Ä¢ ${button}`));
  console.log();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
  const missingHandlers = [];
  const foundHandlers = [];

  deleteButtons.forEach(button => {
    const handlerPattern = new RegExp(`if\\s*\\(.*text\\s*===\\s*['"]${button.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}['"]\\s*\\)`, 'g');
    
    if (handlerPattern.test(handlersContent)) {
      foundHandlers.push(button);
    } else {
      missingHandlers.push(button);
    }
  });

  console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏:');
  foundHandlers.forEach(button => console.log(`  ‚Ä¢ ${button}`));
  console.log();

  if (missingHandlers.length > 0) {
    console.log('‚ùå –ö–Ω–æ–ø–∫–∏ –ë–ï–ó –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:');
    missingHandlers.forEach(button => console.log(`  ‚Ä¢ ${button}`));
    console.log();
  } else {
    console.log('üéâ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–º–µ—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏!\n');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ database.js
  const requiredFunctions = [
    'deleteAllWorkouts',
    'deleteAllWeights', 
    'deleteAllGoals'
  ];

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ database.js:');
  requiredFunctions.forEach(func => {
    const funcPattern = new RegExp(`export\\s+async\\s+function\\s+${func}`, 'g');
    if (funcPattern.test(databaseContent)) {
      console.log(`  ‚úÖ ${func} - –Ω–∞–π–¥–µ–Ω–∞`);
    } else {
      console.log(`  ‚ùå ${func} - –ù–ï –Ω–∞–π–¥–µ–Ω–∞`);
    }
  });

  console.log();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ handlers.js
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ handlers.js:');
  requiredFunctions.forEach(func => {
    if (handlersContent.includes(func)) {
      console.log(`  ‚úÖ ${func} - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞`);
    } else {
      console.log(`  ‚ùå ${func} - –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞`);
    }
  });

  console.log();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  const requiredStates = [
    'waiting_confirm_delete_all_workouts',
    'waiting_confirm_delete_all_weights',
    'waiting_confirm_delete_all_goals', 
    'waiting_confirm_delete_all_data'
  ];

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è:');
  requiredStates.forEach(state => {
    if (handlersContent.includes(state)) {
      console.log(`  ‚úÖ ${state} - –Ω–∞–π–¥–µ–Ω–æ`);
    } else {
      console.log(`  ‚ùå ${state} - –ù–ï –Ω–∞–π–¥–µ–Ω–æ`);
    }
  });

  console.log();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const confirmCommands = [
    '–£–î–ê–õ–ò–¢–¨ –í–°–ï –¢–†–ï–ù–ò–†–û–í–ö–ò',
    '–£–î–ê–õ–ò–¢–¨ –í–°–ï –í–ï–°–ê',
    '–£–î–ê–õ–ò–¢–¨ –í–°–ï –¶–ï–õ–ò',
    '–£–î–ê–õ–ò–¢–¨ –í–°–ï –î–ê–ù–ù–´–ï'
  ];

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:');
  confirmCommands.forEach(cmd => {
    if (handlersContent.includes(cmd)) {
      console.log(`  ‚úÖ "${cmd}" - –Ω–∞–π–¥–µ–Ω–∞`);
    } else {
      console.log(`  ‚ùå "${cmd}" - –ù–ï –Ω–∞–π–¥–µ–Ω–∞`);
    }
  });

  console.log();

  // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const allChecksPassed = 
    missingHandlers.length === 0 &&
    requiredFunctions.every(func => databaseContent.includes(`export async function ${func}`)) &&
    requiredFunctions.every(func => handlersContent.includes(func)) &&
    requiredStates.every(state => handlersContent.includes(state)) &&
    confirmCommands.every(cmd => handlersContent.includes(cmd));

  if (allChecksPassed) {
    console.log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
}

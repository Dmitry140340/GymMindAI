import { 
  createOrUpdateUser, 
  getUserByTelegramId, 
  getActiveSubscription,
  checkExpiredSubscriptions,
  getUserAccessToken,
  updateUserAgreement,
  // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  addFitnessMetric,
  addWorkout,
  addAchievement,
  getUserMetrics,
  getUserWorkouts,
  getUserAchievements
} from '../services/database.js';
import { sendMessageToCoze, getCozeInstructions, resetUserConversation } from '../services/coze.js';
import { createSubscriptionPayment } from '../services/payment.js';
import { 
  generateWeightChart, 
  generateWorkoutChart, 
  generateProgressChart, 
  generateTextReport 
} from '../services/analytics.js';
import { addSampleData } from '../services/sample-data.js';
import {
  mainKeyboard,
  subscriptionKeyboard,
  confirmPaymentKeyboard,
  paymentLinkKeyboard,
  manageSubscriptionKeyboard,
  noSubscriptionKeyboard,
  helpKeyboard,
  analyticsKeyboard,
  workoutKeyboard,
  userAgreementKeyboard
} from './keyboards.js';

// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

export function setupBotHandlers(bot) {
  // –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
  bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    const startParam = match ? match[1] : null;

    try {
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      await createOrUpdateUser(user);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const dbUser = await getUserByTelegramId(user.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä payment_success
      if (startParam === 'payment_success') {
        await bot.sendMessage(
          chatId,
          'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n\n' +
          '–ï—Å–ª–∏ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n' +
          'ü§ñ –ù–∞–∂–º–∏—Ç–µ "–î–æ—Å—Ç—É–ø –∫ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏—Ç–Ω–µ—Å–µ.',
          mainKeyboard
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
      if (!dbUser.agreement_accepted) {
        await bot.sendMessage(
          chatId,
          'üìÑ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitnessBotAI!**\n\n' +
          '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.\n\n' +
          'üìã –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ–ø–∏—Å–∞–Ω—ã:\n' +
          '‚Ä¢ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞\n' +
          '‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n' +
          '‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n' +
          '‚Ä¢ –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\n\n' +
          '‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.',
          userAgreementKeyboard
        );
        return;
      }
      
      const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitnessBotAI!

ü§ñ –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ò–ò-—Ç—Ä–µ–Ω–µ—Ä, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π!

‚ú® –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∏—Ç–Ω–µ—Å–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—Å

üíé –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await bot.sendMessage(chatId, welcomeMessage, mainKeyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    if (msg.text) {
      // –°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ Coze)
      const systemCommands = ['/start', '/menu', '/reset', '/—Å–±—Ä–æ—Å', '/help', '/admin_test_coze', '/admin_stats', '/admin_users'];
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!systemCommands.some(cmd => msg.text.startsWith(cmd))) {
        await handleTextMessage(bot, msg);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.on('callback_query', async (callbackQuery) => {
    await handleCallbackQuery(bot, callbackQuery);
  });

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  setInterval(async () => {
    try {
      await checkExpiredSubscriptions();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    }
  }, 60 * 60 * 1000); // –∫–∞–∂–¥—ã–π —á–∞—Å
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–∏—Ç–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤
function isFitnessQuestion(text) {
  const fitnessKeywords = [
    '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫', '—É–ø—Ä–∞–∂–Ω–µ–Ω', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∑–∞–Ω—è—Ç', '—Å–ø–æ—Ä—Ç',
    '–ø–∏—Ç–∞–Ω–∏–µ', '–¥–∏–µ—Ç–∞', '–∫–∞–ª–æ—Ä–∏', '–±–µ–ª–æ–∫', '—É–≥–ª–µ–≤–æ–¥', '–∂–∏—Ä',
    '–ø–æ—Ö—É–¥–µ—Ç—å', '–ø–æ—Ö—É–¥–µ–Ω–∏', '–≤–µ—Å', '–∫–∏–ª–æ–≥—Ä–∞–º–º', '—Å–±—Ä–æ—Å–∏—Ç—å',
    '–º—ã—à—Ü', '–º–∞—Å—Å–∞', '–Ω–∞–∫–∞—á–∞—Ç—å', '–Ω–∞–±—Ä–∞—Ç—å', '—Ä–µ–ª—å–µ—Ñ',
    '—Ñ–∏—Ç–Ω–µ—Å', '–∑–∞–ª', '–¥–æ–º–∞', '–∫–∞—Ä–¥–∏–æ', '—Å–∏–ª–æ–≤',
    '–ø—Ä–µ—Å—Å', '–Ω–æ–≥', '—Ä—É–∫', '—Å–ø–∏–Ω', '–≥—Ä—É–¥—å', '–ø–ª–µ—á',
    '–æ—Ç–∂–∏–º–∞–Ω–∏', '–ø—Ä–∏—Å–µ–¥–∞–Ω–∏', '–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏', '–ø–ª–∞–Ω–∫–∞',
    '–±–µ–≥', '—Ö–æ–¥—å–±–∞', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–ø–ª–∞–≤–∞–Ω–∏',
    '–∑–¥–æ—Ä–æ–≤—å–µ', '—ç–Ω–µ—Ä–≥–∏—è', '–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', '—Å–∏–ª–∞'
  ];
  
  const lowerText = text.toLowerCase();
  return fitnessKeywords.some(keyword => lowerText.includes(keyword));
}

async function handleTextMessage(bot, msg) {
  const chatId = msg.chat.id;
  const text = msg.text;
  const user = msg.from;

  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, text);

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await createOrUpdateUser(user);
    const dbUser = await getUserByTelegramId(user.id);

    if (text === 'ü§ñ –î–æ—Å—Ç—É–ø –∫ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const subscription = await getActiveSubscription(dbUser.id);
      
      if (!subscription) {
        await bot.sendMessage(
          chatId,
          'üíé –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!',
          noSubscriptionKeyboard
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const accessToken = await getUserAccessToken(dbUser.id);
      if (!accessToken) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        return;
      }

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò
      userStates.set(user.id, 'chatting_with_ai');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ò–ò
      const instructions = await getCozeInstructions(accessToken);
      await bot.sendMessage(chatId, instructions.message, { parse_mode: 'Markdown' });
      return;
    }

    if (text === 'üíé –ü–æ–¥–ø–∏—Å–∫–∞') {
      await showSubscriptionMenu(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å') {
      await showUserProfile(bot, chatId, dbUser);
      return;
    }

    if (text === '‚ùì –ü–æ–º–æ—â—å') {
      await bot.sendMessage(
        chatId,
        '‚ùì –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:',
        helpKeyboard
      );
      return;
    }

    if (text === 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞') {
      await bot.sendMessage(
        chatId,
        'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:',
        analyticsKeyboard
      );
      return;
    }

    if (text === 'üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É') {
      await bot.sendMessage(
        chatId,
        'üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
        workoutKeyboard
      );
      return;
    }

    if (text === 'üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥') {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates.delete(user.id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const accessToken = await getUserAccessToken(dbUser.id);
      if (accessToken) {
        await resetUserConversation(accessToken, dbUser.id);
      }
      
      await bot.sendMessage(
        chatId,
        'üîÑ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –ò–ò-—Ç—Ä–µ–Ω–µ—Ä –Ω–µ –ø–æ–º–Ω–∏—Ç –≤–∞—à—É –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.',
        mainKeyboard
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if (text === 'üìà –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞') {
      await handleWeightChart(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'üèãÔ∏è‚Äç‚ôÇÔ∏è –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫') {
      await handleWorkoutChart(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'üìä –û–±—â–∏–π –æ—Ç—á–µ—Ç') {
      await handleProgressReport(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è') {
      await handleAchievements(bot, chatId, dbUser.id);
      return;
    }

    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      userStates.delete(user.id); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await bot.sendMessage(
        chatId,
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        mainKeyboard
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if (['üí™ –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ', 'üßò‚Äç‚ôÄÔ∏è –ô–æ–≥–∞/–†–∞—Å—Ç—è–∂–∫–∞', 'üèãÔ∏è‚Äç‚ôÄÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è'].includes(text)) {
      await handleWorkoutType(bot, chatId, dbUser.id, text);
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å –ò–ò
    if (userStates.get(user.id) === 'chatting_with_ai') {
      const subscription = await getActiveSubscription(dbUser.id);
      
      if (!subscription) {
        userStates.delete(user.id);
        await bot.sendMessage(
          chatId,
          '‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò.',
          noSubscriptionKeyboard
        );
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Coze
      await bot.sendChatAction(chatId, 'typing');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
      const thinkingMessage = await bot.sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...');
      
      const aiResponse = await sendMessageToCoze(text, user.id);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞–µ—Ç"
      try {
        await bot.deleteMessage(chatId, thinkingMessage.message_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
      
      if (aiResponse.success) {
        await bot.sendMessage(chatId, aiResponse.message);
      } else {
        await bot.sendMessage(chatId, aiResponse.message);
      }
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (text === '/menu') {
      userStates.delete(user.id);
      await bot.sendMessage(
        chatId,
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        mainKeyboard
      );
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò
    if (text === '/reset' || text === '/—Å–±—Ä–æ—Å') {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates.delete(user.id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const accessToken = await getUserAccessToken(dbUser.id);
      if (accessToken) {
        await resetUserConversation(accessToken, dbUser.id);
      }
      
      await bot.sendMessage(
        chatId,
        'üîÑ –î–∏–∞–ª–æ–≥ —Å –ò–ò —Å–±—Ä–æ—à–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n\nüí° –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω—ã.',
        mainKeyboard
      );
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (text === '/sample_data' || text === '/—Ç–µ—Å—Ç–æ–≤—ã–µ_–¥–∞–Ω–Ω—ã–µ') {
      await bot.sendMessage(chatId, '‚è≥ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      const success = await addSampleData(dbUser.id);
      
      if (success) {
        await bot.sendMessage(
          chatId,
          '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\nüìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞".\n\nüí° –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç:\n‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ –∑–∞ 30 –¥–Ω–µ–π\n‚Ä¢ 7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤\n‚Ä¢ 3 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
          mainKeyboard
        );
      } else {
        await bot.sendMessage(
          chatId,
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
          mainKeyboard
        );
      }
      return;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    const subscription = await getActiveSubscription(dbUser.id);
    console.log(`User ${user.id} subscription status:`, subscription ? 'active' : 'none');
    
    if (subscription && isFitnessQuestion(text)) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò
      userStates.set(user.id, 'chatting_with_ai');
      
      await bot.sendChatAction(chatId, 'typing');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
      const thinkingMessage = await bot.sendMessage(chatId, 'ü§ñ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...');
      
      const aiResponse = await sendMessageToCoze(text, user.id);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞–µ—Ç"
      try {
        await bot.deleteMessage(chatId, thinkingMessage.message_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
      
      if (aiResponse.success) {
        await bot.sendMessage(chatId, aiResponse.message + '\n\nüè† –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: /menu');
      } else {
        await bot.sendMessage(chatId, aiResponse.message);
      }
      return;
    }

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–æ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ —Ñ–∏—Ç–Ω–µ—Å
    if (subscription) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ Coze (–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /)
      if (text.startsWith('/')) {
        console.log(`üîß –ö–æ–º–∞–Ω–¥–∞ Coze –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, text);
      } else {
        console.log(`User ${user.id} has subscription, but message not recognized as fitness question:`, text);
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      userStates.set(user.id, 'chatting_with_ai');
      
      await bot.sendChatAction(chatId, 'typing');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
      const thinkingMessage = await bot.sendMessage(chatId, text.startsWith('/') ? '‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...' : 'üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
      
      const aiResponse = await sendMessageToCoze(text, user.id);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞–µ—Ç"
      try {
        await bot.deleteMessage(chatId, thinkingMessage.message_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
      
      if (aiResponse.success) {
        await bot.sendMessage(chatId, aiResponse.message + '\n\nüè† –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: /menu');
      } else {
        await bot.sendMessage(chatId, aiResponse.message);
      }
      return;
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    console.log(`User ${user.id} has no subscription, showing menu`);
    await bot.sendMessage(
      chatId,
      '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /menu.',
      mainKeyboard
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}

async function handleCallbackQuery(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const user = callbackQuery.from;

  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    const dbUser = await getUserByTelegramId(user.id);

    switch (data) {
      case 'accept_agreement':
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await updateUserAgreement(user.id, true);
        
        // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await bot.editMessageText(
          '‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π!**\n\n' +
          'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitnessBotAI!\n\n' +
          'ü§ñ –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ò–ò-—Ç—Ä–µ–Ω–µ—Ä, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π!\n\n' +
          '‚ú® –ß—Ç–æ —è —É–º–µ—é:\n' +
          '‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n' +
          '‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n' +
          '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n' +
          '‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n' +
          'üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!\n\n' +
          'üöÄ –ù–∞—á–Ω–µ–º –≤–∞—à –ø—É—Ç—å –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ?',
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          }
        );
        
        // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.sendMessage(
          chatId,
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
          mainKeyboard
        );
        break;

      case 'decline_agreement':
        await bot.editMessageText(
          '‚ùå **–£—Å–ª–æ–≤–∏—è –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã**\n\n' +
          '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É.\n\n' +
          '–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏.',
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          }
        );
        break;

      case 'show_subscription_plans':
        await bot.editMessageText(
          'üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:\n\nüìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 999‚ÇΩ\n‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n\nüìÖ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 9990‚ÇΩ\n‚Ä¢ –í—Å—ë –∏–∑ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n‚Ä¢ –°–∫–∏–¥–∫–∞ 17%\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
          {
            chat_id: chatId,
            message_id: messageId,
            ...subscriptionKeyboard
          }
        );
        break;

      case 'buy_monthly':
        await showPaymentConfirmation(bot, chatId, messageId, 'monthly');
        break;

      case 'buy_yearly':
        await showPaymentConfirmation(bot, chatId, messageId, 'yearly');
        break;

      case 'confirm_payment_monthly':
        await processPayment(bot, chatId, messageId, user.id, 'monthly');
        break;

      case 'confirm_payment_yearly':
        await processPayment(bot, chatId, messageId, user.id, 'yearly');
        break;

      case 'subscription_status':
        await showSubscriptionStatus(bot, chatId, messageId, dbUser.id);
        break;

      case 'extend_subscription':
        await bot.editMessageText(
          'üíé –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω:',
          {
            chat_id: chatId,
            message_id: messageId,
            ...subscriptionKeyboard
          }
        );
        break;

      case 'cancel_payment':
        await bot.editMessageText(
          '‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.',
          {
            chat_id: chatId,
            message_id: messageId,
            ...noSubscriptionKeyboard
          }
        );
        break;

      case 'back_to_main':
        await bot.deleteMessage(chatId, messageId);
        await bot.sendMessage(chatId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainKeyboard);
        break;

      case 'help_ai':
        await bot.editMessageText(
          'ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–æ–º:\n\n1. –ù–∞–∂–º–∏—Ç–µ "–ß–∞—Ç —Å –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–æ–º"\n2. –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏—Ç–Ω–µ—Å–µ\n3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç\n\nüí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n‚Ä¢ "–°–æ—Å—Ç–∞–≤—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞"\n‚Ä¢ "–ß—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π?"\n‚Ä¢ "–ö–∞–∫ –Ω–∞–∫–∞—á–∞—Ç—å –ø—Ä–µ—Å—Å –¥–æ–º–∞?"',
          {
            chat_id: chatId,
            message_id: messageId,
            ...helpKeyboard
          }
        );
        break;

      case 'help_payment':
        await bot.editMessageText(
          'üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n\n‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É (–±–µ–∑–æ–ø–∞—Å–Ω–æ)\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n‚Ä¢ –í–æ–∑–º–æ–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π\n\nüìû –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          {
            chat_id: chatId,
            message_id: messageId,
            ...helpKeyboard
          }
        );
        break;

      case 'help_support':
        await bot.editMessageText(
          'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\nüìß Email: support@fitnessbot.ai\nüì± Telegram: @fitness_support\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-21:00 –ú–°–ö\n\nüïê –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2-4 —á–∞—Å–æ–≤.',
          {
            chat_id: chatId,
            message_id: messageId,
            ...helpKeyboard
          }
        );
        break;

      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:', data);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
      show_alert: true
    });
  }
}

async function showSubscriptionMenu(bot, chatId, userId) {
  const subscription = await getActiveSubscription(userId);
  
  if (subscription) {
    const endDate = new Date(subscription.end_date);
    const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
    
    const message = `üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n\nüìÖ –ü–ª–∞–Ω: ${subscription.plan_type === 'monthly' ? '–ú–µ—Å—è—á–Ω–∞—è' : '–ì–æ–¥–æ–≤–∞—è'}\n‚è∞ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${daysLeft} –¥–Ω–µ–π\nüìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞`;
    
    await bot.sendMessage(chatId, message, manageSubscriptionKeyboard);
  } else {
    await bot.sendMessage(
      chatId,
      'üíé –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫:\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É\n‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n‚Ä¢ –°–æ–≤–µ—Ç–∞–º –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ',
      noSubscriptionKeyboard
    );
  }
}

async function showUserProfile(bot, chatId, user) {
  const subscription = await getActiveSubscription(user.id);
  
  let message = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n`;
  message += `üìõ –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
  message += `üÜî ID: ${user.telegram_id}\n`;
  message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString('ru-RU')}\n\n`;
  
  if (subscription) {
    const endDate = new Date(subscription.end_date);
    const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
    message += `üíé –ü–æ–¥–ø–∏—Å–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞\n`;
    message += `üìä –ü–ª–∞–Ω: ${subscription.plan_type === 'monthly' ? '–ú–µ—Å—è—á–Ω–∞—è' : '–ì–æ–¥–æ–≤–∞—è'}\n`;
    message += `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}`;
  } else {
    message += `üíé –ü–æ–¥–ø–∏—Å–∫–∞: –ù–µ –∞–∫—Ç–∏–≤–Ω–∞`;
  }

  await bot.sendMessage(chatId, message, mainKeyboard);
}

async function showPaymentConfirmation(bot, chatId, messageId, planType) {
  const price = planType === 'monthly' ? '999‚ÇΩ' : '9990‚ÇΩ';
  const period = planType === 'monthly' ? '1 –º–µ—Å—è—Ü' : '1 –≥–æ–¥';
  const savings = planType === 'yearly' ? '\nüí∞ –≠–∫–æ–Ω–æ–º–∏—è: 1998‚ÇΩ (17%)' : '';
  
  const message = `üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\nüì¶ –ü–æ–¥–ø–∏—Å–∫–∞: ${period}\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: ${price}${savings}\n\n‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`;
  
  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: messageId,
    ...confirmPaymentKeyboard(planType)
  });
}

async function processPayment(bot, chatId, messageId, telegramId, planType) {
  try {
    await bot.editMessageText('‚è≥ –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã...', {
      chat_id: chatId,
      message_id: messageId
    });

    const paymentResult = await createSubscriptionPayment(telegramId, planType);
    
    if (paymentResult.success) {
      const price = planType === 'monthly' ? '999‚ÇΩ' : '9990‚ÇΩ';
      const period = planType === 'monthly' ? '1 –º–µ—Å—è—Ü' : '1 –≥–æ–¥';
      
      await bot.editMessageText(
        `üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n\nüì¶ –ü–ª–∞–Ω: ${period}\nüí∞ –°—É–º–º–∞: ${price}\n\nüîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Æ–ö–∞—Å—Å–∞.\n\nüëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:`,
        {
          chat_id: chatId,
          message_id: messageId,
          ...paymentLinkKeyboard(paymentResult.paymentUrl)
        }
      );
    } else {
      await bot.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${paymentResult.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
        {
          chat_id: chatId,
          message_id: messageId,
          ...subscriptionKeyboard
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
    await bot.editMessageText(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
      {
        chat_id: chatId,
        message_id: messageId,
        ...subscriptionKeyboard
      }
    );
  }
}

async function showSubscriptionStatus(bot, chatId, messageId, userId) {
  const subscription = await getActiveSubscription(userId);
  
  if (subscription) {
    const startDate = new Date(subscription.start_date);
    const endDate = new Date(subscription.end_date);
    const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
    
    const message = `üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\nüìÖ –ü–ª–∞–Ω: ${subscription.plan_type === 'monthly' ? '–ú–µ—Å—è—á–Ω–∞—è' : '–ì–æ–¥–æ–≤–∞—è'}\nüóì –ù–∞—á–∞–ª–æ: ${startDate.toLocaleDateString('ru-RU')}\nüìÜ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${endDate.toLocaleDateString('ru-RU')}\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\nüí∞ –°—É–º–º–∞: ${subscription.amount}‚ÇΩ`;
    
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      ...manageSubscriptionKeyboard
    });
  } else {
    await bot.editMessageText(
      '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏',
      {
        chat_id: chatId,
        message_id: messageId,
        ...noSubscriptionKeyboard
      }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async function handleWeightChart(bot, chatId, userId) {
  try {
    await bot.sendMessage(chatId, '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞...');
    
    console.log(`–ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –≤–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    const metrics = await getUserMetrics(userId, 'weight');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–∏–∫ –≤–µ—Å–∞: ${metrics.length}`);
    
    if (metrics.length === 0) {
      await bot.sendMessage(
        chatId,
        'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ.\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.',
        analyticsKeyboard
      );
      return;
    }

    console.log(`–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫:`, metrics.slice(0, 2));
    const chartPath = await generateWeightChart(metrics, userId);
    console.log(`–ü—É—Ç—å –∫ –≥—Ä–∞—Ñ–∏–∫—É: ${chartPath}`);
    
    if (!chartPath) {
      await bot.sendMessage(
        chatId,
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        analyticsKeyboard
      );
      return;
    }

    await bot.sendPhoto(chatId, chartPath, {
      caption: 'üìà –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞\n\n–î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.',
      ...analyticsKeyboard
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–µ—Å–∞:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      analyticsKeyboard
    );
  }
}

async function handleWorkoutChart(bot, chatId, userId) {
  try {
    await bot.sendMessage(chatId, '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
    
    const workouts = await getUserWorkouts(userId);
    
    if (workouts.length === 0) {
      await bot.sendMessage(
        chatId,
        'üèãÔ∏è‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.',
        analyticsKeyboard
      );
      return;
    }

    const chartPath = await generateWorkoutChart(workouts, userId);
    
    await bot.sendPhoto(chatId, chartPath, {
      caption: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ —Ç–∏–ø–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥.',
      ...analyticsKeyboard
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      analyticsKeyboard
    );
  }
}

async function handleProgressReport(bot, chatId, userId) {
  try {
    await bot.sendMessage(chatId, '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ...');
    
    const metrics = await getUserMetrics(userId);
    const workouts = await getUserWorkouts(userId);
    
    if (metrics.length === 0 && workouts.length === 0) {
      await bot.sendMessage(
        chatId,
        'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.\n\n–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.',
        analyticsKeyboard
      );
      return;
    }

    const chartPath = await generateProgressChart(metrics, workouts, userId);
    const textReport = await generateTextReport(userId);
    
    await bot.sendPhoto(chatId, chartPath, {
      caption: `üìä –û–±—â–∏–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ\n\n${textReport}`,
      ...analyticsKeyboard
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      analyticsKeyboard
    );
  }
}

async function handleAchievements(bot, chatId, userId) {
  try {
    const achievements = await getUserAchievements(userId);
    
    if (achievements.length === 0) {
      await bot.sendMessage(
        chatId,
        'üèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Å–µ–±—è –∂–¥–∞—Ç—å!',
        analyticsKeyboard
      );
      return;
    }

    let message = 'üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n';
    achievements.forEach((achievement, index) => {
      const date = new Date(achievement.earned_date).toLocaleDateString('ru-RU');
      message += `${index + 1}. ${achievement.title}\n`;
      message += `   üìù ${achievement.description}\n`;
      message += `   üìÖ –ü–æ–ª—É—á–µ–Ω–æ: ${date}\n\n`;
    });

    await bot.sendMessage(chatId, message, analyticsKeyboard);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      analyticsKeyboard
    );
  }
}

async function handleWorkoutType(bot, chatId, userId, workoutType) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  const workoutTypeMap = {
    'üí™ –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'strength',
    'üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ': 'cardio',
    'üßò‚Äç‚ôÄÔ∏è –ô–æ–≥–∞/–†–∞—Å—Ç—è–∂–∫–∞': 'yoga',
    'üèãÔ∏è‚Äç‚ôÄÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è': 'functional'
  };

  const type = workoutTypeMap[workoutType];
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const duration = 60; // 60 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const calories = type === 'cardio' ? 400 : type === 'strength' ? 300 : 200;
    const intensity = 3; // —Å—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    const exercisesCount = type === 'strength' ? 8 : type === 'functional' ? 6 : 4;
    
    await addWorkout(userId, type, duration, calories, intensity, exercisesCount, `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${workoutType}`);

    await bot.sendMessage(
      chatId,
      `‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ "${workoutType}" –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n` +
      `üìä –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n` +
      `‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω—É—Ç\n` +
      `üî• –ö–∞–ª–æ—Ä–∏–∏: ${calories} –∫–∫–∞–ª\n` +
      `üìà –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${intensity}/5\n` +
      `üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${exercisesCount}\n\n` +
      `üí° –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É.`,
      workoutKeyboard
    );
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      workoutKeyboard
    );
  }
}

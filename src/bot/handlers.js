import { 
  createOrUpdateUser, 
  getUserByTelegramId, 
  getActiveSubscription,
  checkExpiredSubscriptions,
  getUserAccessToken,
  updateUserAgreement,
  // РРјРїРѕСЂС‚ С„СѓРЅРєС†РёР№ РґР»СЏ Р°РЅР°Р»РёС‚РёРєРё
  addFitnessMetric,
  addWorkout,
  addAchievement,
  getUserMetrics,
  getUserWorkouts,
  getUserAchievements,
  // РРјРїРѕСЂС‚ С„СѓРЅРєС†РёР№ РґР»СЏ Р±РµСЃРїР»Р°С‚РЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ
  getUserFreeRequests,
  useFreeRequest,
  canUserMakeRequest,
  incrementRequestUsage,
  // РРјРїРѕСЂС‚ С„СѓРЅРєС†РёР№ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєРёРјРё РґР°РЅРЅС‹РјРё
  saveFitnessMetric,
  setUserGoal,
  getUserGoals,
  saveWorkout,
  getLastWeightRecord,
  updateLastWeightRecord,
  deleteLastWeightRecord,
  getLastWorkoutRecord,
  updateLastWorkoutRecord,
  deleteLastWorkoutRecord,
  deleteUserGoal,
  updateUserGoal,
  clearAllUserData,
  getUserDataSummary,
  // РРјРїРѕСЂС‚ С„СѓРЅРєС†РёР№ РґР»СЏ РґРµС‚Р°Р»СЊРЅС‹С… С‚СЂРµРЅРёСЂРѕРІРѕРє
  saveDetailedWorkout,
  getDetailedWorkout,
  getUserDetailedWorkouts,
  updateDetailedWorkout,
  getExerciseProgressStats,
  // РРјРїРѕСЂС‚ С„СѓРЅРєС†РёР№ РґР»СЏ СѓРґР°Р»РµРЅРёСЏ Р·Р°РїРёСЃРµР№
  deleteLastWorkout,
  deleteLastWeight,
  deleteAllWorkouts,
  deleteAllWeights,
  deleteAllGoals
} from '../services/database.js';
import { runWorkflow, getConversationId, clearConversation, continueInteractiveWorkflow } from '../services/coze.js';
import { runCozeChat } from '../services/coze_v3.js';
import { createSubscriptionPayment } from '../services/payment.js';
import { analyzeUserProgress, formatProgressReport } from '../services/progress-analyzer.js';
import { 
  generateWeightChart, 
  generateWorkoutChart, 
  generateProgressChart, 
  generateTextReport 
} from '../services/analytics.js';
import {
  mainKeyboard,
  subscriptionKeyboard,
  confirmPaymentKeyboard,
  paymentLinkKeyboard,
  manageSubscriptionKeyboard,
  noSubscriptionKeyboard,
  helpKeyboard,
  analyticsKeyboard,
  workoutKeyboard,
  userAgreementKeyboard,
  aiToolsKeyboard,
  userDataKeyboard,
  workoutTypesKeyboard,
  detailedWorkoutKeyboard,
  popularExercisesKeyboard,
  viewRecordsKeyboard,
  deleteRecordsKeyboard,
  goalTypesKeyboard,
  subscriptionPlansKeyboard,
  paymentConfirmKeyboard
} from './keyboards.js';

// РҐСЂР°РЅРёРј СЃРѕСЃС‚РѕСЏРЅРёСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№
const userStates = new Map();
// РҐСЂР°РЅРёРј РєРѕРЅС‚РµРєСЃС‚ РїРѕСЃР»РµРґРЅРµРіРѕ workflow РґР»СЏ РєР°Р¶РґРѕРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
const userWorkflowContext = new Map();
// РҐСЂР°РЅРёРј СЃРѕСЃС‚РѕСЏРЅРёРµ РёРЅС‚РµСЂР°РєС‚РёРІРЅС‹С… workflow
const userInteractiveWorkflow = new Map();
// РҐСЂР°РЅРёРј Р°РєС‚РёРІРЅС‹Рµ С‚СЂРµРЅРёСЂРѕРІРєРё РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№
const activeWorkouts = new Map();

export function setupBotHandlers(bot) {
  // РљРѕРјР°РЅРґР° /start СЃ РІРѕР·РјРѕР¶РЅС‹Рј РїР°СЂР°РјРµС‚СЂРѕРј
  bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    const startParam = match ? match[1] : null;

    try {
      // РЎРѕР·РґР°РµРј РёР»Рё РѕР±РЅРѕРІР»СЏРµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РІ Р‘Р”
      await createOrUpdateUser(user);
      
      // РџРѕР»СѓС‡Р°РµРј РёРЅС„РѕСЂРјР°С†РёСЋ Рѕ РїРѕР»СЊР·РѕРІР°С‚РµР»Рµ
      const dbUser = await getUserByTelegramId(user.id);
      
      // РџСЂРѕРІРµСЂСЏРµРј, РµСЃС‚СЊ Р»Рё РїР°СЂР°РјРµС‚СЂ payment_success
      if (startParam === 'payment_success') {
        await bot.sendMessage(
          chatId,
          'рџЋ‰ РЎРїР°СЃРёР±Рѕ Р·Р° РѕРїР»Р°С‚Сѓ!\n\n' +
          'Р•СЃР»Рё РІР°С€Р° РїРѕРґРїРёСЃРєР° СѓР¶Рµ Р°РєС‚РёРІРёСЂРѕРІР°РЅР°, РІС‹ РјРѕР¶РµС‚Рµ РЅР°С‡Р°С‚СЊ РѕР±С‰РµРЅРёРµ СЃ РР-С‚СЂРµРЅРµСЂРѕРј РїСЂСЏРјРѕ СЃРµР№С‡Р°СЃ!\n\n' +
          'рџ¤– РќР°Р¶РјРёС‚Рµ "Р”РѕСЃС‚СѓРї Рє РР-С‚СЂРµРЅРµСЂСѓ" РёР»Рё РїСЂРѕСЃС‚Рѕ Р·Р°РґР°Р№С‚Рµ Р»СЋР±РѕР№ РІРѕРїСЂРѕСЃ Рѕ С„РёС‚РЅРµСЃРµ.',
          mainKeyboard
        );
        return;
      }
      
      // РџСЂРѕРІРµСЂСЏРµРј, РїСЂРёРЅСЏР» Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ СЃРѕРіР»Р°С€РµРЅРёРµ
      if (!dbUser.agreement_accepted) {
        await bot.sendMessage(
          chatId,
          'рџ“„ **Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ РІ FitnessBotAI!**\n\n' +
          'РџРµСЂРµРґ РЅР°С‡Р°Р»РѕРј СЂР°Р±РѕС‚С‹ СЃ Р±РѕС‚РѕРј, РїРѕР¶Р°Р»СѓР№СЃС‚Р°, РѕР·РЅР°РєРѕРјСЊС‚РµСЃСЊ СЃ РЅР°С€РёРј РџРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєРёРј СЃРѕРіР»Р°С€РµРЅРёРµРј.\n\n' +
          'рџ“‹ Р’ РґРѕРєСѓРјРµРЅС‚Рµ РѕРїРёСЃР°РЅС‹:\n' +
          'вЂў РЈСЃР»РѕРІРёСЏ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёСЏ СЃРµСЂРІРёСЃР°\n' +
          'вЂў РџСЂР°РІРёР»Р° РѕР±СЂР°Р±РѕС‚РєРё РїРµСЂСЃРѕРЅР°Р»СЊРЅС‹С… РґР°РЅРЅС‹С…\n' +
          'вЂў РџРѕР»РёС‚РёРєР° РєРѕРЅС„РёРґРµРЅС†РёР°Р»СЊРЅРѕСЃС‚Рё\n' +
          'вЂў Р’Р°С€Рё РїСЂР°РІР° Рё РѕР±СЏР·Р°РЅРЅРѕСЃС‚Рё\n\n' +
          'вљ пёЏ Р”Р»СЏ РїСЂРѕРґРѕР»Р¶РµРЅРёСЏ СЂР°Р±РѕС‚С‹ СЃ Р±РѕС‚РѕРј РЅРµРѕР±С…РѕРґРёРјРѕ РїСЂРёРЅСЏС‚СЊ СѓСЃР»РѕРІРёСЏ СЃРѕРіР»Р°С€РµРЅРёСЏ.',
          userAgreementKeyboard
        );
        return;
      }
      
      const welcomeMessage = `рџЋ‰ Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ РІ FitnessBotAI!

рџ¤– РЇ РІР°С€ Р»РёС‡РЅС‹Р№ РР-С‚СЂРµРЅРµСЂ, РіРѕС‚РѕРІС‹Р№ РїРѕРјРѕС‡СЊ РІР°Рј РґРѕСЃС‚РёС‡СЊ РІР°С€РёС… С„РёС‚РЅРµСЃ-С†РµР»РµР№!

вњЁ Р§С‚Рѕ СЏ СѓРјРµСЋ:
вЂў РЎРѕСЃС‚Р°РІР»СЏС‚СЊ РїРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹ С‚СЂРµРЅРёСЂРѕРІРѕРє
вЂў Р”Р°РІР°С‚СЊ СЃРѕРІРµС‚С‹ РїРѕ РїРёС‚Р°РЅРёСЋ
вЂў РћС‚РІРµС‡Р°С‚СЊ РЅР° РІРѕРїСЂРѕСЃС‹ Рѕ С„РёС‚РЅРµСЃРµ Рё Р·РґРѕСЂРѕРІСЊРµ
вЂў РњРѕС‚РёРІРёСЂРѕРІР°С‚СЊ Рё РїРѕРґРґРµСЂР¶РёРІР°С‚СЊ РІР°СЃ

рџ’Ћ Р”Р»СЏ РїРѕР»РЅРѕРіРѕ РґРѕСЃС‚СѓРїР° РєРѕ РІСЃРµРј С„СѓРЅРєС†РёСЏРј РЅСѓР¶РЅР° РїРѕРґРїРёСЃРєР°.

Р’С‹Р±РµСЂРёС‚Рµ РґРµР№СЃС‚РІРёРµ:`;

      await bot.sendMessage(chatId, welcomeMessage, mainKeyboard);
    } catch (error) {
      console.error('РћС€РёР±РєР° РІ РєРѕРјР°РЅРґРµ /start:', error);
      await bot.sendMessage(chatId, 'РџСЂРѕРёР·РѕС€Р»Р° РѕС€РёР±РєР°. РџРѕРїСЂРѕР±СѓР№С‚Рµ РµС‰С‘ СЂР°Р·.');
    }
  });

  // РћР±СЂР°Р±РѕС‚РєР° С‚РµРєСЃС‚РѕРІС‹С… СЃРѕРѕР±С‰РµРЅРёР№
  bot.on('message', async (msg) => {
    if (msg.text) {
      // РЎРїРёСЃРѕРє СЃРёСЃС‚РµРјРЅС‹С… РєРѕРјР°РЅРґ Р±РѕС‚Р° (РЅРµ РїРµСЂРµРґР°РµРј РІ Coze)
      const systemCommands = ['/start', '/menu', '/reset', '/СЃР±СЂРѕСЃ', '/help', '/admin_test_coze', '/admin_stats', '/admin_users'];
      
      // Р•СЃР»Рё СЌС‚Рѕ РЅРµ СЃРёСЃС‚РµРјРЅР°СЏ РєРѕРјР°РЅРґР° - РѕР±СЂР°Р±Р°С‚С‹РІР°РµРј РєР°Рє РѕР±С‹С‡РЅРѕРµ СЃРѕРѕР±С‰РµРЅРёРµ
      if (!systemCommands.some(cmd => msg.text.startsWith(cmd))) {
        await handleTextMessage(bot, msg);
      }
    }
  });

  // РћР±СЂР°Р±РѕС‚РєР° callback Р·Р°РїСЂРѕСЃРѕРІ
  bot.on('callback_query', async (callbackQuery) => {
    await handleCallbackQuery(bot, callbackQuery);
  });

  // РџРµСЂРёРѕРґРёС‡РµСЃРєР°СЏ РїСЂРѕРІРµСЂРєР° РёСЃС‚С‘РєС€РёС… РїРѕРґРїРёСЃРѕРє
  setInterval(async () => {
    try {
      await checkExpiredSubscriptions();
    } catch (error) {
      console.error('РћС€РёР±РєР° РїСЂРѕРІРµСЂРєРё РїРѕРґРїРёСЃРѕРє:', error);
    }
  }, 60 * 60 * 1000); // РєР°Р¶РґС‹Р№ С‡Р°СЃ
}

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ СЂР°СЃРїРѕР·РЅР°РІР°РЅРёСЏ С„РёС‚РЅРµСЃ-РІРѕРїСЂРѕСЃРѕРІ
function isFitnessQuestion(text) {
  // РСЃРєР»СЋС‡Р°РµРј Р’РЎР• РєРЅРѕРїРєРё РёРЅС‚РµСЂС„РµР№СЃР° - С‚РѕР»СЊРєРѕ С‡РёСЃС‚С‹Р№ С‚РµРєСЃС‚ РјРѕР¶РµС‚ Р±С‹С‚СЊ С„РёС‚РЅРµСЃ-РІРѕРїСЂРѕСЃРѕРј
  const interfaceButtons = [
    // РћСЃРЅРѕРІРЅС‹Рµ РєРЅРѕРїРєРё
    'рџ¤– РР-С‚СЂРµРЅРµСЂ', 'рџ§¬ РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹', 'рџ’Ћ РџРѕРґРїРёСЃРєР°', 'пїЅ РњРѕР№ РїСЂРѕС„РёР»СЊ',
    'рџ“€ РђРЅР°Р»РёС‚РёРєР°', 'рџЋЇ РњРѕРё РґР°РЅРЅС‹Рµ', 'рџ”„ РќРѕРІС‹Р№ РґРёР°Р»РѕРі', 'вќ“ РџРѕРјРѕС‰СЊ',
    
    // РљРЅРѕРїРєРё Р°РЅР°Р»РёС‚РёРєРё
    'рџ“€ Р“СЂР°С„РёРє РІРµСЃР°', 'рџЏ‹пёЏвЂЌв™‚пёЏ Р“СЂР°С„РёРє С‚СЂРµРЅРёСЂРѕРІРѕРє', 'рџ“Љ РћР±С‰РёР№ РѕС‚С‡РµС‚', 'рџЏ† Р”РѕСЃС‚РёР¶РµРЅРёСЏ',
    
    // РљРЅРѕРїРєРё С‚СЂРµРЅРёСЂРѕРІРѕРє
    'рџ’Є РЎРёР»РѕРІР°СЏ С‚СЂРµРЅРёСЂРѕРІРєР°', 'рџЏѓвЂЌв™‚пёЏ РљР°СЂРґРёРѕ', 'рџ§вЂЌв™ЂпёЏ Р™РѕРіР°/Р Р°СЃС‚СЏР¶РєР°', 'рџҐЉ Р•РґРёРЅРѕР±РѕСЂСЃС‚РІР°',
    'рџ”Ґ Р”РµС‚Р°Р»СЊРЅР°СЏ Р·Р°РїРёСЃСЊ', 'вљЎ Р‘С‹СЃС‚СЂР°СЏ Р·Р°РїРёСЃСЊ',
    
    // РљРЅРѕРїРєРё СѓРїСЂР°РІР»РµРЅРёСЏ РґР°РЅРЅС‹РјРё
    'вљ–пёЏ Р—Р°РїРёСЃР°С‚СЊ РІРµСЃ', 'рџЋЇ РЈСЃС‚Р°РЅРѕРІРёС‚СЊ С†РµР»СЊ', 'рџЏ‹пёЏвЂЌв™‚пёЏ Р”РѕР±Р°РІРёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєСѓ', 'рџ“Љ РњРѕРё Р·Р°РїРёСЃРё',
    'рџЏ‹пёЏвЂЌв™‚пёЏ РСЃС‚РѕСЂРёСЏ С‚СЂРµРЅРёСЂРѕРІРѕРє', 'вљ–пёЏ РСЃС‚РѕСЂРёСЏ РІРµСЃР°', 'рџЋЇ РњРѕРё С†РµР»Рё', 'рџ“€ РџСЂРѕРіСЂРµСЃСЃ',
    
    // РљРЅРѕРїРєРё С†РµР»РµР№
    'рџЏ‹пёЏвЂЌв™‚пёЏ РќР°Р±СЂР°С‚СЊ РјС‹С€РµС‡РЅСѓСЋ РјР°СЃСЃСѓ', 'вљ–пёЏ РЎРЅРёР·РёС‚СЊ РІРµСЃ', 'рџ’Є РЈРІРµР»РёС‡РёС‚СЊ СЃРёР»Сѓ', 
    'рџЏѓвЂЌв™‚пёЏ РЈР»СѓС‡С€РёС‚СЊ РІС‹РЅРѕСЃР»РёРІРѕСЃС‚СЊ', 'рџ¤ёвЂЌв™‚пёЏ РџРѕРІС‹СЃРёС‚СЊ РіРёР±РєРѕСЃС‚СЊ', 'вљЎ РћР±С‰Р°СЏ С„РёР·РїРѕРґРіРѕС‚РѕРІРєР°',
    
    // РљРЅРѕРїРєРё РїРѕРґРїРёСЃРєРё
    'рџ’і РћРїР»Р°С‚РёС‚СЊ РїРѕРґРїРёСЃРєСѓ', 'рџ“‹ РЎС‚Р°С‚СѓСЃ РїРѕРґРїРёСЃРєРё', 'рџ’і РџСЂРѕРґР»РёС‚СЊ РїРѕРґРїРёСЃРєСѓ', 
    'рџ“Љ РСЃС‚РѕСЂРёСЏ РїР»Р°С‚РµР¶РµР№', 'рџ’і РћС„РѕСЂРјРёС‚СЊ РїРѕРґРїРёСЃРєСѓ', 'рџ“‹ РџСЂРµРёРјСѓС‰РµСЃС‚РІР° РїРѕРґРїРёСЃРєРё',
    
    // РљРЅРѕРїРєРё РїРѕРјРѕС‰Рё
    'рџ’¬ РљР°Рє РїРѕР»СЊР·РѕРІР°С‚СЊСЃСЏ Р±РѕС‚РѕРј?', 'вљЎ Р§С‚Рѕ СѓРјРµРµС‚ РР-С‚СЂРµРЅРµСЂ?',
    
    // РљРЅРѕРїРєРё СѓРґР°Р»РµРЅРёСЏ
    'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ Р·Р°РїРёСЃРё', 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєРё', 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РІРµСЃР°', 
    'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ С†РµР»Рё', 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РІСЃС‘',
    
    // РљРЅРѕРїРєРё РґРµС‚Р°Р»СЊРЅС‹С… С‚СЂРµРЅРёСЂРѕРІРѕРє
    'вћ• Р”РѕР±Р°РІРёС‚СЊ СѓРїСЂР°Р¶РЅРµРЅРёРµ', 'вњ… Р—Р°РІРµСЂС€РёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєСѓ', 'рџЏ‹пёЏвЂЌв™‚пёЏ Р–РёРј Р»РµР¶Р°', 
    'рџЏ‹пёЏвЂЌв™‚пёЏ РџСЂРёСЃРµРґР°РЅРёСЏ', 'рџЏ‹пёЏвЂЌв™‚пёЏ РЎС‚Р°РЅРѕРІР°СЏ С‚СЏРіР°', 'рџЏ‹пёЏвЂЌв™‚пёЏ РџРѕРґС‚СЏРіРёРІР°РЅРёСЏ', 'рџ“ќ Р”СЂСѓРіРѕРµ СѓРїСЂР°Р¶РЅРµРЅРёРµ',
    
    // РЎРёСЃС‚РµРјРЅС‹Рµ РєРЅРѕРїРєРё
    'вќЊ РћС‚РјРµРЅР°', 'в¬…пёЏ РќР°Р·Р°Рґ РІ РјРµРЅСЋ', 'в¬…пёЏ РќР°Р·Р°Рґ', 'вњ… Р”Р°', 'вќЊ РќРµС‚', 'вЏ© РџСЂРѕРїСѓСЃС‚РёС‚СЊ',
    
    // РљРЅРѕРїРєРё workflow (РѕРЅРё РѕР±СЂР°Р±Р°С‚С‹РІР°СЋС‚СЃСЏ РѕС‚РґРµР»СЊРЅРѕ)
    'рџЏ‹пёЏвЂЌв™‚пёЏ /training_program', 'рџҐ— /nutrition_plan', 'рџ”¬ /deepresearch', 'рџ§Є /composition_analysis'
  ];
  
  // Р•СЃР»Рё СЌС‚Рѕ РєРЅРѕРїРєР° РёРЅС‚РµСЂС„РµР№СЃР°, С‚Рѕ СЌС‚Рѕ РќР• С„РёС‚РЅРµСЃ-РІРѕРїСЂРѕСЃ РґР»СЏ РР
  if (interfaceButtons.includes(text)) {
    return false;
  }

  const fitnessKeywords = [
    'С‚СЂРµРЅРёСЂРѕРІРє', 'СѓРїСЂР°Р¶РЅРµРЅ', 'РїСЂРѕРіСЂР°РјРј', 'Р·Р°РЅСЏС‚', 'СЃРїРѕСЂС‚',
    'РїРёС‚Р°РЅРёРµ', 'РґРёРµС‚Р°', 'РєР°Р»РѕСЂРё', 'Р±РµР»РѕРє', 'СѓРіР»РµРІРѕРґ', 'Р¶РёСЂ',
    'РїРѕС…СѓРґРµС‚СЊ', 'РїРѕС…СѓРґРµРЅРё', 'РІРµСЃ', 'РєРёР»РѕРіСЂР°РјРј', 'СЃР±СЂРѕСЃРёС‚СЊ',
    'РјС‹С€С†', 'РјР°СЃСЃР°', 'РЅР°РєР°С‡Р°С‚СЊ', 'РЅР°Р±СЂР°С‚СЊ', 'СЂРµР»СЊРµС„',
    'С„РёС‚РЅРµСЃ', 'Р·Р°Р»', 'РґРѕРјР°', 'РєР°СЂРґРёРѕ', 'СЃРёР»РѕРІ',
    'РїСЂРµСЃСЃ', 'РЅРѕРі', 'СЂСѓРє', 'СЃРїРёРЅ', 'РіСЂСѓРґСЊ', 'РїР»РµС‡',
    'РѕС‚Р¶РёРјР°РЅРё', 'РїСЂРёСЃРµРґР°РЅРё', 'РїРѕРґС‚СЏРіРёРІР°РЅРё', 'РїР»Р°РЅРєР°',
    'Р±РµРі', 'С…РѕРґСЊР±Р°', 'РІРµР»РѕСЃРёРїРµРґ', 'РїР»Р°РІР°РЅРё',
    'Р·РґРѕСЂРѕРІСЊРµ', 'СЌРЅРµСЂРіРёСЏ', 'РІС‹РЅРѕСЃР»РёРІРѕСЃС‚СЊ', 'СЃРёР»Р°'
  ];
  
  const lowerText = text.toLowerCase();
  return fitnessKeywords.some(keyword => lowerText.includes(keyword));
}

async function handleTextMessage(bot, msg) {
  const chatId = msg.chat.id;
  let text = msg.text; // РР·РјРµРЅСЏРµРј const РЅР° let, С‡С‚РѕР±С‹ РјРѕР¶РЅРѕ Р±С‹Р»Рѕ РїРµСЂРµРѕРїСЂРµРґРµР»СЏС‚СЊ
  const user = msg.from;

  // Р›РѕРіРёСЂСѓРµРј РІСЃРµ РїРѕР»СѓС‡Р°РµРјС‹Рµ СЃРѕРѕР±С‰РµРЅРёСЏ
  console.log(`рџ“© РџРѕР»СѓС‡РµРЅРѕ СЃРѕРѕР±С‰РµРЅРёРµ РѕС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${user.id}:`, text);

  try {
    // РћР±РЅРѕРІР»СЏРµРј Р°РєС‚РёРІРЅРѕСЃС‚СЊ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
    await createOrUpdateUser(user);
    const dbUser = await getUserByTelegramId(user.id);

    // === РџР•Р Р’РћРћР§Р•Р Р•Р”РќРђРЇ РћР‘Р РђР‘РћРўРљРђ РљРќРћРџРћРљ РРќРўР•Р Р¤Р•Р™РЎРђ ===
    // Р­С‚Рё РєРЅРѕРїРєРё РґРѕР»Р¶РЅС‹ РѕР±СЂР°Р±Р°С‚С‹РІР°С‚СЊСЃСЏ Р’РЎР•Р“Р”Рђ, РЅРµР·Р°РІРёСЃРёРјРѕ РѕС‚ РїРѕРґРїРёСЃРєРё
    // Р’СЃРµ РєРЅРѕРїРєРё РёРЅС‚РµСЂС„РµР№СЃР° СЃР±СЂР°СЃС‹РІР°СЋС‚ СЂРµР¶РёРј РР-С‚СЂРµРЅРµСЂР°
    
    // РџСЂРѕРІРµСЂСЏРµРј РєРЅРѕРїРєСѓ "РњРѕРё РґР°РЅРЅС‹Рµ" СЃ СѓС‡РµС‚РѕРј РїСЂРѕР±Р»РµРј РєРѕРґРёСЂРѕРІРєРё СЌРјРѕРґР·Рё
    if (text === 'рџЋЇ РњРѕРё РґР°РЅРЅС‹Рµ' || text.includes('РњРѕРё РґР°РЅРЅС‹Рµ')) {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЂРµР¶РёРј РР-С‚СЂРµРЅРµСЂР°
      await bot.sendMessage(
        chatId,
        'рџЋЇ **РЈРїСЂР°РІР»РµРЅРёРµ РґР°РЅРЅС‹РјРё**\n\n' +
        'Р—РґРµСЃСЊ РІС‹ РјРѕР¶РµС‚Рµ:\n' +
        'вЂў вљ–пёЏ Р—Р°РїРёСЃС‹РІР°С‚СЊ Рё РѕС‚СЃР»РµР¶РёРІР°С‚СЊ РІРµСЃ\n' +
        'вЂў рџЋЇ РЈСЃС‚Р°РЅР°РІР»РёРІР°С‚СЊ Рё РёР·РјРµРЅСЏС‚СЊ С†РµР»Рё\n' +
        'вЂў рџЏ‹пёЏвЂЌв™‚пёЏ Р”РѕР±Р°РІР»СЏС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєРё\n' +
        'вЂў рџ“Љ РџСЂРѕСЃРјР°С‚СЂРёРІР°С‚СЊ СЃРІРѕРё Р·Р°РїРёСЃРё\n' +
        'вЂў рџ”§ Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ РґР°РЅРЅС‹Рµ\n' +
        'вЂў рџ—‘пёЏ РЈРґР°Р»СЏС‚СЊ Р·Р°РїРёСЃРё\n\n' +
        'Р’С‹Р±РµСЂРёС‚Рµ РґРµР№СЃС‚РІРёРµ:',
        { parse_mode: 'Markdown', ...userDataKeyboard }
      );
      return;
    }

    if (text === 'рџ§¬ РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹' || text.includes('РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹')) {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЂРµР¶РёРј РР-С‚СЂРµРЅРµСЂР°
      await bot.sendMessage(
        chatId,
        'рџ§¬ **РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹**\n\n' +
        'рџ¤– РЎРїРµС†РёР°Р»СЊРЅС‹Рµ РІРѕСЂРєС„Р»РѕСѓ РєРѕРјР°РЅРґС‹ РґР»СЏ СЂР°Р±РѕС‚С‹ СЃ РР:\n\n' +
        'вЂў рџЏ‹пёЏвЂЌв™‚пёЏ `/training_program` - СЃРѕР·РґР°РЅРёРµ РїРµСЂСЃРѕРЅР°Р»СЊРЅРѕР№ РїСЂРѕРіСЂР°РјРјС‹ С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
        'вЂў рџҐ— `/nutrition_plan` - СЃРѕСЃС‚Р°РІР»РµРЅРёРµ РїР»Р°РЅР° РїРёС‚Р°РЅРёСЏ\n' +
        'вЂў рџ”¬ `/deepresearch` - РіР»СѓР±РѕРєРѕРµ РЅР°СѓС‡РЅРѕРµ РёСЃСЃР»РµРґРѕРІР°РЅРёРµ\n' +
        'вЂў рџ§Є `/composition_analysis` - Р°РЅР°Р»РёР· СЃРѕСЃС‚Р°РІР° РґРѕР±Р°РІРѕРє\n\n' +
        'РќР°Р¶РјРёС‚Рµ РЅР° РєРѕРјР°РЅРґСѓ РёР»Рё РІС‹Р±РµСЂРёС‚Рµ РёР· РјРµРЅСЋ:',
        { parse_mode: 'Markdown', ...aiToolsKeyboard }
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° РєРЅРѕРїРѕРє РР-РєРѕРјР°РЅРґ
    if (text === 'рџЏ‹пёЏвЂЌв™‚пёЏ /training_program') {
      text = '/training_program'; // РџРµСЂРµРѕРїСЂРµРґРµР»СЏРµРј С‚РµРєСЃС‚ РґР»СЏ РґР°Р»СЊРЅРµР№С€РµР№ РѕР±СЂР°Р±РѕС‚РєРё
    }
    
    if (text === 'рџҐ— /nutrition_plan') {
      text = '/nutrition_plan'; // РџРµСЂРµРѕРїСЂРµРґРµР»СЏРµРј С‚РµРєСЃС‚ РґР»СЏ РґР°Р»СЊРЅРµР№С€РµР№ РѕР±СЂР°Р±РѕС‚РєРё
    }
    
    if (text === 'рџ”¬ /deepresearch') {
      text = '/deepresearch'; // РџРµСЂРµРѕРїСЂРµРґРµР»СЏРµРј С‚РµРєСЃС‚ РґР»СЏ РґР°Р»СЊРЅРµР№С€РµР№ РѕР±СЂР°Р±РѕС‚РєРё
    }
    
    if (text === 'рџ§Є /composition_analysis') {
      text = '/composition_analysis'; // РџРµСЂРµРѕРїСЂРµРґРµР»СЏРµРј С‚РµРєСЃС‚ РґР»СЏ РґР°Р»СЊРЅРµР№С€РµР№ РѕР±СЂР°Р±РѕС‚РєРё
    }

    if (text === 'в¬…пёЏ РќР°Р·Р°Рґ РІ РјРµРЅСЋ' || text.includes('РќР°Р·Р°Рґ РІ РјРµРЅСЋ')) {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЃРѕСЃС‚РѕСЏРЅРёРµ
      await bot.sendMessage(
        chatId,
        'рџЏ  Р“Р»Р°РІРЅРѕРµ РјРµРЅСЋ\n\nР’С‹Р±РµСЂРёС‚Рµ РґРµР№СЃС‚РІРёРµ:',
        mainKeyboard
      );
      return;
    }

    if (text === 'вќЊ РћС‚РјРµРЅР°') {
      // РћС‚РјРµРЅСЏРµРј С‚РµРєСѓС‰РµРµ РґРµР№СЃС‚РІРёРµ Рё РІРѕР·РІСЂР°С‰Р°РµРјСЃСЏ РІ РјРµРЅСЋ
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЃРѕСЃС‚РѕСЏРЅРёРµ
      activeWorkouts.delete(user.id); // РћС‚РјРµРЅСЏРµРј Р°РєС‚РёРІРЅСѓСЋ С‚СЂРµРЅРёСЂРѕРІРєСѓ РµСЃР»Рё РµСЃС‚СЊ
      await bot.sendMessage(
        chatId,
        'вќЊ Р”РµР№СЃС‚РІРёРµ РѕС‚РјРµРЅРµРЅРѕ\n\nрџЏ  Р’РѕР·РІСЂР°С‰Р°РµРјСЃСЏ РІ РіР»Р°РІРЅРѕРµ РјРµРЅСЋ:',
        mainKeyboard
      );
      return;
    }

    if (text === 'рџ’Ћ РџРѕРґРїРёСЃРєР°' || text.includes('РџРѕРґРїРёСЃРєР°')) {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЂРµР¶РёРј РР-С‚СЂРµРЅРµСЂР°
      await showSubscriptionMenu(bot, chatId, dbUser.id);
      return;
    }

    // РћР±СЂР°Р±РѕС‚С‡РёРєРё РєРЅРѕРїРѕРє РїРѕРґРїРёСЃРєРё
    if (text === 'рџ“‹ РЎС‚Р°С‚СѓСЃ РїРѕРґРїРёСЃРєРё') {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЂРµР¶РёРј РР-С‚СЂРµРЅРµСЂР°
      await showSubscriptionStatus(bot, chatId, null, dbUser.id);
      return;
    }

    if (text === 'рџ“Љ РСЃС‚РѕСЂРёСЏ РїР»Р°С‚РµР¶РµР№') {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЂРµР¶РёРј РР-С‚СЂРµРЅРµСЂР°
      await showPaymentHistory(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџ’і РџСЂРѕРґР»РёС‚СЊ РїРѕРґРїРёСЃРєСѓ') {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЂРµР¶РёРј РР-С‚СЂРµРЅРµСЂР°
      
      const basicPrice = process.env.BASIC_PRICE || '150';
      const standardPrice = process.env.STANDARD_PRICE || '300';
      const premiumPrice = process.env.PREMIUM_PRICE || '450';
      
      await bot.sendMessage(
        chatId,
        `рџ’Ћ РџСЂРѕРґР»РµРЅРёРµ РїРѕРґРїРёСЃРєРё\n\nР’С‹Р±РµСЂРёС‚Рµ РїР»Р°РЅ:\n\n` +
        `рџ’Ћ **Р‘Р°Р·РѕРІС‹Р№ РїР»Р°РЅ** - ${basicPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 100 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n` +
        `вЂў РћСЃРЅРѕРІРЅС‹Рµ С‚СЂРµРЅРёСЂРѕРІРѕС‡РЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹\n` +
        `вЂў Р‘Р°Р·РѕРІС‹Рµ СЃРѕРІРµС‚С‹ РїРѕ РїРёС‚Р°РЅРёСЋ\n\n` +
        
        `в­ђ **РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№ РїР»Р°РЅ** - ${standardPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 300 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n` +
        `вЂў РџРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹ С‚СЂРµРЅРёСЂРѕРІРѕРє\n` +
        `вЂў Р”РµС‚Р°Р»СЊРЅС‹Рµ РїР»Р°РЅС‹ РїРёС‚Р°РЅРёСЏ\n` +
        `вЂў РђРЅР°Р»РёР· СЃРѕСЃС‚Р°РІР° РґРѕР±Р°РІРѕРє\n\n` +
        
        `рџљЂ **РџСЂРµРјРёСѓРј РїР»Р°РЅ** - ${premiumPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 600 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n` +
        `вЂў Р’СЃРµ РІРѕР·РјРѕР¶РЅРѕСЃС‚Рё РР-С‚СЂРµРЅРµСЂР°\n` +
        `вЂў РџСЂРёРѕСЂРёС‚РµС‚РЅР°СЏ РїРѕРґРґРµСЂР¶РєР°\n` +
        `вЂў Р­РєСЃРєР»СЋР·РёРІРЅС‹Рµ РёСЃСЃР»РµРґРѕРІР°РЅРёСЏ\n\n` +
        
        `Р’С‹Р±РµСЂРёС‚Рµ РїР»Р°РЅ РєРЅРѕРїРєРѕР№ РЅРёР¶Рµ:`,
        { parse_mode: 'Markdown', ...subscriptionPlansKeyboard }
      );
      return;
    }

    if (text === 'рџ’і РћРїР»Р°С‚РёС‚СЊ РїРѕРґРїРёСЃРєСѓ' || text === 'рџ’і РћС„РѕСЂРјРёС‚СЊ РїРѕРґРїРёСЃРєСѓ') {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЂРµР¶РёРј РР-С‚СЂРµРЅРµСЂР°
      
      const basicPrice = process.env.BASIC_PRICE || '150';
      const standardPrice = process.env.STANDARD_PRICE || '300';
      const premiumPrice = process.env.PREMIUM_PRICE || '450';
      
      await bot.sendMessage(
        chatId,
        `рџ’Ћ Р’С‹Р±РµСЂРёС‚Рµ РїР»Р°РЅ РїРѕРґРїРёСЃРєРё:\n\n` +
        `пїЅ **Р‘Р°Р·РѕРІС‹Р№ РїР»Р°РЅ** - ${basicPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 100 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n` +
        `вЂў РћСЃРЅРѕРІРЅС‹Рµ С‚СЂРµРЅРёСЂРѕРІРѕС‡РЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹\n` +
        `вЂў Р‘Р°Р·РѕРІС‹Рµ СЃРѕРІРµС‚С‹ РїРѕ РїРёС‚Р°РЅРёСЋ\n\n` +
        
        `в­ђ **РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№ РїР»Р°РЅ** - ${standardPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 300 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n` +
        `вЂў РџРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹ С‚СЂРµРЅРёСЂРѕРІРѕРє\n` +
        `вЂў Р”РµС‚Р°Р»СЊРЅС‹Рµ РїР»Р°РЅС‹ РїРёС‚Р°РЅРёСЏ\n` +
        `вЂў РђРЅР°Р»РёР· СЃРѕСЃС‚Р°РІР° РґРѕР±Р°РІРѕРє\n\n` +
        
        `рџљЂ **РџСЂРµРјРёСѓРј РїР»Р°РЅ** - ${premiumPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 600 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n` +
        `вЂў Р’СЃРµ РІРѕР·РјРѕР¶РЅРѕСЃС‚Рё РР-С‚СЂРµРЅРµСЂР°\n` +
        `вЂў РџСЂРёРѕСЂРёС‚РµС‚РЅР°СЏ РїРѕРґРґРµСЂР¶РєР°\n` +
        `вЂў Р­РєСЃРєР»СЋР·РёРІРЅС‹Рµ РёСЃСЃР»РµРґРѕРІР°РЅРёСЏ\n\n` +
        
        `Р’С‹Р±РµСЂРёС‚Рµ РїР»Р°РЅ РєРЅРѕРїРєРѕР№ РЅРёР¶Рµ:`,
        { parse_mode: 'Markdown', ...subscriptionPlansKeyboard }
      );
      return;
    }

    if (text === 'рџ“‹ РџСЂРµРёРјСѓС‰РµСЃС‚РІР° РїРѕРґРїРёСЃРєРё') {
      await bot.sendMessage(
        chatId,
        'вњЁ **РџСЂРµРёРјСѓС‰РµСЃС‚РІР° РїРѕРґРїРёСЃРєРё:**\n\n' +
        'рџ¤– **РќРµРѕРіСЂР°РЅРёС‡РµРЅРЅРѕРµ РѕР±С‰РµРЅРёРµ СЃ РР-С‚СЂРµРЅРµСЂРѕРј**\n' +
        'вЂў РџРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РѕС‚РІРµС‚С‹ РЅР° Р»СЋР±С‹Рµ С„РёС‚РЅРµСЃ-РІРѕРїСЂРѕСЃС‹\n' +
        'вЂў РЎРѕСЃС‚Р°РІР»РµРЅРёРµ РёРЅРґРёРІРёРґСѓР°Р»СЊРЅС‹С… РїСЂРѕРіСЂР°РјРј\n' +
        'вЂў РЎРѕРІРµС‚С‹ РїРѕ РїРёС‚Р°РЅРёСЋ Рё СЃРїРѕСЂС‚РёРІРЅРѕРјСѓ РїРёС‚Р°РЅРёСЋ\n\n' +
        'рџ§¬ **Р”РѕСЃС‚СѓРї Рє СЃРїРµС†РёР°Р»СЊРЅС‹Рј РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚Р°Рј:**\n' +
        'вЂў рџ”¬ Р“Р»СѓР±РѕРєРёР№ РЅР°СѓС‡РЅС‹Р№ Р°РЅР°Р»РёР·\n' +
        'вЂў рџЏ‹пёЏвЂЌв™‚пёЏ РџРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹ С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
        'вЂў рџҐ— РРЅРґРёРІРёРґСѓР°Р»СЊРЅС‹Рµ РїР»Р°РЅС‹ РїРёС‚Р°РЅРёСЏ\n' +
        'вЂў рџ§Є РџСЂРѕС„РµСЃСЃРёРѕРЅР°Р»СЊРЅС‹Р№ Р°РЅР°Р»РёР· РґРѕР±Р°РІРѕРє\n\n' +
        'рџ“Љ **Р Р°СЃС€РёСЂРµРЅРЅР°СЏ Р°РЅР°Р»РёС‚РёРєР°:**\n' +
        'вЂў Р”РµС‚Р°Р»СЊРЅС‹Рµ РіСЂР°С„РёРєРё РїСЂРѕРіСЂРµСЃСЃР°\n' +
        'вЂў РџРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РѕС‚С‡РµС‚С‹\n' +
        'вЂў РЎРёСЃС‚РµРјР° РґРѕСЃС‚РёР¶РµРЅРёР№\n\n' +
        'рџЋЇ **РЈРїСЂР°РІР»РµРЅРёРµ РґР°РЅРЅС‹РјРё:**\n' +
        'вЂў Р’РµРґРµРЅРёРµ РґРЅРµРІРЅРёРєР° С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
        'вЂў РћС‚СЃР»РµР¶РёРІР°РЅРёРµ РІРµСЃР° Рё РјРµС‚СЂРёРє\n' +
        'вЂў РџРѕСЃС‚Р°РЅРѕРІРєР° Рё РєРѕРЅС‚СЂРѕР»СЊ С†РµР»РµР№',
        { parse_mode: 'Markdown', ...subscriptionKeyboard }
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚С‡РёРєРё РІС‹Р±РѕСЂР° РїР»Р°РЅРѕРІ РїРѕРґРїРёСЃРєРё
    if (text === 'рџ’Ћ Р‘Р°Р·РѕРІС‹Р№ РїР»Р°РЅ - 150в‚Ѕ') {
      userStates.set(user.id, { action: 'selected_plan', planType: 'basic' });
      await bot.sendMessage(
        chatId,
        'рџ’Ћ **Р‘Р°Р·РѕРІС‹Р№ РїР»Р°РЅ** - 150в‚Ѕ/РјРµСЃСЏС†\n\n' +
        'вњ… **Р§С‚Рѕ РІРєР»СЋС‡РµРЅРѕ:**\n' +
        'вЂў 100 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n' +
        'вЂў РћСЃРЅРѕРІРЅС‹Рµ С‚СЂРµРЅРёСЂРѕРІРѕС‡РЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹\n' +
        'вЂў Р‘Р°Р·РѕРІС‹Рµ СЃРѕРІРµС‚С‹ РїРѕ РїРёС‚Р°РЅРёСЋ\n' +
        'вЂў Р’РµРґРµРЅРёРµ РґРЅРµРІРЅРёРєР° С‚СЂРµРЅРёСЂРѕРІРѕРє\n\n' +
        'рџ’і **РЎРїРѕСЃРѕР±С‹ РѕРїР»Р°С‚С‹:**\n' +
        'вЂў Р‘Р°РЅРєРѕРІСЃРєР°СЏ РєР°СЂС‚Р° (Visa, MasterCard, РњРР )\n' +
        'вЂў Р®Money\n' +
        'вЂў РЎР‘Рџ (РЎРёСЃС‚РµРјР° Р±С‹СЃС‚СЂС‹С… РїР»Р°С‚РµР¶РµР№)\n\n' +
        'вљ пёЏ РџРѕСЃР»Рµ РѕРїР»Р°С‚С‹ РґРѕСЃС‚СѓРї Р°РєС‚РёРІРёСЂСѓРµС‚СЃСЏ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё!\n\n' +
        'рџ‘‡ **РќР°Р¶РјРёС‚Рµ РєРЅРѕРїРєСѓ РґР»СЏ СЃРѕР·РґР°РЅРёСЏ СЃСЃС‹Р»РєРё РЅР° РѕРїР»Р°С‚Сѓ:**',
        { parse_mode: 'Markdown', ...paymentConfirmKeyboard }
      );
      return;
    }

    if (text === 'в­ђ РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№ РїР»Р°РЅ - 300в‚Ѕ') {
      userStates.set(user.id, { action: 'selected_plan', planType: 'standard' });
      await bot.sendMessage(
        chatId,
        'в­ђ **РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№ РїР»Р°РЅ** - 300в‚Ѕ/РјРµСЃСЏС†\n\n' +
        'вњ… **Р§С‚Рѕ РІРєР»СЋС‡РµРЅРѕ:**\n' +
        'вЂў 300 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n' +
        'вЂў РџРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹ С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
        'вЂў Р”РµС‚Р°Р»СЊРЅС‹Рµ РїР»Р°РЅС‹ РїРёС‚Р°РЅРёСЏ\n' +
        'вЂў РђРЅР°Р»РёР· СЃРѕСЃС‚Р°РІР° РґРѕР±Р°РІРѕРє\n' +
        'вЂў Р Р°СЃС€РёСЂРµРЅРЅР°СЏ Р°РЅР°Р»РёС‚РёРєР°\n' +
        'вЂў РћС‚СЃР»РµР¶РёРІР°РЅРёРµ РїСЂРѕРіСЂРµСЃСЃР°\n\n' +
        'рџ’і **РЎРїРѕСЃРѕР±С‹ РѕРїР»Р°С‚С‹:**\n' +
        'вЂў Р‘Р°РЅРєРѕРІСЃРєР°СЏ РєР°СЂС‚Р° (Visa, MasterCard, РњРР )\n' +
        'вЂў Р®Money\n' +
        'вЂў РЎР‘Рџ (РЎРёСЃС‚РµРјР° Р±С‹СЃС‚СЂС‹С… РїР»Р°С‚РµР¶РµР№)\n\n' +
        'вљ пёЏ РџРѕСЃР»Рµ РѕРїР»Р°С‚С‹ РґРѕСЃС‚СѓРї Р°РєС‚РёРІРёСЂСѓРµС‚СЃСЏ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё!\n\n' +
        'рџ‘‡ **РќР°Р¶РјРёС‚Рµ РєРЅРѕРїРєСѓ РґР»СЏ СЃРѕР·РґР°РЅРёСЏ СЃСЃС‹Р»РєРё РЅР° РѕРїР»Р°С‚Сѓ:**',
        { parse_mode: 'Markdown', ...paymentConfirmKeyboard }
      );
      return;
    }

    if (text === 'рџљЂ РџСЂРµРјРёСѓРј РїР»Р°РЅ - 450в‚Ѕ') {
      userStates.set(user.id, { action: 'selected_plan', planType: 'premium' });
      await bot.sendMessage(
        chatId,
        'рџљЂ **РџСЂРµРјРёСѓРј РїР»Р°РЅ** - 450в‚Ѕ/РјРµСЃСЏС†\n\n' +
        'вњ… **Р§С‚Рѕ РІРєР»СЋС‡РµРЅРѕ:**\n' +
        'вЂў 600 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n' +
        'вЂў Р’СЃРµ РІРѕР·РјРѕР¶РЅРѕСЃС‚Рё РР-С‚СЂРµРЅРµСЂР°\n' +
        'вЂў РџСЂРёРѕСЂРёС‚РµС‚РЅР°СЏ РїРѕРґРґРµСЂР¶РєР°\n' +
        'вЂў Р­РєСЃРєР»СЋР·РёРІРЅС‹Рµ РёСЃСЃР»РµРґРѕРІР°РЅРёСЏ\n' +
        'вЂў РџРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РєРѕРЅСЃСѓР»СЊС‚Р°С†РёРё\n' +
        'вЂў РџСЂРѕРґРІРёРЅСѓС‚Р°СЏ Р°РЅР°Р»РёС‚РёРєР°\n' +
        'вЂў Р­РєСЃРїРѕСЂС‚ РґР°РЅРЅС‹С…\n\n' +
        'рџ’і **РЎРїРѕСЃРѕР±С‹ РѕРїР»Р°С‚С‹:**\n' +
        'вЂў Р‘Р°РЅРєРѕРІСЃРєР°СЏ РєР°СЂС‚Р° (Visa, MasterCard, РњРР )\n' +
        'вЂў Р®Money\n' +
        'вЂў РЎР‘Рџ (РЎРёСЃС‚РµРјР° Р±С‹СЃС‚СЂС‹С… РїР»Р°С‚РµР¶РµР№)\n\n' +
        'вљ пёЏ РџРѕСЃР»Рµ РѕРїР»Р°С‚С‹ РґРѕСЃС‚СѓРї Р°РєС‚РёРІРёСЂСѓРµС‚СЃСЏ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё!\n\n' +
        'рџ‘‡ **РќР°Р¶РјРёС‚Рµ РєРЅРѕРїРєСѓ РґР»СЏ СЃРѕР·РґР°РЅРёСЏ СЃСЃС‹Р»РєРё РЅР° РѕРїР»Р°С‚Сѓ:**',
        { parse_mode: 'Markdown', ...paymentConfirmKeyboard }
      );
      return;
    }

    if (text === 'рџ’і РћРїР»Р°С‚РёС‚СЊ СЃРµР№С‡Р°СЃ') {
      const state = userStates.get(user.id);
      if (state && state.action === 'selected_plan') {
        // РЎРѕР·РґР°РµРј РїР»Р°С‚РµР¶
        await bot.sendChatAction(chatId, 'typing');
        const loadingMsg = await bot.sendMessage(chatId, 'рџ’і РЎРѕР·РґР°СЋ СЃСЃС‹Р»РєСѓ РґР»СЏ РѕРїР»Р°С‚С‹...');
        
        const paymentResult = await createSubscriptionPayment(user.id, state.planType);
        
        await bot.deleteMessage(chatId, loadingMsg.message_id).catch(() => {});
        
        if (paymentResult.success) {
          const planNames = {
            'basic': 'рџ’Ћ Р‘Р°Р·РѕРІС‹Р№ РїР»Р°РЅ',
            'standard': 'в­ђ РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№ РїР»Р°РЅ', 
            'premium': 'рџљЂ РџСЂРµРјРёСѓРј РїР»Р°РЅ'
          };
          
          await bot.sendMessage(
            chatId,
            `вњ… **РЎСЃС‹Р»РєР° РґР»СЏ РѕРїР»Р°С‚С‹ СЃРѕР·РґР°РЅР°!**\n\n` +
            `рџ“‹ **Р”РµС‚Р°Р»Рё РїР»Р°С‚РµР¶Р°:**\n` +
            `вЂў РџР»Р°РЅ: ${planNames[state.planType]}\n` +
            `вЂў РЎСѓРјРјР°: ${paymentResult.amount}в‚Ѕ\n` +
            `вЂў РћРїРёСЃР°РЅРёРµ: ${paymentResult.description}\n\n` +
            `рџ”— **[РћРџР›РђРўРРўР¬ РџРћР”РџРРЎРљРЈ](${paymentResult.paymentUrl})**\n\n` +
            `рџ’Ў **РРЅСЃС‚СЂСѓРєС†РёСЏ:**\n` +
            `1. РќР°Р¶РјРёС‚Рµ РЅР° СЃСЃС‹Р»РєСѓ РІС‹С€Рµ\n` +
            `2. Р’С‹Р±РµСЂРёС‚Рµ СЃРїРѕСЃРѕР± РѕРїР»Р°С‚С‹\n` +
            `3. Р’РІРµРґРёС‚Рµ РґР°РЅРЅС‹Рµ РєР°СЂС‚С‹ РёР»Рё РІРѕР№РґРёС‚Рµ РІ Р®Money\n` +
            `4. РџРѕРґС‚РІРµСЂРґРёС‚Рµ РїР»Р°С‚РµР¶\n` +
            `5. Р”РѕСЃС‚СѓРї Р°РєС‚РёРІРёСЂСѓРµС‚СЃСЏ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё!\n\n` +
            `вљ пёЏ РЎСЃС‹Р»РєР° РґРµР№СЃС‚РІРёС‚РµР»СЊРЅР° 15 РјРёРЅСѓС‚`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                keyboard: [
                  [{ text: 'рџ“‹ РЎС‚Р°С‚СѓСЃ РїРѕРґРїРёСЃРєРё' }],
                  [{ text: 'в¬…пёЏ РќР°Р·Р°Рґ Рє РїР»Р°РЅР°Рј' }],
                  [{ text: 'в¬…пёЏ РќР°Р·Р°Рґ РІ РјРµРЅСЋ' }]
                ],
                resize_keyboard: true,
                one_time_keyboard: false
              }
            }
          );
          userStates.delete(user.id);
        } else {
          await bot.sendMessage(
            chatId,
            `вќЊ **РћС€РёР±РєР° СЃРѕР·РґР°РЅРёСЏ РїР»Р°С‚РµР¶Р°**\n\n${paymentResult.error}\n\nРџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ РёР»Рё РѕР±СЂР°С‚РёС‚РµСЃСЊ РІ РїРѕРґРґРµСЂР¶РєСѓ.`,
            { parse_mode: 'Markdown', ...paymentConfirmKeyboard }
          );
        }
      } else {
        await bot.sendMessage(
          chatId,
          'вќЊ РЎРЅР°С‡Р°Р»Р° РІС‹Р±РµСЂРёС‚Рµ РїР»Р°РЅ РїРѕРґРїРёСЃРєРё.',
          subscriptionPlansKeyboard
        );
      }
      return;
    }

    if (text === 'в¬…пёЏ РќР°Р·Р°Рґ Рє РїР»Р°РЅР°Рј') {
      userStates.delete(user.id);
      const basicPrice = process.env.BASIC_PRICE || '150';
      const standardPrice = process.env.STANDARD_PRICE || '300';
      const premiumPrice = process.env.PREMIUM_PRICE || '450';
      
      await bot.sendMessage(
        chatId,
        `рџ’Ћ Р’С‹Р±РµСЂРёС‚Рµ РїР»Р°РЅ РїРѕРґРїРёСЃРєРё:\n\n` +
        `рџ’Ћ **Р‘Р°Р·РѕРІС‹Р№ РїР»Р°РЅ** - ${basicPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 100 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n\n` +
        `в­ђ **РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№ РїР»Р°РЅ** - ${standardPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 300 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n\n` +
        `рџљЂ **РџСЂРµРјРёСѓРј РїР»Р°РЅ** - ${premiumPrice}в‚Ѕ/РјРµСЃ\n` +
        `вЂў 600 Р·Р°РїСЂРѕСЃРѕРІ Рє РР-С‚СЂРµРЅРµСЂСѓ\n\n` +
        `Р’С‹Р±РµСЂРёС‚Рµ РїР»Р°РЅ РєРЅРѕРїРєРѕР№ РЅРёР¶Рµ:`,
        { parse_mode: 'Markdown', ...subscriptionPlansKeyboard }
      );
      return;
    }

    if (text === 'в¬…пёЏ РќР°Р·Р°Рґ Рє РїРѕРґРїРёСЃРєРµ') {
      userStates.delete(user.id);
      await bot.sendMessage(
        chatId,
        'рџ’Ћ РЈРїСЂР°РІР»РµРЅРёРµ РїРѕРґРїРёСЃРєРѕР№\n\nР’С‹Р±РµСЂРёС‚Рµ РґРµР№СЃС‚РІРёРµ:',
        subscriptionKeyboard
      );
      return;
    }

    if (text === 'рџ“Љ РњРѕР№ РїСЂРѕС„РёР»СЊ' || text.includes('РњРѕР№ РїСЂРѕС„РёР»СЊ')) {
      await showUserProfile(bot, chatId, dbUser);
      return;
    }

    if (text === 'вќ“ РџРѕРјРѕС‰СЊ' || text.includes('РџРѕРјРѕС‰СЊ')) {
      await bot.sendMessage(
        chatId,
        'вќ“ РЎРїСЂР°РІРєР° Рё РїРѕРјРѕС‰СЊ\n\nР’С‹Р±РµСЂРёС‚Рµ РёРЅС‚РµСЂРµСЃСѓСЋС‰РёР№ РІР°СЃ СЂР°Р·РґРµР»:',
        helpKeyboard
      );
      return;
    }

    if (text === 'рџ“€ РђРЅР°Р»РёС‚РёРєР°' || text.includes('РђРЅР°Р»РёС‚РёРєР°')) {
      await bot.sendMessage(
        chatId,
        'рџ“Љ РђРЅР°Р»РёС‚РёРєР° Рё СЃС‚Р°С‚РёСЃС‚РёРєР°\n\nР’С‹Р±РµСЂРёС‚Рµ С‚РёРї РѕС‚С‡РµС‚Р°, РєРѕС‚РѕСЂС‹Р№ С…РѕС‚РёС‚Рµ РїРѕСЃРјРѕС‚СЂРµС‚СЊ:',
        analyticsKeyboard
      );
      return;
    }

    if (text === 'в¬…пёЏ РќР°Р·Р°Рґ РІ РјРµРЅСЋ') {
      userStates.delete(user.id); // РЎР±СЂР°СЃС‹РІР°РµРј СЃРѕСЃС‚РѕСЏРЅРёРµ
      await bot.sendMessage(
        chatId,
        'рџЏ  Р“Р»Р°РІРЅРѕРµ РјРµРЅСЋ\n\nР’С‹Р±РµСЂРёС‚Рµ РґРµР№СЃС‚РІРёРµ:',
        mainKeyboard
      );
      return;
    }

    if (text === 'рџ’Ћ РџРѕРґРїРёСЃРєР°') {
      await showSubscriptionMenu(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџ“Љ РњРѕР№ РїСЂРѕС„РёР»СЊ') {
      await showUserProfile(bot, chatId, dbUser);
      return;
    }

    if (text === 'вќ“ РџРѕРјРѕС‰СЊ') {
      await bot.sendMessage(
        chatId,
        'вќ“ РЎРїСЂР°РІРєР° Рё РїРѕРјРѕС‰СЊ\n\nР’С‹Р±РµСЂРёС‚Рµ РёРЅС‚РµСЂРµСЃСѓСЋС‰РёР№ РІР°СЃ СЂР°Р·РґРµР»:',
        helpKeyboard
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚С‡РёРєРё РєРЅРѕРїРѕРє РїРѕРјРѕС‰Рё
    if (text === 'рџ’¬ РљР°Рє РїРѕР»СЊР·РѕРІР°С‚СЊСЃСЏ Р±РѕС‚РѕРј?' || text.includes('РљР°Рє РїРѕР»СЊР·РѕРІР°С‚СЊСЃСЏ Р±РѕС‚РѕРј')) {
      await bot.sendMessage(
        chatId,
        'рџ’¬ **РљР°Рє РїРѕР»СЊР·РѕРІР°С‚СЊСЃСЏ Р±РѕС‚РѕРј**\n\n' +
        'рџ¤– **РР-С‚СЂРµРЅРµСЂ** - РІР°С€ РїРµСЂСЃРѕРЅР°Р»СЊРЅС‹Р№ РїРѕРјРѕС‰РЅРёРє:\n' +
        'вЂў РћС‚РІРµС‡Р°РµС‚ РЅР° РІРѕРїСЂРѕСЃС‹ Рѕ С„РёС‚РЅРµСЃРµ Рё РїРёС‚Р°РЅРёРё\n' +
        'вЂў РЎРѕСЃС‚Р°РІР»СЏРµС‚ РїСЂРѕРіСЂР°РјРјС‹ С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
        'вЂў Р”Р°С‘С‚ СЃРѕРІРµС‚С‹ РїРѕ Р·РґРѕСЂРѕРІРѕРјСѓ РѕР±СЂР°Р·Сѓ Р¶РёР·РЅРё\n\n' +
        'рџ§¬ **РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹** - СЃРїРµС†РёР°Р»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё:\n' +
        'вЂў `/training_program` - РїРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹\n' +
        'вЂў `/nutrition_plan` - РїР»Р°РЅС‹ РїРёС‚Р°РЅРёСЏ\n' +
        'вЂў `/deepresearch` - РЅР°СѓС‡РЅС‹Рµ РёСЃСЃР»РµРґРѕРІР°РЅРёСЏ\n' +
        'вЂў `/composition_analysis` - Р°РЅР°Р»РёР· РґРѕР±Р°РІРѕРє\n\n' +
        'рџЋЇ **РњРѕРё РґР°РЅРЅС‹Рµ** - РѕС‚СЃР»РµР¶РёРІР°РЅРёРµ РїСЂРѕРіСЂРµСЃСЃР°:\n' +
        'вЂў Р—Р°РїРёСЃС‹РІР°Р№С‚Рµ РІРµСЃ Рё С‚СЂРµРЅРёСЂРѕРІРєРё\n' +
        'вЂў РЈСЃС‚Р°РЅР°РІР»РёРІР°Р№С‚Рµ С†РµР»Рё\n' +
        'вЂў РџСЂРѕСЃРјР°С‚СЂРёРІР°Р№С‚Рµ РёСЃС‚РѕСЂРёСЋ\n\n' +
        'рџ“Љ **РђРЅР°Р»РёС‚РёРєР°** - РіСЂР°С„РёРєРё Рё РѕС‚С‡С‘С‚С‹:\n' +
        'вЂў Р“СЂР°С„РёРє РёР·РјРµРЅРµРЅРёСЏ РІРµСЃР°\n' +
        'вЂў РЎС‚Р°С‚РёСЃС‚РёРєР° С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
        'вЂў РћР±С‰РёР№ РѕС‚С‡С‘С‚ РїСЂРѕРіСЂРµСЃСЃР°\n\n' +
        'рџ’Ћ **РџРѕРґРїРёСЃРєР°** - РґРѕСЃС‚СѓРї Рє РїСЂРµРјРёСѓРј С„СѓРЅРєС†РёСЏРј',
        { parse_mode: 'Markdown', ...helpKeyboard }
      );
      return;
    }

    if (text === 'вљЎ Р§С‚Рѕ СѓРјРµРµС‚ РР-С‚СЂРµРЅРµСЂ?' || text.includes('Р§С‚Рѕ СѓРјРµРµС‚ РР-С‚СЂРµРЅРµСЂ')) {
      await bot.sendMessage(
        chatId,
        'вљЎ **Р§С‚Рѕ СѓРјРµРµС‚ РР-С‚СЂРµРЅРµСЂ**\n\n' +
        'рџЏ‹пёЏвЂЌв™‚пёЏ **РўСЂРµРЅРёСЂРѕРІРєРё:**\n' +
        'вЂў РЎРѕСЃС‚Р°РІР»РµРЅРёРµ РїРµСЂСЃРѕРЅР°Р»СЊРЅС‹С… РїСЂРѕРіСЂР°РјРј\n' +
        'вЂў РџРѕРґР±РѕСЂ СѓРїСЂР°Р¶РЅРµРЅРёР№ РїРѕРґ РІР°С€ СѓСЂРѕРІРµРЅСЊ\n' +
        'вЂў РЎРѕРІРµС‚С‹ РїРѕ С‚РµС…РЅРёРєРµ РІС‹РїРѕР»РЅРµРЅРёСЏ\n' +
        'вЂў РџР»Р°РЅРёСЂРѕРІР°РЅРёРµ РїРµСЂРёРѕРґРёР·Р°С†РёРё\n\n' +
        'рџҐ— **РџРёС‚Р°РЅРёРµ:**\n' +
        'вЂў Р Р°СЃС‡С‘С‚ РєР°Р»РѕСЂРёР№ Рё Р‘Р–РЈ\n' +
        'вЂў РЎРѕСЃС‚Р°РІР»РµРЅРёРµ СЂР°С†РёРѕРЅРѕРІ\n' +
        'вЂў РЎРѕРІРµС‚С‹ РїРѕ СЃРїРѕСЂС‚РёРІРЅРѕРјСѓ РїРёС‚Р°РЅРёСЋ\n' +
        'вЂў РђРЅР°Р»РёР· РґРёРµС‚ Рё РёС… СЌС„С„РµРєС‚РёРІРЅРѕСЃС‚Рё\n\n' +
        'рџЋЇ **Р¦РµР»Рё:**\n' +
        'вЂў РџРѕС…СѓРґРµРЅРёРµ Рё СЃСѓС€РєР°\n' +
        'вЂў РќР°Р±РѕСЂ РјС‹С€РµС‡РЅРѕР№ РјР°СЃСЃС‹\n' +
        'вЂў РЈРІРµР»РёС‡РµРЅРёРµ СЃРёР»С‹ Рё РІС‹РЅРѕСЃР»РёРІРѕСЃС‚Рё\n' +
        'вЂў Р РµР°Р±РёР»РёС‚Р°С†РёСЏ Рё РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ\n\n' +
        'рџ§Є **РќР°СѓС‡РЅС‹Р№ РїРѕРґС…РѕРґ:**\n' +
        'вЂў РђРЅР°Р»РёР· РёСЃСЃР»РµРґРѕРІР°РЅРёР№\n' +
        'вЂў РџСЂРѕРІРµСЂРєР° СЃРїРѕСЂС‚РёРІРЅС‹С… РґРѕР±Р°РІРѕРє\n' +
        'вЂў Р Р°Р·РІРµРЅС‡Р°РЅРёРµ РјРёС„РѕРІ\n' +
        'вЂў РџРµСЂСЃРѕРЅР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹Рµ СЂРµРєРѕРјРµРЅРґР°С†РёРё\n\n' +
        'рџ’Ў РџСЂРѕСЃС‚Рѕ Р·Р°РґР°РІР°Р№С‚Рµ Р»СЋР±С‹Рµ РІРѕРїСЂРѕСЃС‹ С‡РµСЂРµР· РєРЅРѕРїРєСѓ "рџ¤– РР-С‚СЂРµРЅРµСЂ"!',
        { parse_mode: 'Markdown', ...helpKeyboard }
      );
      return;
    }

    if (text === ' РђРЅР°Р»РёС‚РёРєР°') {
      await bot.sendMessage(
        chatId,
        'рџ“Љ РђРЅР°Р»РёС‚РёРєР° Рё СЃС‚Р°С‚РёСЃС‚РёРєР°\n\nР’С‹Р±РµСЂРёС‚Рµ С‚РёРї РѕС‚С‡РµС‚Р°, РєРѕС‚РѕСЂС‹Р№ С…РѕС‚РёС‚Рµ РїРѕСЃРјРѕС‚СЂРµС‚СЊ:',
        analyticsKeyboard
      );
      return;
    }

    if (text === 'рџ¤– РР-С‚СЂРµРЅРµСЂ') {
      // РџСЂРѕРІРµСЂСЏРµРј РІРѕР·РјРѕР¶РЅРѕСЃС‚СЊ РґРµР»Р°С‚СЊ Р·Р°РїСЂРѕСЃС‹
      const requestStatus = await canUserMakeRequest(dbUser.id);
      
      if (!requestStatus.canMake) {
        await bot.sendMessage(
          chatId,
          'рџ’Ћ РЈ РІР°СЃ Р·Р°РєРѕРЅС‡РёР»РёСЃСЊ Р·Р°РїСЂРѕСЃС‹ Рє РР-С‚СЂРµРЅРµСЂСѓ.\n\n' +
          'рџ†“ РќРѕРІС‹Рµ РїРѕР»СЊР·РѕРІР°С‚РµР»Рё РїРѕР»СѓС‡Р°СЋС‚ 7 Р±РµСЃРїР»Р°С‚РЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ\n' +
          'рџ’Є Р”Р»СЏ РЅРµРѕРіСЂР°РЅРёС‡РµРЅРЅРѕРіРѕ РґРѕСЃС‚СѓРїР° РѕС„РѕСЂРјРёС‚Рµ РїРѕРґРїРёСЃРєСѓ!',
          noSubscriptionKeyboard
        );
        return;
      }

      // РџРѕРєР°Р·С‹РІР°РµРј РёРЅС„РѕСЂРјР°С†РёСЋ Рѕ РґРѕСЃС‚СѓРїРЅС‹С… Р·Р°РїСЂРѕСЃР°С…
      let requestInfo = '';
      if (requestStatus.type === 'free') {
        requestInfo = `\n\nрџ†“ Р‘РµСЃРїР»Р°С‚РЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ РѕСЃС‚Р°Р»РѕСЃСЊ: ${requestStatus.remaining}/7`;
      } else if (requestStatus.type === 'subscription') {
        requestInfo = `\n\nрџ’Ћ Р—Р°РїСЂРѕСЃРѕРІ РїРѕ РїРѕРґРїРёСЃРєРµ: ${requestStatus.remaining}/${requestStatus.total}`;
      }

      // РђРєС‚РёРІРёСЂСѓРµРј СЂРµР¶РёРј РѕР±С‰РµРЅРёСЏ СЃ РР
      userStates.set(user.id, 'chatting_with_ai');
      
      // РџСЂРѕР±СѓРµРј РїРѕР»СѓС‡РёС‚СЊ РёРЅСЃС‚СЂСѓРєС†РёРё Coze
      try {
        const accessToken = await getUserAccessToken(dbUser.id);
        if (accessToken) {
          // РЈРґР°Р»СЏРµРј getCozeInstructions С‚Р°Рє РєР°Рє РѕРЅ Р±РѕР»СЊС€Рµ РЅРµ РЅСѓР¶РµРЅ
          // const instructions = await getCozeInstructions(accessToken);
          await bot.sendMessage(chatId, instructions.message + requestInfo, { parse_mode: 'Markdown' });
        } else {
          await bot.sendMessage(
            chatId,
            'рџ¤– *Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ РІ РР-С‚СЂРµРЅРµСЂ!*\n\n' +
            'РЇ РїРѕРјРѕРіСѓ РІР°Рј СЃ:\n' +
            'вЂў РЎРѕСЃС‚Р°РІР»РµРЅРёРµРј РїСЂРѕРіСЂР°РјРј С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
            'вЂў РЎРѕРІРµС‚Р°РјРё РїРѕ РїРёС‚Р°РЅРёСЋ\n' +
            'вЂў Р’РѕРїСЂРѕСЃР°РјРё Рѕ Р·РґРѕСЂРѕРІСЊРµ Рё С„РёС‚РЅРµСЃРµ\n\n' +
            'Р—Р°РґР°РІР°Р№С‚Рµ Р»СЋР±С‹Рµ РІРѕРїСЂРѕСЃС‹!' + requestInfo,
            { parse_mode: 'Markdown' }
          );
        }
      } catch (error) {
        await bot.sendMessage(
          chatId,
          'рџ¤– *Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ РІ РР-С‚СЂРµРЅРµСЂ!*\n\n' +
          'РЇ РїРѕРјРѕРіСѓ РІР°Рј СЃ:\n' +
          'вЂў РЎРѕСЃС‚Р°РІР»РµРЅРёРµРј РїСЂРѕРіСЂР°РјРј С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
          'вЂў РЎРѕРІРµС‚Р°РјРё РїРѕ РїРёС‚Р°РЅРёСЋ\n' +
          'вЂў Р’РѕРїСЂРѕСЃР°РјРё Рѕ Р·РґРѕСЂРѕРІСЊРµ Рё С„РёС‚РЅРµСЃРµ\n\n' +
          'Р—Р°РґР°РІР°Р№С‚Рµ Р»СЋР±С‹Рµ РІРѕРїСЂРѕСЃС‹!' + requestInfo,
          { parse_mode: 'Markdown' }
        );
      }
      return;
    }

    if (text === 'рџ§¬ РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹') {
      // РџСЂРѕРІРµСЂСЏРµРј РїРѕРґРїРёСЃРєСѓ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
      const subscription = await getActiveSubscription(dbUser.id);
      
      if (!subscription) {
        await bot.sendMessage(
          chatId,
          'рџ”’ **РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹ РґРѕСЃС‚СѓРїРЅС‹ С‚РѕР»СЊРєРѕ СЃ РїРѕРґРїРёСЃРєРѕР№**\n\n' +
          'рџ§¬ РЎРїРµС†РёР°Р»СЊРЅС‹Рµ РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹ РІРєР»СЋС‡Р°СЋС‚:\n' +
          'вЂў рџ”¬ Р“Р»СѓР±РѕРєРёР№ РЅР°СѓС‡РЅС‹Р№ Р°РЅР°Р»РёР·\n' +
          'вЂў рџЏ‹пёЏвЂЌв™‚пёЏ РџРµСЂСЃРѕРЅР°Р»СЊРЅС‹Рµ РїСЂРѕРіСЂР°РјРјС‹ С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
          'вЂў рџҐ— РРЅРґРёРІРёРґСѓР°Р»СЊРЅС‹Рµ РїР»Р°РЅС‹ РїРёС‚Р°РЅРёСЏ\n' +
          'вЂў рџ§Є РџСЂРѕС„РµСЃСЃРёРѕРЅР°Р»СЊРЅС‹Р№ Р°РЅР°Р»РёР· РґРѕР±Р°РІРѕРє\n\n' +
          'рџ’Ћ РћС„РѕСЂРјРёС‚Рµ РїРѕРґРїРёСЃРєСѓ РґР»СЏ РґРѕСЃС‚СѓРїР° РєРѕ РІСЃРµРј РІРѕР·РјРѕР¶РЅРѕСЃС‚СЏРј!',
          { parse_mode: 'Markdown', ...noSubscriptionKeyboard }
        );
        return;
      }
      
      await bot.sendMessage(
        chatId,
        'рџ§¬ **РЎРїРµС†РёР°Р»СЊРЅС‹Рµ РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹**\n\n' +
        'Р’С‹Р±РµСЂРёС‚Рµ РЅСѓР¶РЅС‹Р№ РёРЅСЃС‚СЂСѓРјРµРЅС‚:\n\n' +
        'рџ”¬ **Р“Р»СѓР±РѕРєРёР№ Р°РЅР°Р»РёР·** - Р”РµС‚Р°Р»СЊРЅРѕРµ РЅР°СѓС‡РЅРѕРµ РёСЃСЃР»РµРґРѕРІР°РЅРёРµ Р»СЋР±РѕР№ С‚РµРјС‹\n' +
        'рџЏ‹пёЏвЂЌв™‚пёЏ **РџР»Р°РЅ С‚СЂРµРЅРёСЂРѕРІРѕРє** - РџРµСЂСЃРѕРЅР°Р»СЊРЅР°СЏ РїСЂРѕРіСЂР°РјРјР° РїРѕРґ РІР°С€Рё С†РµР»Рё\n' +
        'рџҐ— **РџР»Р°РЅ РїРёС‚Р°РЅРёСЏ** - РРЅРґРёРІРёРґСѓР°Р»СЊРЅС‹Р№ СЂР°С†РёРѕРЅ СЃ СЂР°СЃС‡РµС‚РѕРј РљР‘Р–РЈ\n' +
        'рџ§Є **РђРЅР°Р»РёР· РґРѕР±Р°РІРѕРє** - Р­РєСЃРїРµСЂС‚РЅР°СЏ РѕС†РµРЅРєР° СЃРѕСЃС‚Р°РІР° Рё СЌС„С„РµРєС‚РёРІРЅРѕСЃС‚Рё',
        { parse_mode: 'Markdown', ...aiToolsKeyboard }
      );
      return;
    }

    if (text === 'рџ”„ РќРѕРІС‹Р№ РґРёР°Р»РѕРі') {
      // РЎР±СЂР°СЃС‹РІР°РµРј СЃРѕСЃС‚РѕСЏРЅРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
      userStates.delete(user.id);
      
      // РћС‡РёС‰Р°РµРј РєРѕРЅС‚РµРєСЃС‚ workflow
      userWorkflowContext.delete(user.id);
      console.log(`рџ—‘пёЏ РћС‡РёС‰РµРЅ РєРѕРЅС‚РµРєСЃС‚ workflow РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${user.id}`);
      
      // РћС‡РёС‰Р°РµРј conversation_id РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
      clearConversation(dbUser.id);
      
      await bot.sendMessage(
        chatId,
        'рџ”„ Р”РёР°Р»РѕРі СЃР±СЂРѕС€РµРЅ!\n\nРўРµРїРµСЂСЊ РР-С‚СЂРµРЅРµСЂ РЅРµ РїРѕРјРЅРёС‚ РІР°С€Сѓ РїСЂРµРґС‹РґСѓС‰СѓСЋ РїРµСЂРµРїРёСЃРєСѓ Рё РєРѕРЅС‚РµРєСЃС‚ Р°РЅР°Р»РёР·РѕРІ. РњРѕР¶РµС‚Рµ РЅР°С‡Р°С‚СЊ РЅРѕРІС‹Р№ СЂР°Р·РіРѕРІРѕСЂ.',
        mainKeyboard
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚С‡РёРєРё Р°РЅР°Р»РёС‚РёРєРё
    if (text === 'рџ“€ Р“СЂР°С„РёРє РІРµСЃР°') {
      await handleWeightChart(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџЏ‹пёЏвЂЌв™‚пёЏ Р“СЂР°С„РёРє С‚СЂРµРЅРёСЂРѕРІРѕРє') {
      await handleWorkoutChart(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџ“Љ РћР±С‰РёР№ РѕС‚С‡РµС‚') {
      await handleProgressReport(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџЏ† Р”РѕСЃС‚РёР¶РµРЅРёСЏ') {
      await handleAchievements(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџ“€ РџСЂРѕРіСЂРµСЃСЃ' || text.includes('РџСЂРѕРіСЂРµСЃСЃ')) {
      await handleDetailedProgressReport(bot, chatId, user.id);
      return;
    }

    // === РћР‘Р РђР‘РћРўР§РРљР РљРћРњРђРќР” РЈРџР РђР’Р›Р•РќРРЇ Р”РђРќРќР«РњР ===
    
    // Р—Р°РїРёСЃСЊ РІРµСЃР°
    if (text === 'вљ–пёЏ Р—Р°РїРёСЃР°С‚СЊ РІРµСЃ') {
      userStates.set(user.id, { action: 'waiting_weight' });
      await bot.sendMessage(
        chatId,
        'вљ–пёЏ **Р—Р°РїРёСЃСЊ РІРµСЃР°**\n\n' +
        'Р’РІРµРґРёС‚Рµ РІР°С€ С‚РµРєСѓС‰РёР№ РІРµСЃ РІ РєРёР»РѕРіСЂР°РјРјР°С….\n\n' +
        'рџ’Ў РџСЂРёРјРµСЂС‹:\n' +
        'вЂў `75.5`\n' +
        'вЂў `68`\n' +
        'вЂў `82.3`',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // РЈСЃС‚Р°РЅРѕРІРєР° С†РµР»Рё
    if (text === 'рџЋЇ РЈСЃС‚Р°РЅРѕРІРёС‚СЊ С†РµР»СЊ') {
      await bot.sendMessage(
        chatId,
        'рџЋЇ **РЈСЃС‚Р°РЅРѕРІРєР° С†РµР»Рё**\n\n' +
        'Р’С‹Р±РµСЂРёС‚Рµ С‚РёРї С†РµР»Рё:',
        { parse_mode: 'Markdown', ...goalTypesKeyboard }
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° С‚РёРїРѕРІ С†РµР»РµР№
    if (['рџЏ‹пёЏвЂЌв™‚пёЏ РќР°Р±СЂР°С‚СЊ РјС‹С€РµС‡РЅСѓСЋ РјР°СЃСЃСѓ', 'вљ–пёЏ РЎРЅРёР·РёС‚СЊ РІРµСЃ', 'рџ’Є РЈРІРµР»РёС‡РёС‚СЊ СЃРёР»Сѓ', 'рџЏѓвЂЌв™‚пёЏ РЈР»СѓС‡С€РёС‚СЊ РІС‹РЅРѕСЃР»РёРІРѕСЃС‚СЊ', 'рџ¤ёвЂЌв™‚пёЏ РџРѕРІС‹СЃРёС‚СЊ РіРёР±РєРѕСЃС‚СЊ', 'вљЎ РћР±С‰Р°СЏ С„РёР·РїРѕРґРіРѕС‚РѕРІРєР°'].includes(text)) {
      const goalType = text.split(' ').slice(1).join(' ').toLowerCase();
      userStates.set(user.id, { action: 'waiting_goal_value', goalType: goalType });
      
      let prompt = 'рџЋЇ **РЈСЃС‚Р°РЅРѕРІРєР° С†РµР»Рё: ' + text + '**\n\n';
      if (text === 'вљ–пёЏ РЎРЅРёР·РёС‚СЊ РІРµСЃ') {
        prompt += 'Р’РІРµРґРёС‚Рµ Р¶РµР»Р°РµРјС‹Р№ РІРµСЃ РІ РєРёР»РѕРіСЂР°РјРјР°С…:\n\nрџ’Ў РџСЂРёРјРµСЂ: `70`';
      } else {
        prompt += 'РћРїРёС€РёС‚Рµ РІР°С€Сѓ С†РµР»СЊ РїРѕРґСЂРѕР±РЅРѕ:\n\nрџ’Ў РџСЂРёРјРµСЂС‹:\nвЂў `РЈРІРµР»РёС‡РёС‚СЊ Р¶РёРј Р»РµР¶Р° РґРѕ 100 РєРі`\nвЂў `РџСЂРѕР±РµР¶Р°С‚СЊ 10 РєРј Р·Р° 45 РјРёРЅСѓС‚`\nвЂў `РќР°Р±СЂР°С‚СЊ 5 РєРі РјС‹С€РµС‡РЅРѕР№ РјР°СЃСЃС‹`';
      }
      
      await bot.sendMessage(chatId, prompt, { parse_mode: 'Markdown' });
      return;
    }

    // Р”РѕР±Р°РІР»РµРЅРёРµ С‚СЂРµРЅРёСЂРѕРІРєРё
    if (text === 'рџЏ‹пёЏвЂЌв™‚пёЏ Р”РѕР±Р°РІРёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєСѓ') {
      await bot.sendMessage(
        chatId,
        'рџЏ‹пёЏвЂЌв™‚пёЏ **Р”РѕР±Р°РІР»РµРЅРёРµ С‚СЂРµРЅРёСЂРѕРІРєРё**\n\n' +
        'Р’С‹Р±РµСЂРёС‚Рµ С‚РёРї С‚СЂРµРЅРёСЂРѕРІРєРё:',
        { parse_mode: 'Markdown', ...workoutTypesKeyboard }
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° С‚РёРїРѕРІ С‚СЂРµРЅРёСЂРѕРІРѕРє
    if (text === 'рџ’Є РЎРёР»РѕРІР°СЏ') {
      // РРЅРёС†РёР°Р»РёР·РёСЂСѓРµРј РЅРѕРІСѓСЋ РґРµС‚Р°Р»СЊРЅСѓСЋ С‚СЂРµРЅРёСЂРѕРІРєСѓ
      activeWorkouts.set(user.id, {
        type: 'strength',
        exercises: [],
        startTime: new Date(),
        moodBefore: 3 // РќРµР№С‚СЂР°Р»СЊРЅРѕРµ РЅР°СЃС‚СЂРѕРµРЅРёРµ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ
      });
      
      await bot.sendMessage(
        chatId,
        'рџ’Є **РЎРёР»РѕРІР°СЏ С‚СЂРµРЅРёСЂРѕРІРєР° РЅР°С‡Р°С‚Р°!**\n\n' +
        'пїЅпёЏвЂЌв™‚пёЏ Р”РѕР±Р°РІР»СЏР№С‚Рµ СѓРїСЂР°Р¶РЅРµРЅРёСЏ РїРѕ РјРµСЂРµ РёС… РІС‹РїРѕР»РЅРµРЅРёСЏ.\n' +
        'Р”Р»СЏ РєР°Р¶РґРѕРіРѕ СѓРїСЂР°Р¶РЅРµРЅРёСЏ РІС‹ СЃРјРѕР¶РµС‚Рµ Р·Р°РїРёСЃР°С‚СЊ РєРѕР»РёС‡РµСЃС‚РІРѕ РїРѕРґС…РѕРґРѕРІ, РІРµСЃ РѕС‚СЏРіРѕС‰РµРЅРёСЏ, РїРѕРІС‚РѕСЂРµРЅРёСЏ Рё РѕСЃС‚Р°РІРёС‚СЊ РєРѕРјРјРµРЅС‚Р°СЂРёРё.',
        { parse_mode: 'Markdown', ...detailedWorkoutKeyboard }
      );
      
      return;
    }

    if (['рџЏѓвЂЌв™‚пёЏ РљР°СЂРґРёРѕ', 'рџ§вЂЌв™‚пёЏ Р™РѕРіР°/Р Р°СЃС‚СЏР¶РєР°', 'рџЏЉвЂЌв™‚пёЏ РџР»Р°РІР°РЅРёРµ', 'рџљґвЂЌв™‚пёЏ Р’РµР»РѕСЃРёРїРµРґ', 'рџҐЉ Р•РґРёРЅРѕР±РѕСЂСЃС‚РІР°', 'вљЅ РЎРїРѕСЂС‚РёРІРЅС‹Рµ РёРіСЂС‹', 'рџЏѓвЂЌв™‚пёЏ Р”СЂСѓРіРѕРµ'].includes(text)) {
      const workoutType = text.split(' ').slice(1).join(' ');
      userStates.set(user.id, { action: 'waiting_workout_duration', workoutType: workoutType });
      
      await bot.sendMessage(
        chatId,
        'вЏ±пёЏ **Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєРё**\n\n' +
        `РўРёРї: ${text}\n\n` +
        'Р’РІРµРґРёС‚Рµ РїСЂРѕРґРѕР»Р¶РёС‚РµР»СЊРЅРѕСЃС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєРё РІ РјРёРЅСѓС‚Р°С…:\n\n' +
        'рџ’Ў РџСЂРёРјРµСЂС‹:\n' +
        'вЂў `45` (45 РјРёРЅСѓС‚)\n' +
        'вЂў `90` (1.5 С‡Р°СЃР°)\n' +
        'вЂў `30` (30 РјРёРЅСѓС‚)',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // РџСЂРѕСЃРјРѕС‚СЂ Р·Р°РїРёСЃРµР№
    if (text === 'рџ“Љ РњРѕРё Р·Р°РїРёСЃРё') {
      await bot.sendMessage(
        chatId,
        'рџ“Љ **РњРѕРё Р·Р°РїРёСЃРё**\n\n' +
        'Р§С‚Рѕ РІС‹ С…РѕС‚РёС‚Рµ РїРѕСЃРјРѕС‚СЂРµС‚СЊ?',
        { parse_mode: 'Markdown', ...viewRecordsKeyboard }
      );
      return;
    }

    // РЈРїСЂР°РІР»РµРЅРёРµ Р·Р°РїРёСЃСЏРјРё
    if (text === 'рџ”§ РР·РјРµРЅРёС‚СЊ РґР°РЅРЅС‹Рµ') {
      await bot.sendMessage(
        chatId,
        'рџ”§ **РР·РјРµРЅРµРЅРёРµ РґР°РЅРЅС‹С…**\n\n' +
        'Р§С‚Рѕ РІС‹ С…РѕС‚РёС‚Рµ РёР·РјРµРЅРёС‚СЊ?',
        { parse_mode: 'Markdown', ...manageRecordsKeyboard }
      );
      return;
    }

    // РЈРґР°Р»РµРЅРёРµ Р·Р°РїРёСЃРµР№
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ Р·Р°РїРёСЃРё') {
      await bot.sendMessage(
        chatId,
        'рџ—‘пёЏ **РЈРґР°Р»РµРЅРёРµ Р·Р°РїРёСЃРµР№**\n\n' +
        'вљ пёЏ Р‘СѓРґСЊС‚Рµ РѕСЃС‚РѕСЂРѕР¶РЅС‹! РЈРґР°Р»РµРЅРЅС‹Рµ РґР°РЅРЅС‹Рµ РІРѕСЃСЃС‚Р°РЅРѕРІРёС‚СЊ РЅРµР»СЊР·СЏ.\n\n' +
        'Р§С‚Рѕ РІС‹ С…РѕС‚РёС‚Рµ СѓРґР°Р»РёС‚СЊ?',
        { parse_mode: 'Markdown', ...deleteRecordsKeyboard }
      );
      return;
    }

    // === РћР‘Р РђР‘РћРўР§РРљР РЈР”РђР›Р•РќРРЇ Р—РђРџРРЎР•Р™ ===
    
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РїРѕСЃР»РµРґРЅСЋСЋ С‚СЂРµРЅРёСЂРѕРІРєСѓ') {
      await handleDeleteLastWorkout(bot, chatId, dbUser.id);
      return;
    }
    
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РїРѕСЃР»РµРґРЅРёР№ РІРµСЃ') {
      await handleDeleteLastWeight(bot, chatId, dbUser.id);
      return;
    }
    
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РІСЃРµ С‚СЂРµРЅРёСЂРѕРІРєРё') {
      await confirmDeleteAllWorkouts(bot, chatId, dbUser.id);
      return;
    }
    
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РІСЃРµ Р·Р°РїРёСЃРё РІРµСЃР°') {
      await confirmDeleteAllWeights(bot, chatId, dbUser.id);
      return;
    }

    // РќРѕРІС‹Рµ РєРЅРѕРїРєРё СѓРґР°Р»РµРЅРёСЏ РёР· deleteRecordsKeyboard
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєРё') {
      await confirmDeleteAllWorkouts(bot, chatId, dbUser.id);
      return;
    }
    
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РІРµСЃР°') {
      await confirmDeleteAllWeights(bot, chatId, dbUser.id);
      return;
    }
    
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ С†РµР»Рё') {
      await confirmDeleteAllGoals(bot, chatId, dbUser.id);
      return;
    }
    
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РІСЃС‘') {
      await confirmDeleteAllData(bot, chatId, dbUser.id);
      return;
    }

    // === РћР‘Р РђР‘РћРўР§РРљР РџР РћРЎРњРћРўР Рђ Р—РђРџРРЎР•Р™ ===
    
    if (text === 'вљ–пёЏ РСЃС‚РѕСЂРёСЏ РІРµСЃР°') {
      await showWeightHistory(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџЋЇ РњРѕРё С†РµР»Рё') {
      await showUserGoals(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџЏ‹пёЏвЂЌв™‚пёЏ РСЃС‚РѕСЂРёСЏ С‚СЂРµРЅРёСЂРѕРІРѕРє') {
      await showWorkoutHistory(bot, chatId, dbUser.id);
      return;
    }

    if (text === 'рџ“€ РЎС‚Р°С‚РёСЃС‚РёРєР°') {
      await showUserStatistics(bot, chatId, dbUser.id);
      return;
    }

    // === РћР‘Р РђР‘РћРўР§РРљР РР—РњР•РќР•РќРРЇ Р—РђРџРРЎР•Р™ ===
    
    if (text === 'вњЏпёЏ РР·РјРµРЅРёС‚СЊ РїРѕСЃР»РµРґРЅРёР№ РІРµСЃ') {
      const lastWeight = await getLastWeightRecord(dbUser.id);
      if (!lastWeight) {
        await bot.sendMessage(chatId, 'вќЊ РЈ РІР°СЃ РЅРµС‚ Р·Р°РїРёСЃРµР№ РІРµСЃР° РґР»СЏ РёР·РјРµРЅРµРЅРёСЏ.');
        return;
      }
      
      userStates.set(user.id, { action: 'waiting_weight_update' });
      await bot.sendMessage(
        chatId,
        `вњЏпёЏ **РР·РјРµРЅРµРЅРёРµ РїРѕСЃР»РµРґРЅРµР№ Р·Р°РїРёСЃРё РІРµСЃР°**\n\n` +
        `РўРµРєСѓС‰РёР№ РІРµСЃ: **${lastWeight.value} ${lastWeight.unit}**\n` +
        `Р”Р°С‚Р° Р·Р°РїРёСЃРё: ${new Date(lastWeight.recorded_at).toLocaleDateString('ru-RU')}\n\n` +
        `Р’РІРµРґРёС‚Рµ РЅРѕРІС‹Р№ РІРµСЃ РІ РєРёР»РѕРіСЂР°РјРјР°С…:`,
        { parse_mode: 'Markdown' }
      );
      return;
    }

    if (text === 'вњЏпёЏ РР·РјРµРЅРёС‚СЊ С†РµР»СЊ') {
      await bot.sendMessage(
        chatId,
        'вњЏпёЏ **РР·РјРµРЅРµРЅРёРµ С†РµР»Рё**\n\n' +
        'Р’С‹Р±РµСЂРёС‚Рµ С‚РёРї С†РµР»Рё РґР»СЏ РёР·РјРµРЅРµРЅРёСЏ:',
        { parse_mode: 'Markdown', ...goalTypesKeyboard }
      );
      return;
    }

    if (text === 'вњЏпёЏ РР·РјРµРЅРёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєСѓ') {
      const lastWorkout = await getLastWorkoutRecord(dbUser.id);
      if (!lastWorkout) {
        await bot.sendMessage(chatId, 'вќЊ РЈ РІР°СЃ РЅРµС‚ Р·Р°РїРёСЃРµР№ С‚СЂРµРЅРёСЂРѕРІРѕРє РґР»СЏ РёР·РјРµРЅРµРЅРёСЏ.');
        return;
      }
      
      userStates.set(user.id, { action: 'waiting_workout_update' });
      await bot.sendMessage(
        chatId,
        `вњЏпёЏ **РР·РјРµРЅРµРЅРёРµ РїРѕСЃР»РµРґРЅРµР№ С‚СЂРµРЅРёСЂРѕРІРєРё**\n\n` +
        `РўРёРї: **${lastWorkout.workout_type}**\n` +
        `Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ: **${lastWorkout.duration_minutes} РјРёРЅ**\n` +
        `РљР°Р»РѕСЂРёРё: **${lastWorkout.calories_burned || 0}**\n` +
        `Р”Р°С‚Р°: ${new Date(lastWorkout.workout_date).toLocaleDateString('ru-RU')}\n\n` +
        `Р’С‹Р±РµСЂРёС‚Рµ РЅРѕРІС‹Р№ С‚РёРї С‚СЂРµРЅРёСЂРѕРІРєРё:`,
        { parse_mode: 'Markdown', ...workoutTypesKeyboard }
      );
      return;
    }

    // === РћР‘Р РђР‘РћРўР§РРљР РЈР”РђР›Р•РќРРЇ Р—РђРџРРЎР•Р™ ===
    
    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ РїРѕСЃР»РµРґРЅРёР№ РІРµСЃ') {
      const lastWeight = await getLastWeightRecord(dbUser.id);
      if (!lastWeight) {
        await bot.sendMessage(chatId, 'вќЊ РЈ РІР°СЃ РЅРµС‚ Р·Р°РїРёСЃРµР№ РІРµСЃР° РґР»СЏ СѓРґР°Р»РµРЅРёСЏ.');
        return;
      }
      
      const deleted = await deleteLastWeightRecord(dbUser.id);
      if (deleted) {
        await bot.sendMessage(
          chatId,
          `вњ… **Р—Р°РїРёСЃСЊ РІРµСЃР° СѓРґР°Р»РµРЅР°**\n\n` +
          `РЈРґР°Р»РµРЅ РІРµСЃ: **${lastWeight.value} ${lastWeight.unit}**\n` +
          `Р”Р°С‚Р°: ${new Date(lastWeight.recorded_at).toLocaleDateString('ru-RU')}`,
          { parse_mode: 'Markdown', ...userDataKeyboard }
        );
      } else {
        await bot.sendMessage(chatId, 'вќЊ РћС€РёР±РєР° РїСЂРё СѓРґР°Р»РµРЅРёРё Р·Р°РїРёСЃРё РІРµСЃР°.');
      }
      return;
    }

    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ С†РµР»СЊ') {
      await bot.sendMessage(
        chatId,
        'рџ—‘пёЏ **РЈРґР°Р»РµРЅРёРµ С†РµР»Рё**\n\n' +
        'Р’С‹Р±РµСЂРёС‚Рµ С‚РёРї С†РµР»Рё РґР»СЏ СѓРґР°Р»РµРЅРёСЏ:',
        { parse_mode: 'Markdown', ...goalTypesKeyboard }
      );
      userStates.set(user.id, { action: 'delete_goal' });
      return;
    }

    if (text === 'рџ—‘пёЏ РЈРґР°Р»РёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєСѓ') {
      const lastWorkout = await getLastWorkoutRecord(dbUser.id);
      if (!lastWorkout) {
        await bot.sendMessage(chatId, 'вќЊ РЈ РІР°СЃ РЅРµС‚ Р·Р°РїРёСЃРµР№ С‚СЂРµРЅРёСЂРѕРІРѕРє РґР»СЏ СѓРґР°Р»РµРЅРёСЏ.');
        return;
      }
      
      const deleted = await deleteLastWorkoutRecord(dbUser.id);
      if (deleted) {
        await bot.sendMessage(
          chatId,
          `вњ… **РўСЂРµРЅРёСЂРѕРІРєР° СѓРґР°Р»РµРЅР°**\n\n` +
          `РўРёРї: **${lastWorkout.workout_type}**\n` +
          `Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ: **${lastWorkout.duration_minutes} РјРёРЅ**\n` +
          `Р”Р°С‚Р°: ${new Date(lastWorkout.workout_date).toLocaleDateString('ru-RU')}`,
          { parse_mode: 'Markdown', ...userDataKeyboard }
        );
      } else {
        await bot.sendMessage(chatId, 'вќЊ РћС€РёР±РєР° РїСЂРё СѓРґР°Р»РµРЅРёРё С‚СЂРµРЅРёСЂРѕРІРєРё.');
      }
      return;
    }

    if (text === 'рџ—‘пёЏ РћС‡РёСЃС‚РёС‚СЊ РІСЃС‘') {
      userStates.set(user.id, { action: 'confirm_clear_all' });
      await bot.sendMessage(
        chatId,
        'вљ пёЏ **Р’РќРРњРђРќРР•!**\n\n' +
        'Р’С‹ СЃРѕР±РёСЂР°РµС‚РµСЃСЊ СѓРґР°Р»РёС‚СЊ Р’РЎР• СЃРІРѕРё РґР°РЅРЅС‹Рµ:\n' +
        'вЂў Р—Р°РїРёСЃРё РІРµСЃР°\n' +
        'вЂў Р’СЃРµ С†РµР»Рё\n' +
        'вЂў РСЃС‚РѕСЂРёСЋ С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
        'вЂў Р”РѕСЃС‚РёР¶РµРЅРёСЏ\n\n' +
        'вќ— Р­С‚Рѕ РґРµР№СЃС‚РІРёРµ РЅРµР»СЊР·СЏ РѕС‚РјРµРЅРёС‚СЊ!\n\n' +
        'Р’РІРµРґРёС‚Рµ `РЈР”РђР›РРўР¬ Р’РЎРЃ` РґР»СЏ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ РёР»Рё Р»СЋР±РѕР№ РґСЂСѓРіРѕР№ С‚РµРєСЃС‚ РґР»СЏ РѕС‚РјРµРЅС‹.',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° РєРЅРѕРїРєРё "РќР°Р·Р°Рґ" РґР»СЏ РїРѕРґРјРµРЅСЋ
    if (text === 'в¬…пёЏ РќР°Р·Р°Рґ') {
      const state = userStates.get(user.id);
      if (state && state.action === 'delete_goal') {
        userStates.delete(user.id);
      }
      await bot.sendMessage(
        chatId,
        'рџЋЇ **РЈРїСЂР°РІР»РµРЅРёРµ РґР°РЅРЅС‹РјРё**\n\nР’С‹Р±РµСЂРёС‚Рµ РґРµР№СЃС‚РІРёРµ:',
        { parse_mode: 'Markdown', ...userDataKeyboard }
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚С‡РёРєРё РєРѕРјР°РЅРґ РёР· РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚РѕРІ
    if (text.includes('/deepresearch')) {
      // РџСЂРѕРІРµСЂСЏРµРј РїРѕРґРїРёСЃРєСѓ
      const subscription = await getActiveSubscription(dbUser.id);
      if (!subscription) {
        await bot.sendMessage(chatId, 'рџ”’ Р­С‚Р° С„СѓРЅРєС†РёСЏ РґРѕСЃС‚СѓРїРЅР° С‚РѕР»СЊРєРѕ СЃ РїРѕРґРїРёСЃРєРѕР№!', noSubscriptionKeyboard);
        return;
      }
      
      userStates.set(user.id, 'waiting_for_research_topic');
      await bot.sendMessage(chatId, 
        'рџ”¬ **Р“Р»СѓР±РѕРєРѕРµ РёСЃСЃР»РµРґРѕРІР°РЅРёРµ**\n\n' +
        'РЈРєР°Р¶РёС‚Рµ С‚РµРјСѓ РґР»СЏ РґРµС‚Р°Р»СЊРЅРѕРіРѕ РЅР°СѓС‡РЅРѕРіРѕ Р°РЅР°Р»РёР·Р°.\n\n' +
        'рџ’Ў **РџСЂРёРјРµСЂС‹ С‚РµРј:**\n' +
        'вЂў Р’Р»РёСЏРЅРёРµ РєСЂРµР°С‚РёРЅР° РЅР° СЃРёР»РѕРІС‹Рµ РїРѕРєР°Р·Р°С‚РµР»Рё\n' +
        'вЂў Р“РµРЅРґРµСЂРЅС‹Рµ СЂР°Р·Р»РёС‡РёСЏ РІ СЃРёР»РѕРІРѕРј С‚СЂРµРЅРёРЅРіРµ\n' +
        'вЂў РћРїС‚РёРјР°Р»СЊРЅРѕРµ РІСЂРµРјСЏ РґР»СЏ РєР°СЂРґРёРѕ Рё СЃРёР»РѕРІС‹С…\n' +
        'вЂў РџРµСЂРёРѕРґРёР·Р°С†РёСЏ С‚СЂРµРЅРёСЂРѕРІРѕРє РґР»СЏ РЅР°Р±РѕСЂР° РјР°СЃСЃС‹\n' +
        'вЂў РЎРїРѕСЂС‚РёРІРЅРѕРµ РїРёС‚Р°РЅРёРµ РґР»СЏ РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёСЏ\n\n' +
        'рџ“ќ РќР°РїРёС€РёС‚Рµ РІР°С€Сѓ С‚РµРјСѓ:'
      );
      return;
    }

    if (text.includes('/training_program')) {
      const subscription = await getActiveSubscription(dbUser.id);
      if (!subscription) {
        await bot.sendMessage(chatId, 'рџ”’ Р­С‚Р° С„СѓРЅРєС†РёСЏ РґРѕСЃС‚СѓРїРЅР° С‚РѕР»СЊРєРѕ СЃ РїРѕРґРїРёСЃРєРѕР№!', noSubscriptionKeyboard);
        return;
      }
      
      userStates.set(user.id, 'waiting_for_training_request');
      await bot.sendMessage(chatId, 
        'рџЏ‹пёЏвЂЌв™‚пёЏ **РЎРѕР·РґР°РЅРёРµ С‚СЂРµРЅРёСЂРѕРІРѕС‡РЅРѕР№ РїСЂРѕРіСЂР°РјРјС‹**\n\n' +
        'Р Р°СЃСЃРєР°Р¶РёС‚Рµ РїРѕРґСЂРѕР±РЅРѕ Рѕ РІР°С€РёС… С†РµР»СЏС… Рё СѓСЃР»РѕРІРёСЏС… С‚СЂРµРЅРёСЂРѕРІРѕРє:\n\n' +
        'рџ“‹ **РЈРєР°Р¶РёС‚Рµ:**\n' +
        'вЂў Р¦РµР»СЊ С‚СЂРµРЅРёСЂРѕРІРѕРє (РїРѕС…СѓРґРµРЅРёРµ, РЅР°Р±РѕСЂ РјР°СЃСЃС‹, СЃРёР»Р°, РІС‹РЅРѕСЃР»РёРІРѕСЃС‚СЊ)\n' +
        'вЂў РЈСЂРѕРІРµРЅСЊ РїРѕРґРіРѕС‚РѕРІРєРё (РЅРѕРІРёС‡РѕРє, СЃСЂРµРґРЅРёР№, РїСЂРѕРґРІРёРЅСѓС‚С‹Р№)\n' +
        'вЂў РЎРєРѕР»СЊРєРѕ РґРЅРµР№ РІ РЅРµРґРµР»СЋ РіРѕС‚РѕРІС‹ С‚СЂРµРЅРёСЂРѕРІР°С‚СЊСЃСЏ\n' +
        'вЂў Р”РѕСЃС‚СѓРїРЅРѕРµ РІСЂРµРјСЏ РЅР° С‚СЂРµРЅРёСЂРѕРІРєСѓ\n' +
        'вЂў Р”РѕСЃС‚СѓРїРЅРѕРµ РѕР±РѕСЂСѓРґРѕРІР°РЅРёРµ (Р·Р°Р», РґРѕРј, РєР°РєРёРµ СЃРЅР°СЂСЏРґС‹)\n' +
        'вЂў РћРіСЂР°РЅРёС‡РµРЅРёСЏ РїРѕ Р·РґРѕСЂРѕРІСЊСЋ (РµСЃР»Рё РµСЃС‚СЊ)\n\n' +
        'рџ“ќ РћРїРёС€РёС‚Рµ РІР°С€Рё С‚СЂРµР±РѕРІР°РЅРёСЏ:'
      );
      return;
    }

    if (text.includes('/nutrition_plan')) {
      const subscription = await getActiveSubscription(dbUser.id);
      if (!subscription) {
        await bot.sendMessage(chatId, 'рџ”’ Р­С‚Р° С„СѓРЅРєС†РёСЏ РґРѕСЃС‚СѓРїРЅР° С‚РѕР»СЊРєРѕ СЃ РїРѕРґРїРёСЃРєРѕР№!', noSubscriptionKeyboard);
        return;
      }
      
      userStates.set(user.id, 'waiting_for_nutrition_request');
      await bot.sendMessage(chatId, 
        'рџҐ— **РЎРѕР·РґР°РЅРёРµ РїР»Р°РЅР° РїРёС‚Р°РЅРёСЏ**\n\n' +
        'Р”Р»СЏ СЃРѕСЃС‚Р°РІР»РµРЅРёСЏ РїРµСЂСЃРѕРЅР°Р»СЊРЅРѕРіРѕ РїР»Р°РЅР° РїРёС‚Р°РЅРёСЏ СѓРєР°Р¶РёС‚Рµ:\n\n' +
        'рџ“Љ **РћСЃРЅРѕРІРЅС‹Рµ РґР°РЅРЅС‹Рµ:**\n' +
        'вЂў Р¦РµР»СЊ (РїРѕС…СѓРґРµРЅРёРµ, РЅР°Р±РѕСЂ РјР°СЃСЃС‹, РїРѕРґРґРµСЂР¶Р°РЅРёРµ РІРµСЃР°)\n' +
        'вЂў РџРѕР», РІРѕР·СЂР°СЃС‚, СЂРѕСЃС‚, С‚РµРєСѓС‰РёР№ РІРµСЃ\n' +
        'вЂў РЈСЂРѕРІРµРЅСЊ С„РёР·РёС‡РµСЃРєРѕР№ Р°РєС‚РёРІРЅРѕСЃС‚Рё\n' +
        'вЂў РЎРєРѕР»СЊРєРѕ РїСЂРёРµРјРѕРІ РїРёС‰Рё РїСЂРµРґРїРѕС‡РёС‚Р°РµС‚Рµ\n\n' +
        'рџЌЅпёЏ **РџСЂРµРґРїРѕС‡С‚РµРЅРёСЏ:**\n' +
        'вЂў РђР»Р»РµСЂРіРёРё РёР»Рё РЅРµРїРµСЂРµРЅРѕСЃРёРјРѕСЃС‚СЊ РїСЂРѕРґСѓРєС‚РѕРІ\n' +
        'вЂў РћСЃРѕР±С‹Р№ С‚РёРї РїРёС‚Р°РЅРёСЏ (РІРµРіР°РЅ, РєРµС‚Рѕ, Р±РµР· РіР»СЋС‚РµРЅР° Рё С‚.Рґ.)\n' +
        'вЂў РќРµР»СЋР±РёРјС‹Рµ РїСЂРѕРґСѓРєС‚С‹\n' +
        'вЂў Р‘СЋРґР¶РµС‚ РЅР° РїРёС‚Р°РЅРёРµ\n\n' +
        'рџ“ќ Р Р°СЃСЃРєР°Р¶РёС‚Рµ Рѕ СЃРµР±Рµ:'
      );
      return;
    }

    if (text.includes('/composition_analysis')) {
      const subscription = await getActiveSubscription(dbUser.id);
      if (!subscription) {
        await bot.sendMessage(chatId, 'рџ”’ Р­С‚Р° С„СѓРЅРєС†РёСЏ РґРѕСЃС‚СѓРїРЅР° С‚РѕР»СЊРєРѕ СЃ РїРѕРґРїРёСЃРєРѕР№!', noSubscriptionKeyboard);
        return;
      }
      
      userStates.set(user.id, 'waiting_for_supplement_info');
      await bot.sendMessage(chatId, 
        'рџ§Є **РђРЅР°Р»РёР· СЃРѕСЃС‚Р°РІР° РґРѕР±Р°РІРєРё**\n\n' +
        'РћС‚РїСЂР°РІСЊС‚Рµ РёРЅС„РѕСЂРјР°С†РёСЋ Рѕ РґРѕР±Р°РІРєРµ РґР»СЏ РґРµС‚Р°Р»СЊРЅРѕРіРѕ Р°РЅР°Р»РёР·Р°:\n\n' +
        'рџ“· **РЎРїРѕСЃРѕР±С‹ РѕС‚РїСЂР°РІРєРё:**\n' +
        'вЂў Р¤РѕС‚Рѕ СЌС‚РёРєРµС‚РєРё СЃ СЃРѕСЃС‚Р°РІРѕРј\n' +
        'вЂў РќР°Р·РІР°РЅРёРµ РґРѕР±Р°РІРєРё Рё РїСЂРѕРёР·РІРѕРґРёС‚РµР»СЏ\n' +
        'вЂў РЎРїРёСЃРѕРє РёРЅРіСЂРµРґРёРµРЅС‚РѕРІ СЃ РґРѕР·РёСЂРѕРІРєР°РјРё\n\n' +
        'рџ”Ќ **РЇ РїСЂРѕР°РЅР°Р»РёР·РёСЂСѓСЋ:**\n' +
        'вЂў Р­С„С„РµРєС‚РёРІРЅРѕСЃС‚СЊ РєРѕРјРїРѕРЅРµРЅС‚РѕРІ\n' +
        'вЂў Р‘РµР·РѕРїР°СЃРЅРѕСЃС‚СЊ РґРѕР·РёСЂРѕРІРѕРє\n' +
        'вЂў РќР°СѓС‡РЅС‹Рµ РёСЃСЃР»РµРґРѕРІР°РЅРёСЏ\n' +
        'вЂў Р РµРєРѕРјРµРЅРґР°С†РёРё РїРѕ РїСЂРёРјРµРЅРµРЅРёСЋ\n' +
        'вЂў Р’РѕР·РјРѕР¶РЅС‹Рµ РїРѕР±РѕС‡РЅС‹Рµ СЌС„С„РµРєС‚С‹\n\n' +
        'рџ“ќ РћС‚РїСЂР°РІСЊС‚Рµ РёРЅС„РѕСЂРјР°С†РёСЋ Рѕ РґРѕР±Р°РІРєРµ:'
      );
      return;
    }
    
    // РќРµРёР·РІРµСЃС‚РЅР°СЏ РєРѕРјР°РЅРґР°
    await bot.sendMessage(
      chatId,
      'вќ“ РќРµРёР·РІРµСЃС‚РЅР°СЏ РєРѕРјР°РЅРґР°. Р”РѕСЃС‚СѓРїРЅС‹Рµ РєРѕРјР°РЅРґС‹:\n\n' +
      'вЂў `/deepresearch` - РіР»СѓР±РѕРєРёР№ Р°РЅР°Р»РёР·\n' +
      'вЂў `/training_program` - РїСЂРѕРіСЂР°РјРјР° С‚СЂРµРЅРёСЂРѕРІРѕРє\n' +
      'вЂў `/nutrition_plan` - РїР»Р°РЅ РїРёС‚Р°РЅРёСЏ\n' +
      'вЂў `/composition_analysis` - Р°РЅР°Р»РёР· РґРѕР±Р°РІРѕРє',
      mainKeyboard
    );
    
  } catch (error) {
    console.error('вќЊ РћС€РёР±РєР° РѕР±СЂР°Р±РѕС‚РєРё workflow РєРѕРјР°РЅРґС‹:', error);
    await bot.sendMessage(chatId, 'вќЊ РџСЂРѕРёР·РѕС€Р»Р° РѕС€РёР±РєР° РїСЂРё РѕР±СЂР°Р±РѕС‚РєРµ РєРѕРјР°РЅРґС‹. РџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ.');
  }
}

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ РёСЃС‚РѕСЂРёРё РїР»Р°С‚РµР¶РµР№
async function showPaymentHistory(bot, chatId, userId) {
  try {
    // РџРѕР»СѓС‡Р°РµРј РІСЃРµ РїРѕРґРїРёСЃРєРё РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ (РІРєР»СЋС‡Р°СЏ РёСЃС‚РµРєС€РёРµ)
    const { getAllUserSubscriptions } = await import('../services/database.js');
    const subscriptions = await getAllUserSubscriptions(userId);
    
    if (subscriptions.length === 0) {
      await bot.sendMessage(
        chatId,
        'рџ“Љ **РСЃС‚РѕСЂРёСЏ РїР»Р°С‚РµР¶РµР№**\n\n' +
        'вќЊ РЈ РІР°СЃ РїРѕРєР° РЅРµС‚ РёСЃС‚РѕСЂРёРё РїР»Р°С‚РµР¶РµР№.\n\n' +
        'рџ’Ў РћС„РѕСЂРјРёС‚Рµ РїРµСЂРІСѓСЋ РїРѕРґРїРёСЃРєСѓ РґР»СЏ РЅР°С‡Р°Р»Р° СЂР°Р±РѕС‚С‹ СЃ РР-С‚СЂРµРЅРµСЂРѕРј!',
        { parse_mode: 'Markdown', ...subscriptionKeyboard }
      );
      return;
    }

    let message = 'рџ“Љ **РСЃС‚РѕСЂРёСЏ РїР»Р°С‚РµР¶РµР№**\n\n';
    
    subscriptions.forEach((subscription, index) => {
      const startDate = new Date(subscription.start_date).toLocaleDateString('ru-RU');
      const endDate = new Date(subscription.end_date).toLocaleDateString('ru-RU');
      const createdDate = new Date(subscription.created_at).toLocaleDateString('ru-RU');
      
      const planNames = {
        'basic': 'Р‘Р°Р·РѕРІС‹Р№',
        'standard': 'РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№', 
        'premium': 'РџСЂРµРјРёСѓРј',
        'monthly': 'РњРµСЃСЏС‡РЅС‹Р№'
      };
      
      const statusEmoji = subscription.status === 'active' ? 'вњ…' : subscription.status === 'expired' ? 'вЏ°' : 'вќЊ';
      
      message += `${index + 1}. ${statusEmoji} **${planNames[subscription.plan_type] || subscription.plan_type}**\n`;
      message += `   рџ’° РЎСѓРјРјР°: ${subscription.amount}в‚Ѕ\n`;
      message += `   рџ“… РџРµСЂРёРѕРґ: ${startDate} - ${endDate}\n`;
      message += `   рџ“Љ РЎС‚Р°С‚СѓСЃ: ${subscription.status === 'active' ? 'РђРєС‚РёРІРЅР°' : subscription.status === 'expired' ? 'РСЃС‚РµРєР»Р°' : 'РќРµР°РєС‚РёРІРЅР°'}\n`;
      message += `   рџ—“ РћРїР»Р°С‡РµРЅР°: ${createdDate}\n`;
      if (subscription.status === 'active') {
        message += `   рџ“€ Р—Р°РїСЂРѕСЃРѕРІ: ${subscription.requests_used}/${subscription.requests_limit}\n`;
      }
      message += '\n';
    });

    message += 'рџ’Ў Р”Р»СЏ РїСЂРѕРґР»РµРЅРёСЏ РїРѕРґРїРёСЃРєРё РЅР°Р¶РјРёС‚Рµ "рџ’і РџСЂРѕРґР»РёС‚СЊ РїРѕРґРїРёСЃРєСѓ"';

    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown', ...subscriptionKeyboard });
    
  } catch (error) {
    console.error('РћС€РёР±РєР° РїРѕР»СѓС‡РµРЅРёСЏ РёСЃС‚РѕСЂРёРё РїР»Р°С‚РµР¶РµР№:', error);
    await bot.sendMessage(
      chatId,
      'вќЊ РћС€РёР±РєР° РїСЂРё Р·Р°РіСЂСѓР·РєРµ РёСЃС‚РѕСЂРёРё РїР»Р°С‚РµР¶РµР№. РџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ.',
      subscriptionKeyboard
    );
  }
}

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РѕР±СЂР°Р±РѕС‚РєРё РґРµС‚Р°Р»СЊРЅРѕРіРѕ РѕС‚С‡РµС‚Р° Рѕ РїСЂРѕРіСЂРµСЃСЃРµ
async function handleDetailedProgressReport(bot, chatId, telegramUserId) {
  try {
    console.log(`рџ“€ Р“РµРЅРµСЂР°С†РёСЏ РѕС‚С‡РµС‚Р° Рѕ РїСЂРѕРіСЂРµСЃСЃРµ РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${telegramUserId}`);
    
    // РћС‚РїСЂР°РІР»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ Рѕ Р·Р°РіСЂСѓР·РєРµ
    const loadingMessage = await bot.sendMessage(chatId, 'рџ“Љ РђРЅР°Р»РёР·РёСЂСѓСЋ РІР°С€ РїСЂРѕРіСЂРµСЃСЃ...');
    
    // РђРЅР°Р»РёР·РёСЂСѓРµРј РїСЂРѕРіСЂРµСЃСЃ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
    const progressResult = await analyzeUserProgress(telegramUserId);
    
    if (!progressResult.success) {
      await bot.editMessageText(
        'вќЊ РћС€РёР±РєР° РїСЂРё Р°РЅР°Р»РёР·Рµ РїСЂРѕРіСЂРµСЃСЃР°. РџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ.',
        {
          chat_id: chatId,
          message_id: loadingMessage.message_id
        }
      );
      return;
    }
    
    // Р¤РѕСЂРјР°С‚РёСЂСѓРµРј РѕС‚С‡РµС‚
    const reportText = formatProgressReport(progressResult.data);
    
    // РЈРґР°Р»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ Р·Р°РіСЂСѓР·РєРё
    try {
      await bot.deleteMessage(chatId, loadingMessage.message_id);
    } catch (deleteError) {
      // РРіРЅРѕСЂРёСЂСѓРµРј РѕС€РёР±РєРё СѓРґР°Р»РµРЅРёСЏ
    }
    
    // РћС‚РїСЂР°РІР»СЏРµРј РѕС‚С‡РµС‚ СЃ РєРЅРѕРїРєР°РјРё РЅР°РІРёРіР°С†РёРё
    await bot.sendMessage(
      chatId,
      reportText,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [
            [{ text: 'рџ“Љ РђРЅР°Р»РёС‚РёРєР°' }, { text: 'рџЋЇ РњРѕРё РґР°РЅРЅС‹Рµ' }],
            [{ text: 'рџЏ‹пёЏвЂЌв™‚пёЏ Р”РѕР±Р°РІРёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєСѓ' }, { text: 'вљ–пёЏ Р—Р°РїРёСЃР°С‚СЊ РІРµСЃ' }],
            [{ text: 'в¬…пёЏ РќР°Р·Р°Рґ РІ РјРµРЅСЋ' }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        }
      }
    );
    
    console.log(`вњ… РћС‚С‡РµС‚ Рѕ РїСЂРѕРіСЂРµСЃСЃРµ СѓСЃРїРµС€РЅРѕ РѕС‚РїСЂР°РІР»РµРЅ РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ ${telegramUserId}`);
    
  } catch (error) {
    console.error('вќЊ РћС€РёР±РєР° РїСЂРё РіРµРЅРµСЂР°С†РёРё РѕС‚С‡РµС‚Р° Рѕ РїСЂРѕРіСЂРµСЃСЃРµ:', error);
    
    await bot.sendMessage(
      chatId,
      'вќЊ РџСЂРѕРёР·РѕС€Р»Р° РѕС€РёР±РєР° РїСЂРё Р°РЅР°Р»РёР·Рµ РїСЂРѕРіСЂРµСЃСЃР°. РџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ.',
      {
        reply_markup: {
          keyboard: [
            [{ text: 'в¬…пёЏ РќР°Р·Р°Рґ РІ РјРµРЅСЋ' }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        }
      }
    );
  }
}

// Р¤СѓРЅРєС†РёРё РґР»СЏ СѓРґР°Р»РµРЅРёСЏ С†РµР»РµР№ Рё РІСЃРµС… РґР°РЅРЅС‹С…
async function confirmDeleteAllGoals(bot, chatId, userId) {
  await bot.sendMessage(
    chatId,
    'вљ пёЏ **Р’РќРРњРђРќРР•!**\n\n' +
    'рџ—‘пёЏ Р’С‹ РґРµР№СЃС‚РІРёС‚РµР»СЊРЅРѕ С…РѕС‚РёС‚Рµ СѓРґР°Р»РёС‚СЊ **Р’РЎР•** СЃРІРѕРё С†РµР»Рё?\n\n' +
    'вќЊ Р­С‚Рѕ РґРµР№СЃС‚РІРёРµ **РќР•РћР‘Р РђРўРРњРћ**!\n\n' +
    'Р”Р»СЏ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ РЅР°РїРёС€РёС‚Рµ: `РЈР”РђР›РРўР¬ Р’РЎР• Р¦Р•Р›Р`',
    { parse_mode: 'Markdown', ...mainKeyboard }
  );
  
  userStates.set(chatId, 'waiting_confirm_delete_all_goals');
}

async function confirmDeleteAllData(bot, chatId, userId) {
  await bot.sendMessage(
    chatId,
    'вљ пёЏ **РљР РРўРР§Р•РЎРљРћР• РџР Р•Р”РЈРџР Р•Р–Р”Р•РќРР•!**\n\n' +
    'рџ—‘пёЏ Р’С‹ РґРµР№СЃС‚РІРёС‚РµР»СЊРЅРѕ С…РѕС‚РёС‚Рµ СѓРґР°Р»РёС‚СЊ **РђР‘РЎРћР›Р®РўРќРћ Р’РЎР•** РґР°РЅРЅС‹Рµ?\n\n' +
    'рџ’Ґ Р­С‚Рѕ РІРєР»СЋС‡Р°РµС‚:\n' +
    'вЂў Р’СЃРµ С‚СЂРµРЅРёСЂРѕРІРєРё\n' +
    'вЂў Р’СЃРµ Р·Р°РїРёСЃРё РІРµСЃР°\n' +
    'вЂў Р’СЃРµ С†РµР»Рё\n' +
    'вЂў Р’СЃСЋ СЃС‚Р°С‚РёСЃС‚РёРєСѓ\n\n' +
    'вќЊ Р­С‚Рѕ РґРµР№СЃС‚РІРёРµ **РџРћР›РќРћРЎРўР¬Р® РќР•РћР‘Р РђРўРРњРћ**!\n\n' +
    'Р”Р»СЏ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ РЅР°РїРёС€РёС‚Рµ: `РЈР”РђР›РРўР¬ Р’РЎР• Р”РђРќРќР«Р•`',
    { parse_mode: 'Markdown', ...mainKeyboard }
  );
  
  userStates.set(chatId, 'waiting_confirm_delete_all_data');
}

async function processDeleteAllGoals(bot, chatId, userId) {
  try {
    const result = await deleteAllGoals(userId);
    
    if (result.success) {
      await bot.sendMessage(
        chatId,
        `вњ… **Р’СЃРµ С†РµР»Рё СѓРґР°Р»РµРЅС‹**\n\n` +
        `рџ—‘пёЏ РЈРґР°Р»РµРЅРѕ: ${result.count} С†РµР»РµР№`,
        { parse_mode: 'Markdown', ...mainKeyboard }
      );
    } else {
      await bot.sendMessage(
        chatId,
        `вќЊ **РћС€РёР±РєР° СѓРґР°Р»РµРЅРёСЏ**\n\n` +
        `${result.message}`,
        { parse_mode: 'Markdown', ...mainKeyboard }
      );
    }
  } catch (error) {
    console.error('РћС€РёР±РєР° РїСЂРё СѓРґР°Р»РµРЅРёРё РІСЃРµС… С†РµР»РµР№:', error);
    await bot.sendMessage(chatId, 'РћС€РёР±РєР° РїСЂРё СѓРґР°Р»РµРЅРёРё С†РµР»РµР№.', { ...mainKeyboard });
  }
}

async function processDeleteAllData(bot, chatId, userId) {
  try {
    // РЈРґР°Р»СЏРµРј РІСЃРµ РґР°РЅРЅС‹Рµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
    const workoutsResult = await deleteAllWorkouts(userId);
    const weightsResult = await deleteAllWeights(userId);
    const goalsResult = await deleteAllGoals(userId);
    
    let totalDeleted = 0;
    let details = [];
    
    if (workoutsResult.success) {
      totalDeleted += workoutsResult.count;
      details.push(`вЂў РўСЂРµРЅРёСЂРѕРІРєРё: ${workoutsResult.count}`);
    }
    
    if (weightsResult.success) {
      totalDeleted += weightsResult.count;
      details.push(`вЂў Р—Р°РїРёСЃРё РІРµСЃР°: ${weightsResult.count}`);
    }
    
    if (goalsResult.success) {
      totalDeleted += goalsResult.count;
      details.push(`вЂў Р¦РµР»Рё: ${goalsResult.count}`);
    }
    
    await bot.sendMessage(
      chatId,
      `рџ’Ґ **Р’РЎР• Р”РђРќРќР«Р• РЈР”РђР›Р•РќР«**\n\n` +
      `рџ—‘пёЏ Р’СЃРµРіРѕ СѓРґР°Р»РµРЅРѕ Р·Р°РїРёСЃРµР№: ${totalDeleted}\n\n` +
      `Р”РµС‚Р°Р»РёР·Р°С†РёСЏ:\n${details.join('\n')}\n\n` +
      `вњЁ Р’С‹ РјРѕР¶РµС‚Рµ РЅР°С‡Р°С‚СЊ Р·Р°РЅРѕРІРѕ!`,
      { parse_mode: 'Markdown', ...mainKeyboard }
    );
  } catch (error) {
    console.error('РћС€РёР±РєР° РїСЂРё СѓРґР°Р»РµРЅРёРё РІСЃРµС… РґР°РЅРЅС‹С…:', error);
    await bot.sendMessage(chatId, 'РћС€РёР±РєР° РїСЂРё СѓРґР°Р»РµРЅРёРё РґР°РЅРЅС‹С….', { ...mainKeyboard });
  }
}

async function handleCallbackQuery(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const user = callbackQuery.from;

  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    const dbUser = await getUserByTelegramId(user.id);

    switch (data) {
      // ...existing code...
      
      case 'start_work':
        // РџРµСЂРµС…РѕРґ РІ РіР»Р°РІРЅРѕРµ РјРµРЅСЋ РїРѕСЃР»Рµ РѕРїР»Р°С‚С‹
        try {
          await bot.deleteMessage(chatId, messageId).catch(() => {});
          console.log(`рџЏ  User ${user.id} clicked 'Start Work' after payment`);
          await bot.sendMessage(
            chatId,
            'рџЋ‰ Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ!\n\nРўРµРїРµСЂСЊ РІР°Рј РґРѕСЃС‚СѓРїРЅС‹ РІСЃРµ С„СѓРЅРєС†РёРё Р±РѕС‚Р°. Р’С‹Р±РµСЂРёС‚Рµ РґРµР№СЃС‚РІРёРµ:',
            mainKeyboard
          );
        } catch (error) {
          console.error('Error in start_work handler:', error);
          await bot.sendMessage(chatId, 'РџСЂРѕРёР·РѕС€Р»Р° РѕС€РёР±РєР°. РџРѕРїСЂРѕР±СѓР№С‚Рµ РєРѕРјР°РЅРґСѓ /start', mainKeyboard);
        }
        break;
        
      case 'my_status':
        // РџРѕРєР°Р· СЃС‚Р°С‚СѓСЃР° РїРѕРґРїРёСЃРєРё РїРѕСЃР»Рµ РѕРїР»Р°С‚С‹
        try {
          console.log(`рџ“Љ User ${user.id} clicked 'My Status' after payment`);
          await showSubscriptionStatus(bot, chatId, null, dbUser.id);
        } catch (error) {
          console.error('Error in my_status handler:', error);
          await bot.sendMessage(chatId, 'РћС€РёР±РєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃС‚Р°С‚СѓСЃР° РїРѕРґРїРёСЃРєРё. РџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ.', mainKeyboard);
        }
        break;

      // ...existing code...
    }
  } catch (error) {
    // ...existing code...
  }
}

async function showSubscriptionMenu(bot, chatId, userId) {
  const subscription = await getActiveSubscription(userId);
  
  if (subscription) {
    const endDate = new Date(subscription.end_date);
    const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
    
    const planNames = {
      'basic': 'Р‘Р°Р·РѕРІС‹Р№ (100 Р·Р°РїСЂРѕСЃРѕРІ)',
      'standard': 'РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№ (300 Р·Р°РїСЂРѕСЃРѕРІ)', 
      'premium': 'РџСЂРµРјРёСѓРј (600 Р·Р°РїСЂРѕСЃРѕРІ)'
    };
    const remaining = subscription.requests_limit - subscription.requests_used;
    const message = `рџ’Ћ Р’Р°С€Р° РїРѕРґРїРёСЃРєР° Р°РєС‚РёРІРЅР°!\n\nрџ“… РџР»Р°РЅ: ${planNames[subscription.plan_type] || subscription.plan_type}\nрџ“€ Р—Р°РїСЂРѕСЃС‹: ${subscription.requests_used}/${subscription.requests_limit} (РѕСЃС‚Р°Р»РѕСЃСЊ: ${remaining})\nвЏ° Р”Рѕ РѕРєРѕРЅС‡Р°РЅРёСЏ: ${daysLeft} РґРЅРµР№\nрџ“Љ РЎС‚Р°С‚СѓСЃ: РђРєС‚РёРІРЅР°`;
    
    await bot.sendMessage(chatId, message, manageSubscriptionKeyboard);
  } else {
    await bot.sendMessage(
      chatId,
      'рџ’Ћ РЈ РІР°СЃ РЅРµС‚ Р°РєС‚РёРІРЅРѕР№ РїРѕРґРїРёСЃРєРё\n\nРџРѕРґРїРёСЃРєР° РґР°РµС‚ РґРѕСЃС‚СѓРї Рє:\nвЂў РџРµСЂСЃРѕРЅР°Р»СЊРЅРѕРјСѓ РР-С‚СЂРµРЅРµСЂСѓ\nвЂў РџСЂРѕРіСЂР°РјРјР°Рј С‚СЂРµРЅРёСЂРѕРІРѕРє\nвЂў РЎРѕРІРµС‚Р°Рј РїРѕ РїРёС‚Р°РЅРёСЋ\nвЂў РџСЂРёРѕСЂРёС‚РµС‚РЅРѕР№ РїРѕРґРґРµСЂР¶РєРµ',
      noSubscriptionKeyboard
    );
  }
}

async function showUserProfile(bot, chatId, user) {
  const subscription = await getActiveSubscription(user.id);
  const freeRequests = await getUserFreeRequests(user.id);
  
  let message = `рџ‘¤ Р’Р°С€ РїСЂРѕС„РёР»СЊ\n\n`;
  message += `рџ“› РРјСЏ: ${user.first_name || 'РќРµ СѓРєР°Р·Р°РЅРѕ'}\n`;
  message += `рџ†” ID: ${user.telegram_id}\n`;
  message += `рџ“… Р РµРіРёСЃС‚СЂР°С†РёСЏ: ${new Date(user.created_at).toLocaleDateString('ru-RU')}\n\n`;
  
  // РџРѕРєР°Р·С‹РІР°РµРј Р±РµСЃРїР»Р°С‚РЅС‹Рµ Р·Р°РїСЂРѕСЃС‹
  message += `рџ†“ Р‘РµСЃРїР»Р°С‚РЅС‹Рµ Р·Р°РїСЂРѕСЃС‹: ${freeRequests.used}/${freeRequests.total} (РѕСЃС‚Р°Р»РѕСЃСЊ: ${freeRequests.remaining})\n\n`;
  
  if (subscription) {
    const endDate = new Date(subscription.end_date);
    const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
    const planNames = {
      'basic': 'Р‘Р°Р·РѕРІС‹Р№ (100 Р·Р°РїСЂРѕСЃРѕРІ)',
      'standard': 'РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№ (300 Р·Р°РїСЂРѕСЃРѕРІ)', 
      'premium': 'РџСЂРµРјРёСѓРј (600 Р·Р°РїСЂРѕСЃРѕРІ)'
    };
    const remaining = subscription.requests_limit - subscription.requests_used;
    message += `рџ’Ћ РџРѕРґРїРёСЃРєР°: РђРєС‚РёРІРЅР°\n`;
    message += `рџ“Љ РџР»Р°РЅ: ${planNames[subscription.plan_type] || subscription.plan_type}\n`;
    message += `рџ“€ Р—Р°РїСЂРѕСЃС‹: ${subscription.requests_used}/${subscription.requests_limit} (РѕСЃС‚Р°Р»РѕСЃСЊ: ${remaining})\n`;
    message += `вЏ° РћСЃС‚Р°Р»РѕСЃСЊ РґРЅРµР№: ${daysLeft}`;
  } else {
    message += `рџ’Ћ РџРѕРґРїРёСЃРєР°: РќРµ Р°РєС‚РёРІРЅР°`;
  }

  await bot.sendMessage(chatId, message, mainKeyboard);
}

async function showPaymentConfirmation(bot, chatId, messageId, planType) {
  const plans = {
    'basic': { price: '150в‚Ѕ', requests: '100 Р·Р°РїСЂРѕСЃРѕРІ', name: 'Р‘Р°Р·РѕРІС‹Р№' },
    'standard': { price: '300в‚Ѕ', requests: '300 Р·Р°РїСЂРѕСЃРѕРІ', name: 'РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№' },
    'premium': { price: '450в‚Ѕ', requests: '600 Р·Р°РїСЂРѕСЃРѕРІ', name: 'РџСЂРµРјРёСѓРј' }
  };
  
  const plan = plans[planType];
  const message = `рџ’і РџРѕРґС‚РІРµСЂР¶РґРµРЅРёРµ Р·Р°РєР°Р·Р°\n\nрџ“¦ РџР»Р°РЅ: ${plan.name}\nрџ“Љ Р›РёРјРёС‚: ${plan.requests} РІ РјРµСЃСЏС†\nрџ’° Рљ РѕРїР»Р°С‚Рµ: ${plan.price}\n\nвњ… РџРѕСЃР»Рµ РѕРїР»Р°С‚С‹ РїРѕРґРїРёСЃРєР° Р°РєС‚РёРІРёСЂСѓРµС‚СЃСЏ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё.`;
  
  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: messageId,
    ...confirmPaymentKeyboard(planType)
  });
}

async function processPayment(bot, chatId, messageId, telegramId, planType) {
  try {
    await bot.editMessageText('вЏі РЎРѕР·РґР°РµРј СЃСЃС‹Р»РєСѓ РґР»СЏ РѕРїР»Р°С‚С‹...', {
      chat_id: chatId,
      message_id: messageId
    });

    const paymentResult = await createSubscriptionPayment(telegramId, planType);
    
    if (paymentResult.success) {
      const plans = {
        'basic': { price: '150в‚Ѕ', requests: '100 Р·Р°РїСЂРѕСЃРѕРІ', name: 'Р‘Р°Р·РѕРІС‹Р№' },
        'standard': { price: '300в‚Ѕ', requests: '300 Р·Р°РїСЂРѕСЃРѕРІ', name: 'РЎС‚Р°РЅРґР°СЂС‚РЅС‹Р№' },
        'premium': { price: '450в‚Ѕ', requests: '600 Р·Р°РїСЂРѕСЃРѕРІ', name: 'РџСЂРµРјРёСѓРј' }
      };
      const plan = plans[planType];
      
      await bot.editMessageText(
        `рџ’і РћРїР»Р°С‚Р° РїРѕРґРїРёСЃРєРё\n\nрџ“¦ РџР»Р°РЅ: ${plan.name}\nрџ“Љ Р›РёРјРёС‚: ${plan.requests} РІ РјРµСЃСЏС†\nрџ’° РЎСѓРјРјР°: ${plan.price}\n\nрџ”’ РћРїР»Р°С‚Р° РїСЂРѕС…РѕРґРёС‚ С‡РµСЂРµР· Р·Р°С‰РёС‰РµРЅРЅС‹Р№ СЃРµСЂРІРёСЃ Р®РљР°СЃСЃР°.\n\nрџ‘† РќР°Р¶РјРёС‚Рµ РєРЅРѕРїРєСѓ РЅРёР¶Рµ РґР»СЏ РїРµСЂРµС…РѕРґР° Рє РѕРїР»Р°С‚Рµ:`,
        {
          chat_id: chatId,
          message_id: messageId,
          ...paymentLinkKeyboard(paymentResult.paymentUrl)
        }
      );
    } else {
      await bot.editMessageText(
        `вќЊ РћС€РёР±РєР° СЃРѕР·РґР°РЅРёСЏ РїР»Р°С‚РµР¶Р°: ${paymentResult.error}\n\nРџРѕРїСЂРѕР±СѓР№С‚Рµ РµС‰С‘ СЂР°Р· РёР»Рё РѕР±СЂР°С‚РёС‚РµСЃСЊ РІ РїРѕРґРґРµСЂР¶РєСѓ.`,
        {
          chat_id: chatId,
          message_id: messageId,
          ...subscriptionKeyboard
        }
      );
    }
  } catch (error) {
    console.error('РћС€РёР±РєР° РѕР±СЂР°Р±РѕС‚РєРё РїР»Р°С‚РµР¶Р°:', error);
    await bot.editMessageText(
      'РџСЂРѕРёР·РѕС€Р»Р° РѕС€РёР±РєР° РїСЂРё РѕР±СЂР°Р±РѕС‚РєРµ РїР»Р°С‚РµР¶Р°. РџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ.',
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
  }

    // РћР±СЂР°Р±РѕС‚РєР° СѓРґР°Р»РµРЅРёСЏ С†РµР»Рё
    if (userState && userState.action === 'delete_goal') {
      if (['рџЋЇ Р¦РµР»РµРІРѕР№ РІРµСЃ', 'рџ’Є РќР°Р±РѕСЂ РјС‹С€С†', 'рџ”Ґ РЎР¶РёРіР°РЅРёРµ Р¶РёСЂР°', 'рџЏѓвЂЌв™‚пёЏ РЈР»СѓС‡С€РёС‚СЊ РІС‹РЅРѕСЃР»РёРІРѕСЃС‚СЊ', 'рџЏ‹пёЏвЂЌв™‚пёЏ РЈРІРµР»РёС‡РёС‚СЊ СЃРёР»Сѓ', 'рџ§вЂЌв™‚пёЏ РЈР»СѓС‡С€РёС‚СЊ РіРёР±РєРѕСЃС‚СЊ'].includes(text)) {
        const goalType = text.split(' ').slice(1).join(' ').toLowerCase();
        
        try {
          const deleted = await deleteUserGoal(dbUser.id, goalType);
          userStates.delete(user.id);
          
          if (deleted) {
            await bot.sendMessage(
              chatId,
              `вњ… **Р¦РµР»СЊ СѓРґР°Р»РµРЅР°**\n\n` +
              `рџ—‘пёЏ РЈРґР°Р»РµРЅР° С†РµР»СЊ: **${goalType}**`,
              { parse_mode: 'Markdown', ...userDataKeyboard }
            );
          } else {
            await bot.sendMessage(
              chatId,
              `вќЊ Р¦РµР»СЊ "${goalType}" РЅРµ РЅР°Р№РґРµРЅР°.`,
              { parse_mode: 'Markdown', ...userDataKeyboard }
            );
          }
        } catch (error) {
          await bot.sendMessage(chatId, 'вќЊ РћС€РёР±РєР° РїСЂРё СѓРґР°Р»РµРЅРёРё С†РµР»Рё.');
        }
        return;
      }
    }

    // === РћР‘Р РђР‘РћРўР§РРљР Р”Р•РўРђР›Р¬РќР«РҐ РўР Р•РќРР РћР’РћРљ ===
    
    // РћР±СЂР°Р±РѕС‚РєР° РІС‹Р±РѕСЂР° РїСЂРѕРёР·РІРѕР»СЊРЅРѕРіРѕ СѓРїСЂР°Р¶РЅРµРЅРёСЏ
    if (userState && userState.action === 'waiting_custom_exercise') {
      if (text.length < 2 || text.length > 50) {
        await bot.sendMessage(
          chatId,
          'вќЊ РќР°Р·РІР°РЅРёРµ СѓРїСЂР°Р¶РЅРµРЅРёСЏ РґРѕР»Р¶РЅРѕ Р±С‹С‚СЊ РѕС‚ 2 РґРѕ 50 СЃРёРјРІРѕР»РѕРІ.'
        );
        return;
      }

      userStates.set(user.id, { action: 'waiting_sets_count', exerciseName: text });
      
      await bot.sendMessage(
        chatId,
        `рџЏ‹пёЏвЂЌв™‚пёЏ **${text}**\n\n` +
        `РЎРєРѕР»СЊРєРѕ РїРѕРґС…РѕРґРѕРІ РІС‹ РїР»Р°РЅРёСЂСѓРµС‚Рµ СЃРґРµР»Р°С‚СЊ?\n\n` +
        `рџ’Ў РџСЂРёРјРµСЂС‹: 3, 4, 5`,
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° РєРѕР»РёС‡РµСЃС‚РІР° РїРѕРґС…РѕРґРѕРІ
    if (userState && userState.action === 'waiting_sets_count') {
      const setsCount = parseInt(text);
      if (isNaN(setsCount) || setsCount < 1 || setsCount > 10) {
        await bot.sendMessage(
          chatId,
          'вќЊ РџРѕР¶Р°Р»СѓР№СЃС‚Р°, РІРІРµРґРёС‚Рµ РєРѕР»РёС‡РµСЃС‚РІРѕ РїРѕРґС…РѕРґРѕРІ РѕС‚ 1 РґРѕ 10.'
        );
        return;
      }

      const exercise = {
        name: userState.exerciseName,
        sets: [],
        totalSets: setsCount,
        currentSet: 1
      };

      const workout = activeWorkouts.get(user.id);
      if (workout) {
        workout.exercises.push(exercise);
        
        await bot.sendMessage(
          chatId,
          `рџЏ‹пёЏвЂЌв™‚пёЏ **${exercise.name}**\n\n` +
          `рџ“Љ РџРѕРґС…РѕРґ ${exercise.currentSet} РёР· ${exercise.totalSets}\n\n` +
          `вљ–пёЏ Р’РІРµРґРёС‚Рµ РІРµСЃ РѕС‚СЏРіРѕС‰РµРЅРёСЏ (РІ РєРі):\n\n` +
          `рџ’Ў РџСЂРёРјРµСЂС‹:\n` +
          `вЂў 50 - С€С‚Р°РЅРіР° 50 РєРі\n` +
          `вЂў 20 - РіР°РЅС‚РµР»Рё 20 РєРі\n` +
          `вЂў 0 - СЃРѕР±СЃС‚РІРµРЅРЅС‹Р№ РІРµСЃ (РїРѕРґС‚СЏРіРёРІР°РЅРёСЏ, РѕС‚Р¶РёРјР°РЅРёСЏ)`,
          { parse_mode: 'Markdown' }
        );
        
        userStates.set(user.id, { 
          action: 'waiting_exercise_weight', 
          exerciseIndex: workout.exercises.length - 1 
        });
      }
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° РІРµСЃР° РѕС‚СЏРіРѕС‰РµРЅРёСЏ
    if (userState && userState.action === 'waiting_exercise_weight') {
      const weight = parseFloat(text);
      if (isNaN(weight) || weight < 0 || weight > 1000) {
        await bot.sendMessage(
          chatId,
          'вќЊ РџРѕР¶Р°Р»СѓР№СЃС‚Р°, РІРІРµРґРёС‚Рµ РІРµСЃ РѕС‚СЏРіРѕС‰РµРЅРёСЏ РѕС‚ 0 РґРѕ 1000 РєРі.\n\n' +
          'рџ’Ў 0 = СЃРѕР±СЃС‚РІРµРЅРЅС‹Р№ РІРµСЃ (Р±РµР· РґРѕРїРѕР»РЅРёС‚РµР»СЊРЅРѕРіРѕ РѕС‚СЏРіРѕС‰РµРЅРёСЏ)'
        );
        return;
      }

      const workout = activeWorkouts.get(user.id);
      const exercise = workout.exercises[userState.exerciseIndex];
      
      // РЎРѕС…СЂР°РЅСЏРµРј РІРµСЃ РґР»СЏ С‚РµРєСѓС‰РµРіРѕ РїРѕРґС…РѕРґР°
      exercise.currentWeight = weight;
      
      await bot.sendMessage(
        chatId,
        `рџЏ‹пёЏвЂЌв™‚пёЏ **${exercise.name}**\n\n` +
        `рџ“Љ РџРѕРґС…РѕРґ ${exercise.currentSet} РёР· ${exercise.totalSets}\n` +
        `вљ–пёЏ РћС‚СЏРіРѕС‰РµРЅРёРµ: ${weight === 0 ? 'СЃРѕР±СЃС‚РІРµРЅРЅС‹Р№ РІРµСЃ' : weight + ' РєРі'}\n\n` +
        `Р’РІРµРґРёС‚Рµ РєРѕР»РёС‡РµСЃС‚РІРѕ РїРѕРІС‚РѕСЂРµРЅРёР№:\n\n` +
        `рџ’Ў РџСЂРёРјРµСЂС‹: 10, 12, 8`,
        { parse_mode: 'Markdown' }
      );

      userStates.set(user.id, { 
        action: 'waiting_reps', 
        exerciseIndex: userState.exerciseIndex 
      });
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° РїРѕРІС‚РѕСЂРµРЅРёР№
    if (userState && userState.action === 'waiting_reps') {
      const reps = parseInt(text);
      if (isNaN(reps) || reps < 1 || reps > 100) {
        await bot.sendMessage(
          chatId,
          'вќЊ РџРѕР¶Р°Р»СѓР№СЃС‚Р°, РІРІРµРґРёС‚Рµ РєРѕР»РёС‡РµСЃС‚РІРѕ РїРѕРІС‚РѕСЂРµРЅРёР№ РѕС‚ 1 РґРѕ 100.'
        );
        return;
      }

      const workout = activeWorkouts.get(user.id);
      const exercise = workout.exercises[userState.exerciseIndex];
      
      exercise.sets.push({ 
        reps: reps, 
        weight: exercise.currentWeight || 0, 
        notes: null 
      });
      
      if (exercise.currentSet < exercise.totalSets) {
        exercise.currentSet++;
        
        await bot.sendMessage(
          chatId,
          `вњ… **РџРѕРґС…РѕРґ ${exercise.currentSet - 1}: ${reps} РїРѕРІС‚РѕСЂРµРЅРёР№** ${exercise.currentWeight === 0 ? '(СЃРѕР±СЃС‚РІРµРЅРЅС‹Р№ РІРµСЃ)' : '(' + exercise.currentWeight + ' РєРі)'}\n\n` +
          `рџЏ‹пёЏвЂЌв™‚пёЏ **${exercise.name}**\n` +
          `рџ“Љ РџРѕРґС…РѕРґ ${exercise.currentSet} РёР· ${exercise.totalSets}\n\n` +
          `вљ–пёЏ Р’РІРµРґРёС‚Рµ РІРµСЃ РѕС‚СЏРіРѕС‰РµРЅРёСЏ (РІ РєРі):`,
          { parse_mode: 'Markdown' }
        );

        userStates.set(user.id, { 
          action: 'waiting_exercise_weight', 
          exerciseIndex: userState.exerciseIndex 
        });
      } else {
        await bot.sendMessage(
          chatId,
          `вњ… **РЈРїСЂР°Р¶РЅРµРЅРёРµ "${exercise.name}" Р·Р°РІРµСЂС€РµРЅРѕ!**\n\n` +
          `рџ“Љ Р РµР·СѓР»СЊС‚Р°С‚:\n` +
          exercise.sets.map((set, i) => 
            `РџРѕРґС…РѕРґ ${i + 1}: ${set.reps} РїРѕРІС‚РѕСЂРµРЅРёР№ ${set.weight === 0 ? '(СЃРѕР±СЃС‚РІРµРЅРЅС‹Р№ РІРµСЃ)' : '(' + set.weight + ' РєРі)'}`
          ).join('\n') + '\n\n' +
          `рџ’¬ РҐРѕС‚РёС‚Рµ РґРѕР±Р°РІРёС‚СЊ РєРѕРјРјРµРЅС‚Р°СЂРёР№ Рє СЌС‚РѕРјСѓ СѓРїСЂР°Р¶РЅРµРЅРёСЋ?\n` +
          `(РЅР°РїСЂРёРјРµСЂ: "Р»РµРіРєРѕ", "РґРѕ РѕС‚РєР°Р·Р°", "С‚СЏР¶РµР»Рѕ")\n\n` +
          `РР»Рё РЅР°Р¶РјРёС‚Рµ "РџСЂРѕРїСѓСЃС‚РёС‚СЊ" С‡С‚РѕР±С‹ РїСЂРѕРґРѕР»Р¶РёС‚СЊ.`,
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [
                [{ text: 'вЏ© РџСЂРѕРїСѓСЃС‚РёС‚СЊ' }],
                [{ text: 'вћ• Р”РѕР±Р°РІРёС‚СЊ СѓРїСЂР°Р¶РЅРµРЅРёРµ' }, { text: 'вњ… Р—Р°РІРµСЂС€РёС‚СЊ С‚СЂРµРЅРёСЂРѕРІРєСѓ' }]
              ],
              resize_keyboard: true,
              one_time_keyboard: false
            }
          }
        );
        
        userStates.set(user.id, { 
          action: 'waiting_exercise_notes', 
          exerciseIndex: userState.exerciseIndex 
        });
      }
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ Рє СѓРїСЂР°Р¶РЅРµРЅРёСЋ
    if (userState && userState.action === 'waiting_exercise_notes') {
      const workout = activeWorkouts.get(user.id);
      const exercise = workout.exercises[userState.exerciseIndex];
      
      if (text !== 'вЏ© РџСЂРѕРїСѓСЃС‚РёС‚СЊ') {
        exercise.notes = text;
        await bot.sendMessage(
          chatId,
          `вњ… **РљРѕРјРјРµРЅС‚Р°СЂРёР№ РґРѕР±Р°РІР»РµРЅ:** "${text}"\n\n` +
          `РџСЂРѕРґРѕР»Р¶Р°Р№С‚Рµ С‚СЂРµРЅРёСЂРѕРІРєСѓ:`,
          { parse_mode: 'Markdown', ...detailedWorkoutKeyboard }
        );
      } else {
        await bot.sendMessage(
          chatId,
          `вњ… **РЈРїСЂР°Р¶РЅРµРЅРёРµ СЃРѕС…СЂР°РЅРµРЅРѕ**\n\n` +
          `РџСЂРѕРґРѕР»Р¶Р°Р№С‚Рµ С‚СЂРµРЅРёСЂРѕРІРєСѓ:`,
          { parse_mode: 'Markdown', ...detailedWorkoutKeyboard }
        );
      }
      
      userStates.delete(user.id);
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° РЅР°СЃС‚СЂРѕРµРЅРёСЏ РїРѕСЃР»Рµ С‚СЂРµРЅРёСЂРѕРІРєРё
    if (userState && userState.action === 'waiting_mood_after') {
      const moodValue = parseMoodValue(text);
      const moodKeyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'рџ„ РћС‚Р»РёС‡РЅРѕ', callback_data: 'mood_5' },
              { text: 'рџЉ РҐРѕСЂРѕС€Рѕ', callback_data: 'mood_4' }
            ],
            [
              { text: 'рџђ РќРѕСЂРјР°Р»СЊРЅРѕ', callback_data: 'mood_3' },
              { text: 'рџ• РџР»РѕС…Рѕ', callback_data: 'mood_2' }
            ],
            [
              { text: 'рџћ РЈР¶Р°СЃРЅРѕ', callback_data: 'mood_1' }
            ]
          ]
        }
      };
      
      if (moodValue === null) {
        await bot.sendMessage(
          chatId,
          'вќЊ РџРѕР¶Р°Р»СѓР№СЃС‚Р°, РІС‹Р±РµСЂРёС‚Рµ РЅР°СЃС‚СЂРѕРµРЅРёРµ РёР· РїСЂРµРґР»РѕР¶РµРЅРЅС‹С… РІР°СЂРёР°РЅС‚РѕРІ.',
          { parse_mode: 'Markdown', ...moodKeyboard }
        );
        return;
      }

      const workout = activeWorkouts.get(user.id);
      if (workout) {
        workout.moodAfter = moodValue;
        
        await bot.sendMessage(
          chatId,
          'рџ“ќ **Р¤РёРЅР°Р»СЊРЅС‹Рµ РєРѕРјРјРµРЅС‚Р°СЂРёРё**\n\n' +
          'Р”РѕР±Р°РІСЊС‚Рµ РѕР±С‰РёР№ РєРѕРјРјРµРЅС‚Р°СЂРёР№ Рє С‚СЂРµРЅРёСЂРѕРІРєРµ:\n' +
          'вЂў РљР°Рє РїСЂРѕС€Р»Р° С‚СЂРµРЅРёСЂРѕРІРєР°?\n' +
          'вЂў Р§С‚Рѕ РїРѕР»СѓС‡РёР»РѕСЃСЊ С…РѕСЂРѕС€Рѕ?\n' +
          'вЂў Р§С‚Рѕ РјРѕР¶РЅРѕ СѓР»СѓС‡С€РёС‚СЊ?\n\n' +
          'РР»Рё РЅР°Р¶РјРёС‚Рµ "РџСЂРѕРїСѓСЃС‚РёС‚СЊ":',
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [
                [{ text: 'вЏ© РџСЂРѕРїСѓСЃС‚РёС‚СЊ' }]
              ],
              resize_keyboard: true,
              one_time_keyboard: true
            }
          }
        );
        
        userStates.set(user.id, { action: 'waiting_workout_notes' });
      }
      return;
    }

    // РћР±СЂР°Р±РѕС‚РєР° РѕР±С‰РёС… РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ Рє С‚СЂРµРЅРёСЂРѕРІРєРµ
    if (userState && userState.action === 'waiting_workout_notes') {
      const workout = activeWorkouts.get(user.id);
      if (workout) {
        const workoutNotes = text === 'вЏ© РџСЂРѕРїСѓСЃС‚РёС‚СЊ' ? null : text;
        
        // РЎРѕС…СЂР°РЅСЏРµРј С‚СЂРµРЅРёСЂРѕРІРєСѓ РІ Р±Р°Р·Сѓ РґР°РЅРЅС‹С…
        try {
          const workoutDetails = {
            exercises: workout.exercises,
            totalExercises: workout.exercises.length,
            totalSets: workout.exercises.reduce((sum, ex) => sum + ex.sets.length, 0),
            totalReps: workout.exercises.reduce((sum, ex) => 
              sum + ex.sets.reduce((setSum, set) => setSum + set.reps, 0), 0
            ),
            totalWeight: workout.exercises.reduce((sum, ex) => 
              sum + ex.sets.reduce((setSum, set) => setSum + (set.weight * set.reps), 0), 0
            ),
            averageIntensity: 'medium',
            duration: Math.round((new Date() - workout.startTime) / (1000 * 60)) // РІ РјРёРЅСѓС‚Р°С…
          };

          await saveDetailedWorkout(
            dbUser.id,
            'strength',
            workoutDetails.duration,
            workoutDetails,
            workout.moodBefore,
            workout.moodAfter,
            workoutNotes
          );

          // РћС‡РёС‰Р°РµРј Р°РєС‚РёРІРЅСѓСЋ С‚СЂРµРЅРёСЂРѕРІРєСѓ
          activeWorkouts.delete(user.id);
          userStates.delete(user.id);

          await bot.sendMessage(
            chatId,
            `рџЋ‰ **РўСЂРµРЅРёСЂРѕРІРєР° СЃРѕС…СЂР°РЅРµРЅР°!**\n\n` +
            `рџ’Є **Р РµР·СѓР»СЊС‚Р°С‚С‹:**\n` +
            `вЂў РЈРїСЂР°Р¶РЅРµРЅРёР№: ${workoutDetails.totalExercises}\n` +
            `вЂў РџРѕРґС…РѕРґРѕРІ: ${workoutDetails.totalSets}\n` +
            `вЂў РџРѕРІС‚РѕСЂРµРЅРёР№: ${workoutDetails.totalReps}\n` +
            `вЂў РџРѕРґРЅСЏС‚Рѕ СЃ РѕС‚СЏРіРѕС‰РµРЅРёРµРј: ${workoutDetails.totalWeight} РєРі\n` +
            `вЂў Р’СЂРµРјСЏ: ${workoutDetails.duration} РјРёРЅ\n` +
            `вЂў РќР°СЃС‚СЂРѕРµРЅРёРµ: ${getMoodEmoji(workout.moodBefore)} в†’ ${getMoodEmoji(workout.moodAfter)}\n\n` +
            `РћС‚Р»РёС‡РЅР°СЏ СЂР°Р±РѕС‚Р°! рџ’Є`,
            { parse_mode: 'Markdown', ...userDataKeyboard }
          );

        } catch (error) {
          await bot.sendMessage(chatId, 'вќЊ РћС€РёР±РєР° РїСЂРё СЃРѕС…СЂР°РЅРµРЅРёРё С‚СЂРµРЅРёСЂРѕРІРєРё. РџРѕРїСЂРѕР±СѓР№С‚Рµ РµС‰Рµ СЂР°Р·.');
          console.error('РћС€РёР±РєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ С‚СЂРµРЅРёСЂРѕРІРєРё:', error);
        }
      }
      return;
    }

    // Р•СЃР»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РѕР¶РёРґР°РµС‚ РІРІРѕРґР° С‚РµРјС‹ РґР»СЏ РёСЃСЃР»РµРґРѕРІР°РЅРёСЏ
    if (userStates.get(user.id) === 'waiting_for_research_topic') {
      await handleSpecialAIRequest(bot, chatId, user, dbUser, text, 'рџ”¬ Р—Р°РїСѓСЃРєР°СЋ РіР»СѓР±РѕРєРёР№ Р°РЅР°Р»РёР·', 'deep_research');
      return;
    }

    // Р•СЃР»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РѕР¶РёРґР°РµС‚ РІРІРѕРґР° РґР°РЅРЅС‹С… РґР»СЏ С‚СЂРµРЅРёСЂРѕРІРѕС‡РЅРѕР№ РїСЂРѕРіСЂР°РјРјС‹
    if (userStates.get(user.id) === 'waiting_for_training_request') {
      await handleSpecialAIRequest(bot, chatId, user, dbUser, text, 'рџЏ‹пёЏвЂЌв™‚пёЏ РЎРѕР·РґР°СЋ РїРµСЂСЃРѕРЅР°Р»СЊРЅСѓСЋ РїСЂРѕРіСЂР°РјРјСѓ С‚СЂРµРЅРёСЂРѕРІРѕРє', 'training_program');
      return;
    }

    // Р•СЃР»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РѕР¶РёРґР°РµС‚ РІРІРѕРґР° РґР°РЅРЅС‹С… РґР»СЏ РїР»Р°РЅР° РїРёС‚Р°РЅРёСЏ
    if (userStates.get(user.id) === 'waiting_for_nutrition_request') {
      await handleSpecialAIRequest(bot, chatId, user, dbUser, text, 'рџҐ— РЎРѕСЃС‚Р°РІР»СЏСЋ РёРЅРґРёРІРёРґСѓР°Р»СЊРЅС‹Р№ РїР»Р°РЅ РїРёС‚Р°РЅРёСЏ', 'nutrition_plan');
      return;
    }

    // Р•СЃР»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РѕР¶РёРґР°РµС‚ РІРІРѕРґР° РёРЅС„РѕСЂРјР°С†РёРё Рѕ РґРѕР±Р°РІРєРµ
    if (userStates.get(user.id) === 'waiting_for_supplement_info') {
      await handleSpecialAIRequest(bot, chatId, user, dbUser, text, 'рџ§Є РђРЅР°Р»РёР·РёСЂСѓСЋ СЃРѕСЃС‚Р°РІ РґРѕР±Р°РІРєРё', 'composition_analysis');
      return;
    }

    // Р•СЃР»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РІ СЂРµР¶РёРјРµ С‡Р°С‚Р° СЃ РР
    if (userStates.get(user.id) === 'chatting_with_ai') {
      // РџСЂРѕРІРµСЂСЏРµРј РІРѕР·РјРѕР¶РЅРѕСЃС‚СЊ РґРµР»Р°С‚СЊ Р·Р°РїСЂРѕСЃС‹
      const requestStatus = await canUserMakeRequest(dbUser.id);
      
      if (!requestStatus.canMake) {
        userStates.delete(user.id);
        await bot.sendMessage(
          chatId,
          'вќЊ РЈ РІР°СЃ Р·Р°РєРѕРЅС‡РёР»РёСЃСЊ Р·Р°РїСЂРѕСЃС‹ Рє РР-С‚СЂРµРЅРµСЂСѓ.\n\n' +
          'рџ†“ Р‘РµСЃРїР»Р°С‚РЅС‹Рµ Р·Р°РїСЂРѕСЃС‹: 0/7\n' +
          'рџ’Ћ РћС„РѕСЂРјРёС‚Рµ РїРѕРґРїРёСЃРєСѓ РґР»СЏ РїСЂРѕРґРѕР»Р¶РµРЅРёСЏ!',
          noSubscriptionKeyboard
        );
        return;
      }

      // РћС‚РїСЂР°РІР»СЏРµРј Р·Р°РїСЂРѕСЃ РІ Coze
      await bot.sendChatAction(chatId, 'typing');
      
      // РћС‚РїСЂР°РІР»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ Рѕ С‚РѕРј, С‡С‚Рѕ Р±РѕС‚ РґСѓРјР°РµС‚
      const thinkingMessage = await bot.sendMessage(chatId, 'рџ¤” РђРЅР°Р»РёР·РёСЂСѓСЋ РІР°С€ РІРѕРїСЂРѕСЃ...');
      
      // РџСЂРѕРІРµСЂСЏРµРј, РµСЃС‚СЊ Р»Рё РєРѕРЅС‚РµРєСЃС‚ РѕС‚ РїСЂРµРґС‹РґСѓС‰РµРіРѕ workflow
      const workflowContext = userWorkflowContext.get(user.id);
      let messageWithContext = text;
      
      if (workflowContext && (Date.now() - workflowContext.timestamp) < 600000) { // 10 РјРёРЅСѓС‚
        messageWithContext = `РљРћРќРўР•РљРЎРў РџР Р•Р”Р«Р”РЈР©Р•Р“Рћ РђРќРђР›РР—Рђ:
РўРёРї Р°РЅР°Р»РёР·Р°: ${workflowContext.type}
Р—Р°РїСЂРѕСЃ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ: "${workflowContext.query}"
РџРѕР»СѓС‡РµРЅРЅС‹Р№ СЂРµР·СѓР»СЊС‚Р°С‚: "${workflowContext.result.substring(0, 1000)}..."

РќРћР’Р«Р™ Р’РћРџР РћРЎ РџРћР›Р¬Р—РћР’РђРўР•Р›РЇ: ${text}`;
        
        console.log(`рџ“‹ Р”РѕР±Р°РІР»РµРЅ РєРѕРЅС‚РµРєСЃС‚ workflow Рє СЃРѕРѕР±С‰РµРЅРёСЋ РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${user.id}`);
      }
      
  const aiResponse = await runCozeChat(user.access_token, messageWithContext, user.id, 'РћС‚РІРµС‡Р°Р№ РєР°Рє РїРµСЂСЃРѕРЅР°Р»СЊРЅС‹Р№ С„РёС‚РЅРµСЃвЂ‘С‚СЂРµРЅРµСЂ: Р±СѓРґСЊ РєРѕРЅРєСЂРµС‚РЅС‹Рј, СЃС‚СЂСѓРєС‚СѓСЂРёСЂСѓР№ РѕС‚РІРµС‚С‹ СЃРїРёСЃРєР°РјРё, РёР·Р±РµРіР°Р№ Р»РёС€РЅРµР№ РІРѕРґС‹.');
      
      // РЈРґР°Р»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ "РґСѓРјР°РµС‚"
      try {
        await bot.deleteMessage(chatId, thinkingMessage.message_id);
      } catch (deleteError) {
        // РРіРЅРѕСЂРёСЂСѓРµРј РѕС€РёР±РєРё СѓРґР°Р»РµРЅРёСЏ
      }
      
      if (aiResponse.success) {
        // РЎРїРёСЃС‹РІР°РµРј Р·Р°РїСЂРѕСЃ
        if (requestStatus.type === 'free') {
          await useFreeRequest(dbUser.id);
          const freeRequests = await getUserFreeRequests(dbUser.id);
          await bot.sendMessage(
            chatId, 
            aiResponse.message + `\n\nрџ†“ Р‘РµСЃРїР»Р°С‚РЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ РѕСЃС‚Р°Р»РѕСЃСЊ: ${freeRequests.remaining}/7`
          );
        } else if (requestStatus.type === 'subscription') {
          await incrementRequestUsage(dbUser.id);
          await bot.sendMessage(chatId, aiResponse.message);
        } else {
          await bot.sendMessage(chatId, aiResponse.message);
        }
      } else {
        await bot.sendMessage(chatId, aiResponse.message);
      }
      return;
    }

    // === РћР‘Р РђР‘РћРўР§РРљР РџРћР”РўР’Р•Р Р–Р”Р•РќРРЇ РЈР”РђР›Р•РќРРЇ ===
    
    // РћР±СЂР°Р±РѕС‚РєР° РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… С‚СЂРµРЅРёСЂРѕРІРѕРє
    if (userStates.get(user.id) === 'waiting_confirm_delete_all_workouts') {
      if (text === 'РЈР”РђР›РРўР¬ Р’РЎР• РўР Р•РќРР РћР’РљР') {
        userStates.delete(user.id);
        await processDeleteAllWorkouts(bot, chatId, dbUser.id);
        return;
      } else {
        userStates.delete(user.id);
        await bot.sendMessage(
          chatId,
          'вќЊ РЈРґР°Р»РµРЅРёРµ РѕС‚РјРµРЅРµРЅРѕ.\n\nР”Р»СЏ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ РЅСѓР¶РЅРѕ Р±С‹Р»Рѕ РЅР°РїРёСЃР°С‚СЊ С‚РѕС‡РЅРѕ: `РЈР”РђР›РРўР¬ Р’РЎР• РўР Р•РќРР РћР’РљР`',
          { parse_mode: 'Markdown', ...mainKeyboard }
        );
        return;
      }
    }
    
    // РћР±СЂР°Р±РѕС‚РєР° РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… Р·Р°РїРёСЃРµР№ РІРµСЃР°
    if (userStates.get(user.id) === 'waiting_confirm_delete_all_weights') {
      if (text === 'РЈР”РђР›РРўР¬ Р’РЎР• Р’Р•РЎРђ') {
        userStates.delete(user.id);
        await processDeleteAllWeights(bot, chatId, dbUser.id);
        return;
      } else {
        userStates.delete(user.id);
        await bot.sendMessage(
          chatId,
          'вќЊ РЈРґР°Р»РµРЅРёРµ РѕС‚РјРµРЅРµРЅРѕ.\n\nР”Р»СЏ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ РЅСѓР¶РЅРѕ Р±С‹Р»Рѕ РЅР°РїРёСЃР°С‚СЊ С‚РѕС‡РЅРѕ: `РЈР”РђР›РРўР¬ Р’РЎР• Р’Р•РЎРђ`',
          { parse_mode: 'Markdown', ...mainKeyboard }
        );
        return;
      }
    }

    // РћР±СЂР°Р±РѕС‚РєР° РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… С†РµР»РµР№
    if (userStates.get(user.id) === 'waiting_confirm_delete_all_goals') {
      if (text === 'РЈР”РђР›РРўР¬ Р’РЎР• Р¦Р•Р›Р') {
        userStates.delete(user.id);
        await processDeleteAllGoals(bot, chatId, dbUser.id);
        return;
      } else {
        userStates.delete(user.id);
        await bot.sendMessage(
          chatId,
          'вќЊ РЈРґР°Р»РµРЅРёРµ РѕС‚РјРµРЅРµРЅРѕ.\n\nР”Р»СЏ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ РЅСѓР¶РЅРѕ Р±С‹Р»Рѕ РЅР°РїРёСЃР°С‚СЊ С‚РѕС‡РЅРѕ: `РЈР”РђР›РРўР¬ Р’РЎР• Р¦Р•Р›Р`',
          { parse_mode: 'Markdown', ...mainKeyboard }
        );
        return;
      }
    }

    // РћР±СЂР°Р±РѕС‚РєР° РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… РґР°РЅРЅС‹С…
    if (userStates.get(user.id) === 'waiting_confirm_delete_all_data') {
      if (text === 'РЈР”РђР›РРўР¬ Р’РЎР• Р”РђРќРќР«Р•') {
        userStates.delete(user.id);
        await processDeleteAllData(bot, chatId, dbUser.id);
        return;
      } else {
        userStates.delete(user.id);
        await bot.sendMessage(
          chatId,
          'вќЊ РЈРґР°Р»РµРЅРёРµ РѕС‚РјРµРЅРµРЅРѕ.\n\nР”Р»СЏ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ РЅСѓР¶РЅРѕ Р±С‹Р»Рѕ РЅР°РїРёСЃР°С‚СЊ С‚РѕС‡РЅРѕ: `РЈР”РђР›РРўР¬ Р’РЎР• Р”РђРќРќР«Р•`',
          { parse_mode: 'Markdown', ...mainKeyboard }
        );
        return;
      }
    }

    // РљРѕРјР°РЅРґР° РІРѕР·РІСЂР°С‚Р° РІ РіР»Р°РІРЅРѕРµ РјРµРЅСЋ
    if (text === '/menu') {
      userStates.delete(user.id);
      await bot.sendMessage(
        chatId,
        'рџЏ  Р“Р»Р°РІРЅРѕРµ РјРµРЅСЋ',
        mainKeyboard
      );
      return;
    }

    // РљРѕРјР°РЅРґР° СЃР±СЂРѕСЃР° РґРёР°Р»РѕРіР° СЃ РР
    if (text === '/reset' || text === '/СЃР±СЂРѕСЃ') {
      // РЎР±СЂР°СЃС‹РІР°РµРј СЃРѕСЃС‚РѕСЏРЅРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
      userStates.delete(user.id);
      
      // РџРѕР»СѓС‡Р°РµРј С‚РѕРєРµРЅ РґРѕСЃС‚СѓРїР° РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
      const accessToken = await getUserAccessToken(dbUser.id);
      clearConversation(dbUser.id);
      
      await bot.sendMessage(
        chatId,
        'рџ”„ Р”РёР°Р»РѕРі СЃ РР СЃР±СЂРѕС€РµРЅ! РўРµРїРµСЂСЊ РјРѕР¶РµС‚Рµ РЅР°С‡Р°С‚СЊ РЅРѕРІРѕРµ РѕР±С‰РµРЅРёРµ СЃ С‡РёСЃС‚РѕРіРѕ Р»РёСЃС‚Р°.\n\nрџ’Ў Р’СЃРµ РїСЂРµРґС‹РґСѓС‰РёРµ РєРѕРјР°РЅРґС‹ Рё РєРѕРЅС‚РµРєСЃС‚ РѕС‡РёС‰РµРЅС‹.',
        mainKeyboard
      );
      return;
    }

    // === РџР РћР’Р•Р РљРђ РЎРћРЎРўРћРЇРќРРЇ РџРћР›Р¬Р—РћР’РђРўР•Р›РЇ ===
    const currentState = userStates.get(user.id);
    
    // РћР±СЂР°Р±РѕС‚РєР° СЃРѕСЃС‚РѕСЏРЅРёР№, РєРѕС‚РѕСЂС‹Рµ РѕР¶РёРґР°СЋС‚ РІРІРѕРґ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ (Р’Р•РЎ, Р¦Р•Р›Р Рё С‚.Рґ.)
    if (currentState) {
      await handleUserState(bot, chatId, user, dbUser, text, currentState);
      return;
    }
    
    // === РџР РћР’Р•Р РљРђ РРќРўР•Р РђРљРўРР’РќР«РҐ WORKFLOW ===
    // РџСЂРѕРІРµСЂСЏРµРј, РµСЃС‚СЊ Р»Рё Р°РєС‚РёРІРЅС‹Р№ РёРЅС‚РµСЂР°РєС‚РёРІРЅС‹Р№ workflow
    const activeWorkflow = userInteractiveWorkflow.get(user.id);
    if (activeWorkflow && (Date.now() - activeWorkflow.timestamp) < 600000) { // 10 РјРёРЅСѓС‚
      console.log(`рџ”„ РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ ${user.id} РѕС‚РІРµС‡Р°РµС‚ РЅР° РёРЅС‚РµСЂР°РєС‚РёРІРЅС‹Р№ workflow: ${activeWorkflow.type}`);
      
      // Р­С‚Рѕ РѕС‚РІРµС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РЅР° РёРЅС‚РµСЂР°РєС‚РёРІРЅС‹Р№ workflow
      await handleInteractiveWorkflowResponse(bot, chatId, user, dbUser, text, activeWorkflow);
      return;
    }
    
    // === РћР‘Р РђР‘РћРўРљРђ РљРћРњРђРќР” РР-РўР Р•РќР•Р Рђ ===
    // РўРѕР»СЊРєРѕ РєРЅРѕРїРєР° "рџ¤– РР-С‚СЂРµРЅРµСЂ" РґРѕР»Р¶РЅР° Р°РєС‚РёРІРёСЂРѕРІР°С‚СЊ AI, Р° СЃРѕСЃС‚РѕСЏРЅРёРµ 'chatting_with_ai' РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ РЅРёР¶Рµ
    if (text === 'рџ¤– РР-С‚СЂРµРЅРµСЂ') {
      await handleAITrainerConversation(bot, chatId, user, dbUser, text);
      return;
    }
    
    // === РџР РћР’Р•Р РљРђ РџРћР”РџРРЎРљР Р”Р›РЇ AI Р¤РЈРќРљР¦РР™ ===
    const subscription = await getActiveSubscription(dbUser.id);
    console.log(`User ${user.id} subscription status:`, subscription ? 'active' : 'none');

    // === РћР‘Р РђР‘РћРўРљРђ WORKFLOW РљРћРњРђРќР” ===
    // РЎРїРµС†РёР°Р»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° РґР»СЏ РєРѕРјР°РЅРґ Coze (РЅР°С‡РёРЅР°СЋС‰РёС…СЃСЏ СЃ /)
    if (text.startsWith('/')) {
      console.log(`рџ”§ РљРѕРјР°РЅРґР° Coze РѕС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${user.id}:`, text);
      
      if (!subscription) {
        await bot.sendMessage(
          chatId,
          'пїЅ **РР-РёРЅСЃС‚СЂСѓРјРµРЅС‚С‹ РґРѕСЃС‚СѓРїРЅС‹ С‚РѕР»СЊРєРѕ СЃ РїРѕРґРїРёСЃРєРѕР№**\n\n' +
          'пїЅ РћС„РѕСЂРјРёС‚Рµ РїРѕРґРїРёСЃРєСѓ РґР»СЏ РґРѕСЃС‚СѓРїР° Рє СЃРїРµС†РёР°Р»СЊРЅС‹Рј РёРЅСЃС‚СЂСѓРјРµРЅС‚Р°Рј!',
          { parse_mode: 'Markdown', ...noSubscriptionKeyboard }
        );
        return;
      }
      
      await handleWorkflowCommands(bot, chatId, user, dbUser, text);
      return;
    }
    
    // === РћР‘Р РђР‘РћРўРљРђ Р Р•Р–РРњРђ РР-РўР Р•РќР•Р Рђ ===
    // Р•СЃР»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РЅР°С…РѕРґРёС‚СЃСЏ РІ СЂРµР¶РёРјРµ РѕР±С‰РµРЅРёСЏ СЃ РР
    if (currentState === 'chatting_with_ai') {
      // РџСЂРѕРІРµСЂСЏРµРј РІРѕР·РјРѕР¶РЅРѕСЃС‚СЊ РґРµР»Р°С‚СЊ Р·Р°РїСЂРѕСЃС‹
      const requestStatus = await canUserMakeRequest(dbUser.id);
      
      if (!requestStatus.canMake) {
        userStates.delete(user.id);
        await bot.sendMessage(
          chatId,
          'вќЊ РЈ РІР°СЃ Р·Р°РєРѕРЅС‡РёР»РёСЃСЊ Р·Р°РїСЂРѕСЃС‹ Рє РР-С‚СЂРµРЅРµСЂСѓ.\n\n' +
          'рџ†“ Р‘РµСЃРїР»Р°С‚РЅС‹Рµ Р·Р°РїСЂРѕСЃС‹: 0/7\n' +
          'рџ’Ћ РћС„РѕСЂРјРёС‚Рµ РїРѕРґРїРёСЃРєСѓ РґР»СЏ РїСЂРѕРґРѕР»Р¶РµРЅРёСЏ!',
          noSubscriptionKeyboard
        );
        return;
      }

      // РћС‚РїСЂР°РІР»СЏРµРј Р·Р°РїСЂРѕСЃ РІ Coze
      await bot.sendChatAction(chatId, 'typing');
      
      // РћС‚РїСЂР°РІР»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ Рѕ С‚РѕРј, С‡С‚Рѕ Р±РѕС‚ РґСѓРјР°РµС‚
      const thinkingMessage = await bot.sendMessage(chatId, 'рџ¤” РђРЅР°Р»РёР·РёСЂСѓСЋ РІР°С€ РІРѕРїСЂРѕСЃ...');
      
      // РџСЂРѕРІРµСЂСЏРµРј, РµСЃС‚СЊ Р»Рё РєРѕРЅС‚РµРєСЃС‚ РѕС‚ РїСЂРµРґС‹РґСѓС‰РµРіРѕ workflow
      const workflowContext = userWorkflowContext.get(user.id);
      let messageWithContext = text;
      
      if (workflowContext && (Date.now() - workflowContext.timestamp) < 600000) { // 10 РјРёРЅСѓС‚
        messageWithContext = `РљРћРќРўР•РљРЎРў РџР Р•Р”Р«Р”РЈР©Р•Р“Рћ РђРќРђР›РР—Рђ:
РўРёРї Р°РЅР°Р»РёР·Р°: ${workflowContext.type}
Р—Р°РїСЂРѕСЃ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ: "${workflowContext.query}"
РџРѕР»СѓС‡РµРЅРЅС‹Р№ СЂРµР·СѓР»СЊС‚Р°С‚: "${workflowContext.result.substring(0, 1000)}..."

РќРћР’Р«Р™ Р’РћРџР РћРЎ РџРћР›Р¬Р—РћР’РђРўР•Р›РЇ: ${text}`;
        
        console.log(`рџ“‹ Р”РѕР±Р°РІР»РµРЅ РєРѕРЅС‚РµРєСЃС‚ workflow Рє СЃРѕРѕР±С‰РµРЅРёСЋ РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${user.id}`);
      }
      
      const aiResponse = await runCozeChat(user.access_token, messageWithContext, user.id, 'РћС‚РІРµС‡Р°Р№ РєР°Рє РїРµСЂСЃРѕРЅР°Р»СЊРЅС‹Р№ С„РёС‚РЅРµСЃвЂ‘С‚СЂРµРЅРµСЂ: Р±СѓРґСЊ РєРѕРЅРєСЂРµС‚РЅС‹Рј, СЃС‚СЂСѓРєС‚СѓСЂРёСЂСѓР№ РѕС‚РІРµС‚С‹ СЃРїРёСЃРєР°РјРё, РёР·Р±РµРіР°Р№ Р»РёС€РЅРµР№ РІРѕРґС‹.');
      
      // РЈРґР°Р»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ "РґСѓРјР°РµС‚"
      try {
        await bot.deleteMessage(chatId, thinkingMessage.message_id);
      } catch (deleteError) {
        // РРіРЅРѕСЂРёСЂСѓРµРј РѕС€РёР±РєРё СѓРґР°Р»РµРЅРёСЏ
      }
      
      if (aiResponse.success) {
        // РЎРїРёСЃС‹РІР°РµРј Р·Р°РїСЂРѕСЃ
        if (requestStatus.type === 'free') {
          await useFreeRequest(dbUser.id);
          const freeRequests = await getUserFreeRequests(dbUser.id);
          await bot.sendMessage(
            chatId, 
            aiResponse.message + `\n\nрџ†“ Р‘РµСЃРїР»Р°С‚РЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ РѕСЃС‚Р°Р»РѕСЃСЊ: ${freeRequests.remaining}/7`
          );
        } else if (requestStatus.type === 'subscription') {
          await incrementRequestUsage(dbUser.id);
          await bot.sendMessage(chatId, aiResponse.message);
        } else {
          await bot.sendMessage(chatId, aiResponse.message);
        }
      } else {
        await bot.sendMessage(chatId, aiResponse.message);
      }
      return;
    }
    
    // === РЈРўРћР§РќРЇР®Р©РР• Р’РћРџР РћРЎР« Рљ WORKFLOW ===
    // РџСЂРѕРІРµСЂСЏРµРј, РµСЃС‚СЊ Р»Рё РєРѕРЅС‚РµРєСЃС‚ РїРѕСЃР»РµРґРЅРµРіРѕ workflow РґР»СЏ СѓС‚РѕС‡РЅСЏСЋС‰РёС… РІРѕРїСЂРѕСЃРѕРІ
    const workflowContext = userWorkflowContext.get(user.id);
    if (workflowContext && (Date.now() - workflowContext.timestamp) < 600000) { // 10 РјРёРЅСѓС‚
      console.log(`рџ“‹ РћР±РЅР°СЂСѓР¶РµРЅ РєРѕРЅС‚РµРєСЃС‚ workflow РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${user.id}, РѕР±СЂР°Р±Р°С‚С‹РІР°РµРј СѓС‚РѕС‡РЅСЏСЋС‰РёР№ РІРѕРїСЂРѕСЃ`);
      
      // РџСЂРѕРІРµСЂСЏРµРј Р»РёРјРёС‚С‹ Р·Р°РїСЂРѕСЃРѕРІ
      const requestStatus = await canUserMakeRequest(dbUser.id);
      if (!requestStatus.canMake) {
        if (requestStatus.type === 'free') {
          await bot.sendMessage(
            chatId, 
            `рџ†“ РСЃС‡РµСЂРїР°РЅ Р»РёРјРёС‚ Р±РµСЃРїР»Р°С‚РЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ (${requestStatus.used}/${requestStatus.limit}).\n\nрџ’Ћ РћС„РѕСЂРјРёС‚Рµ РїРѕРґРїРёСЃРєСѓ РґР»СЏ РЅРµРѕРіСЂР°РЅРёС‡РµРЅРЅРѕРіРѕ РґРѕСЃС‚СѓРїР° Рє РР-С‚СЂРµРЅРµСЂСѓ!`,
            subscriptionKeyboard
          );
        } else {
          await bot.sendMessage(
            chatId, 
            `рџ“Љ РСЃС‡РµСЂРїР°РЅ Р»РёРјРёС‚ Р·Р°РїСЂРѕСЃРѕРІ (${requestStatus.used}/${requestStatus.limit}).\n\nрџ’і РџСЂРѕРґР»РёС‚Рµ РїРѕРґРїРёСЃРєСѓ РґР»СЏ РїСЂРѕРґРѕР»Р¶РµРЅРёСЏ СЂР°Р±РѕС‚С‹!`,
            subscriptionKeyboard
          );
        }
        return;
      }

      // РћС‚РїСЂР°РІР»СЏРµРј СѓС‚РѕС‡РЅСЏСЋС‰РёР№ РІРѕРїСЂРѕСЃ РІ Coze API СЃ РєРѕРЅС‚РµРєСЃС‚РѕРј
      await bot.sendChatAction(chatId, 'typing');
      const thinkingMessage = await bot.sendMessage(chatId, 'рџ¤” РђРЅР°Р»РёР·РёСЂСѓСЋ РІР°С€ РІРѕРїСЂРѕСЃ СЃ СѓС‡РµС‚РѕРј РїСЂРµРґС‹РґСѓС‰РµРіРѕ РєРѕРЅС‚РµРєСЃС‚Р°...');

      // Р¤РѕСЂРјРёСЂСѓРµРј СЃРѕРѕР±С‰РµРЅРёРµ СЃ РєРѕРЅС‚РµРєСЃС‚РѕРј
      const messageWithContext = `РљРћРќРўР•РљРЎРў РџР Р•Р”Р«Р”РЈР©Р•Р“Рћ РђРќРђР›РР—Рђ:
РўРёРї Р°РЅР°Р»РёР·Р°: ${workflowContext.type}
Р’РѕРїСЂРѕСЃ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ: "${workflowContext.userQuestion}"
РџРѕР»СѓС‡РµРЅРЅС‹Р№ СЂРµР·СѓР»СЊС‚Р°С‚: "${workflowContext.workflowResponse.substring(0, 1500)}..."

РЈРўРћР§РќРЇР®Р©РР™ Р’РћРџР РћРЎ РџРћР›Р¬Р—РћР’РђРўР•Р›РЇ: ${text}

РџРѕР¶Р°Р»СѓР№СЃС‚Р°, РѕС‚РІРµС‚СЊ РЅР° СѓС‚РѕС‡РЅСЏСЋС‰РёР№ РІРѕРїСЂРѕСЃ СЃ СѓС‡РµС‚РѕРј РєРѕРЅС‚РµРєСЃС‚Р° РїСЂРµРґС‹РґСѓС‰РµРіРѕ Р°РЅР°Р»РёР·Р°.`;

      console.log(`рџ”Ќ РћС‚РїСЂР°РІР»СЏРµРј СѓС‚РѕС‡РЅСЏСЋС‰РёР№ РІРѕРїСЂРѕСЃ РІ Coze API РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${user.id}`);
      
      const aiResponse = await runCozeChat(user.access_token, messageWithContext, user.id, 'РћС‚РІРµС‡Р°Р№ РєР°Рє РїРµСЂСЃРѕРЅР°Р»СЊРЅС‹Р№ С„РёС‚РЅРµСЃвЂ‘С‚СЂРµРЅРµСЂ Рё СЌРєСЃРїРµСЂС‚ РїРѕ РїРёС‚Р°РЅРёСЋ: Р±СѓРґСЊ РєРѕРЅРєСЂРµС‚РЅС‹Рј, СЃС‚СЂСѓРєС‚СѓСЂРёСЂСѓР№ РѕС‚РІРµС‚С‹ СЃРїРёСЃРєР°РјРё, РёСЃРїРѕР»СЊР·СѓР№ РєРѕРЅС‚РµРєСЃС‚ РїСЂРµРґС‹РґСѓС‰РµРіРѕ Р°РЅР°Р»РёР·Р°.');

      // РЈРґР°Р»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ "РґСѓРјР°РµС‚"
      try {
        await bot.deleteMessage(chatId, thinkingMessage.message_id);
      } catch (deleteError) {
        // РРіРЅРѕСЂРёСЂСѓРµРј РѕС€РёР±РєРё СѓРґР°Р»РµРЅРёСЏ
      }

      if (aiResponse.success) {
        // РћР±РЅРѕРІР»СЏРµРј timestamp РєРѕРЅС‚РµРєСЃС‚Р° РґР»СЏ РІРѕР·РјРѕР¶РЅРѕСЃС‚Рё РґР°Р»СЊРЅРµР№С€РёС… СѓС‚РѕС‡РЅРµРЅРёР№
        workflowContext.timestamp = Date.now();
        
        // РЎРїРёСЃС‹РІР°РµРј Р·Р°РїСЂРѕСЃ
        if (requestStatus.type === 'free') {
          await useFreeRequest(dbUser.id);
          const freeRequests = await getUserFreeRequests(dbUser.id);
          await bot.sendMessage(
            chatId, 
            aiResponse.message + `\n\nрџ†“ Р‘РµСЃРїР»Р°С‚РЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ РѕСЃС‚Р°Р»РѕСЃСЊ: ${freeRequests.remaining}/7`
          );
        } else if (requestStatus.type === 'subscription') {
          await incrementRequestUsage(dbUser.id);
          await bot.sendMessage(chatId, aiResponse.message);
        } else {
          await bot.sendMessage(chatId, aiResponse.message);
        }
      } else {
        await bot.sendMessage(chatId, 'вќЊ РР·РІРёРЅРёС‚Рµ, РЅРµ СѓРґР°Р»РѕСЃСЊ РїРѕР»СѓС‡РёС‚СЊ РѕС‚РІРµС‚ РѕС‚ РР. РџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ.');
      }
    }
    // Р•СЃР»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РЅРµ РІ СЂРµР¶РёРјРµ РР-С‚СЂРµРЅРµСЂР° Рё СЌС‚Рѕ РЅРµ РєРЅРѕРїРєР°/РєРѕРјР°РЅРґР°
    console.log(`User ${user.id} sent unrecognized message, showing main menu`);
    await bot.sendMessage(
      chatId,
      'рџ¤” РќРµ РїРѕРЅСЏР» РІР°С€ Р·Р°РїСЂРѕСЃ. РСЃРїРѕР»СЊР·СѓР№С‚Рµ РєРЅРѕРїРєРё РјРµРЅСЋ РґР»СЏ РЅР°РІРёРіР°С†РёРё.\n\n' +
      'рџ’Ў Р”Р»СЏ РѕР±С‰РµРЅРёСЏ СЃ РР-С‚СЂРµРЅРµСЂРѕРј РЅР°Р¶РјРёС‚Рµ "рџ¤– РР-С‚СЂРµРЅРµСЂ"',
      mainKeyboard
    );

}

// Export functions  
export { handleTextMessage, handleCallbackQuery };

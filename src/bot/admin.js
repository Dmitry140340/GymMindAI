import { getStats, checkExpiredSubscriptions, activateSubscription, getUserByTelegramId } from '../services/database.js';
import { checkCozeConnection, sendMessageToCoze } from '../services/coze.js';

// –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export function setupAdminHandlers(bot) {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π Telegram ID
  bot.onText(/\/my_id/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    await bot.sendMessage(chatId, `–í–∞—à Telegram ID: ${userId}`);
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
  bot.onText(/\/admin_stats/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [];
    
    if (!adminIds.includes(userId)) {
      await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    try {
      const stats = await getStats();
      const cozeStatus = await checkCozeConnection();
      
      const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n` +
                     `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}\n` +
                     `üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${stats.active_subscriptions}\n` +
                     `üí≥ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${stats.successful_payments}\n` +
                     `üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${stats.total_revenue || 0}‚ÇΩ\n\n` +
                     `ü§ñ Coze API: ${cozeStatus ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n` +
                     `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;
      
      await bot.sendMessage(chatId, message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  bot.onText(/\/admin_check_expired/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [];
    
    if (!adminIds.includes(userId)) {
      await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    try {
      const expiredCount = await checkExpiredSubscriptions();
      await bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${expiredCount}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫.');
    }
  });

  // –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  // –¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  bot.onText(/\/admin_activate_test (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const targetTelegramId = parseInt(match[1]);
    
    const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [];
    
    if (!adminIds.includes(userId)) {
      await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    try {
      console.log(`Attempting to activate test subscription for user: ${targetTelegramId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await getUserByTelegramId(targetTelegramId);
      if (!user) {
        await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }
      
      console.log(`Found user in database:`, user);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é
      const testPaymentId = `test_${Date.now()}_${targetTelegramId}`;
      const endDate = new Date();
      endDate.setMonth(endDate.getMonth() + 1); // +1 –º–µ—Å—è—Ü
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
      const crypto = await import('crypto');
      const timestamp = Date.now();
      const data = `${user.id}-${testPaymentId}-${timestamp}-${process.env.YOOKASSA_SECRET_KEY}`;
      const accessToken = crypto.createHash('sha256').update(data).digest('hex').substring(0, 32);
      
      console.log(`Creating test subscription with payment_id: ${testPaymentId}`);
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é
      const { createSubscription, activateSubscription } = await import('../services/database.js');
      const subscriptionId = await createSubscription(user.id, 'monthly', 999, testPaymentId);
      
      console.log(`Test subscription created with ID: ${subscriptionId}`);
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const activated = await activateSubscription(testPaymentId);
      console.log(`Subscription activation result: ${activated}`);
      
      if (activated) {
        await bot.sendMessage(chatId, `‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetTelegramId}\nSubscription ID: ${subscriptionId}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await bot.sendMessage(targetTelegramId, 
            'üéâ –í–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n' +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–∞!\n\n' +
            'üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏—Ç–Ω–µ—Å–µ!'
          );
        } catch (notifyError) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', notifyError.message);
        }
      } else {
        await bot.sendMessage(chatId, `‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. ID: ${subscriptionId}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`);
    }
  });

  // –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.onText(/\/admin_broadcast (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const message = match[1];
    
    const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [];
    
    if (!adminIds.includes(userId)) {
      await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await bot.sendMessage(chatId, '‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.');
  });

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Coze API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
  bot.onText(/\/admin_test_coze(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const testMessage = match ? match[1] : '–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?';
    
    const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [];
    
    if (!adminIds.includes(userId)) {
      await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    try {
      await bot.sendMessage(chatId, 'üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Coze...');
      
      const isConnected = await checkCozeConnection();
      if (!isConnected) {
        await bot.sendMessage(chatId, 
          '‚ùå Coze API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n' +
          'üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n' +
          '‚Ä¢ COZE_API_KEY –≤ .env —Ñ–∞–π–ª–µ\n' +
          '‚Ä¢ COZE_BOT_ID –≤ .env —Ñ–∞–π–ª–µ\n' +
          '‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'
        );
        return;
      }
      
      const response = await sendMessageToCoze(testMessage, userId);
      
      if (response.success) {
        await bot.sendMessage(chatId, 
          '‚úÖ Coze API —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n' +
          'ü§ñ –û—Ç–≤–µ—Ç –æ—Ç –ò–ò:\n' +
          response.message
        );
      } else {
        await bot.sendMessage(chatId, 
          '‚ö†Ô∏è Coze API –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å:\n' +
          response.message
        );
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Coze:', error);
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Coze: ${error.message}`);
    }
  });

  console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

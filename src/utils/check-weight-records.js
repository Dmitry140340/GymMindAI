import { initDatabase, getUserMetrics } from '../services/database.js';

async function checkWeightRecords() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 55 (ID –∏–∑ –ª–æ–≥–æ–≤)
    const weightRecords = await getUserMetrics(55, 'weight', 20);
    
    console.log('üîç –ó–∞–ø–∏—Å–∏ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 55:');
    console.log('–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', weightRecords.length);
    console.log('\n–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–µ–π:');
    
    weightRecords.forEach((record, index) => {
      const date = new Date(record.recorded_at);
      console.log(`${index + 1}. ${record.value} ${record.unit} - ${date.toLocaleDateString('ru-RU')} ${date.toLocaleTimeString('ru-RU')}`);
      console.log(`   ID: ${record.id}, Metric Type: ${record.metric_type}`);
      if (record.notes) {
        console.log(`   –ó–∞–º–µ—Ç–∫–∏: ${record.notes}`);
      }
      console.log('');
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
  
  process.exit(0);
}

checkWeightRecords();

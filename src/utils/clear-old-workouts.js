import { initDatabase } from '../services/database.js';
import sqlite3 from 'sqlite3';

let db;

async function clearOldWorkouts() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = new sqlite3.Database(process.env.DATABASE_PATH || './data/subscriptions.db');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å
    const allWorkouts = await new Promise((resolve, reject) => {
      db.all(`
        SELECT id, user_id, workout_type, duration_minutes, workout_details, completed_at 
        FROM workouts 
        ORDER BY completed_at DESC
      `, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${allWorkouts.length}`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ workout_details)
    const oldWorkouts = allWorkouts.filter(w => !w.workout_details || w.workout_details === null);
    const detailedWorkouts = allWorkouts.filter(w => w.workout_details && w.workout_details !== null);
    
    console.log(`üìã –ó–∞–ø–∏—Å–∏ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π (—Å—Ç–∞—Ä—ã–µ): ${oldWorkouts.length}`);
    console.log(`üí™ –ó–∞–ø–∏—Å–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ (–Ω–æ–≤—ã–µ): ${detailedWorkouts.length}`);
    
    if (oldWorkouts.length > 0) {
      console.log('\nüóëÔ∏è –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:');
      oldWorkouts.forEach(workout => {
        const date = new Date(workout.completed_at).toLocaleDateString('ru-RU');
        console.log(`   ID: ${workout.id}, User: ${workout.user_id}, Type: ${workout.workout_type}, Date: ${date}`);
      });
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      const deleteResult = await new Promise((resolve, reject) => {
        db.run(`
          DELETE FROM workouts 
          WHERE workout_details IS NULL OR workout_details = ''
        `, function(err) {
          if (err) reject(err);
          else resolve(this.changes);
        });
      });
      
      console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`);
    } else {
      console.log('\n‚úÖ –°—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    if (detailedWorkouts.length > 0) {
      console.log('\nüí™ –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:');
      detailedWorkouts.forEach(workout => {
        const date = new Date(workout.completed_at).toLocaleDateString('ru-RU');
        try {
          const details = JSON.parse(workout.workout_details);
          console.log(`   ID: ${workout.id}, User: ${workout.user_id}, Date: ${date}, Exercises: ${details.totalExercises || 0}`);
        } catch (e) {
          console.log(`   ID: ${workout.id}, User: ${workout.user_id}, Date: ${date}, Details: JSON error`);
        }
      });
    }
    
    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  } finally {
    if (db) {
      db.close();
    }
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
clearOldWorkouts();

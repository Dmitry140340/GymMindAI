import { initDatabase, getUserDetailedWorkouts } from '../services/database.js';

async function testNewHistoryFormat() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 55
    const userId = 55;
    const workouts = await getUserDetailedWorkouts(userId, 5);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${workouts.length}\n`);
    
    if (workouts.length > 0) {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
      let message = 'üèãÔ∏è‚Äç‚ôÇÔ∏è **–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)\n\n';
      
      workouts.forEach((workout, index) => {
        const date = new Date(workout.completed_at).toLocaleDateString('ru-RU');
        const time = new Date(workout.completed_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        const isLatest = index === 0 ? ' ‚≠ê' : '';
        
        message += `üìÖ **${date} –≤ ${time}**${isLatest}\n`;
        message += `üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: ${workout.workout_type === 'strength' ? '–°–∏–ª–æ–≤–∞—è' : workout.workout_type}\n`;
        
        if (workout.duration_minutes > 0) {
          message += `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${workout.duration_minutes} –º–∏–Ω\n`;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö
        if (workout.workout_details && workout.workout_details.exercises) {
          const details = workout.workout_details;
          const exerciseCount = details.exercises.length;
          const totalSets = details.exercises.reduce((sum, ex) => sum + ex.sets.length, 0);
          const totalReps = details.exercises.reduce((sum, ex) => 
            sum + ex.sets.reduce((setSum, set) => setSum + set.reps, 0), 0);
          const totalWeight = details.exercises.reduce((sum, ex) => 
            sum + ex.sets.reduce((setSum, set) => setSum + (set.weight * set.reps), 0), 0);
          
          message += `üìä ${exerciseCount} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, ${totalSets} –ø–æ–¥—Ö–æ–¥–æ–≤, ${totalReps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n`;
          if (totalWeight > 0) {
            message += `‚öñÔ∏è –ü–æ–¥–Ω—è—Ç–æ —Å –æ—Ç—è–≥–æ—â–µ–Ω–∏–µ–º: ${totalWeight} –∫–≥\n`;
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
          message += `üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n`;
          details.exercises.forEach((ex, i) => {
            const exerciseTotalReps = ex.sets.reduce((sum, set) => sum + set.reps, 0);
            const exerciseWeight = ex.sets.length > 0 ? ex.sets[0].weight : 0;
            const weightText = exerciseWeight === 0 ? '(—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å)' : `(${exerciseWeight} –∫–≥)`;
            message += `   ${i + 1}. ${ex.name}: ${ex.sets.length}√ó${exerciseTotalReps > 0 ? Math.round(exerciseTotalReps / ex.sets.length) : '?'} ${weightText}\n`;
          });
        }
        
        message += '\n';
      });
      
      message += '‚≠ê - –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n';
      message += 'üí° –§–æ—Ä–º–∞—Ç: –ø–æ–¥—Ö–æ–¥—ã√ó—Å—Ä–µ–¥–Ω–∏–µ_–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è';
      
      console.log('üì± –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:');
      console.log('=' .repeat(50));
      console.log(message);
      console.log('=' .repeat(50));
    } else {
      console.log('‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNewHistoryFormat();

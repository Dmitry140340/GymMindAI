// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
import { handleMessage } from '../bot/handlers.js';

const testUser = {
  id: 659874549,
  username: 'testuser',
  first_name: 'Test',
  last_name: 'User'
};

const testChat = {
  id: 659874549,
  type: 'private'
};

// –ú–æ–∫ –¥–ª—è –±–æ—Ç–∞
const mockBot = {
  sendMessage: (chatId, text, options) => {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`);
    console.log(`üìù –¢–µ–∫—Å—Ç: ${text}`);
    if (options) console.log(`‚öôÔ∏è –û–ø—Ü–∏–∏:`, options);
    return Promise.resolve();
  },
  sendChatAction: (chatId, action) => {
    console.log(`‚è≥ –î–µ–π—Å—Ç–≤–∏–µ –≤ —á–∞—Ç–µ ${chatId}: ${action}`);
    return Promise.resolve();
  }
};

async function testCommands() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n');
  
  // –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /nutrition_plan
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /nutrition_plan');
  try {
    await handleMessage(mockBot, {
      message_id: 1,
      from: testUser,
      chat: testChat,
      date: Math.floor(Date.now() / 1000),
      text: '/nutrition_plan'
    });
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /nutrition_plan –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /nutrition_plan:', error.message);
  }
  
  // –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /training_program
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /training_program');
  try {
    await handleMessage(mockBot, {
      message_id: 2,
      from: testUser,
      chat: testChat,
      date: Math.floor(Date.now() / 1000),
      text: '/training_program'
    });
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /training_program –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /training_program:', error.message);
  }
  
  // –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
  console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å —ç–º–æ–¥–∑–∏ ü•ó /nutrition_plan');
  try {
    await handleMessage(mockBot, {
      message_id: 3,
      from: testUser,
      chat: testChat,
      date: Math.floor(Date.now() / 1000),
      text: 'ü•ó /nutrition_plan'
    });
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testCommands().catch(console.error);

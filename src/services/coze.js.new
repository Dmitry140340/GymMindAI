import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const COZE_API_BASE_URL = 'https://api.coze.com';

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow
export async function runWorkflow(workflowId, parameters) {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ workflow:', { workflowId, parameters });
    console.log('üîë API Key –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', !!process.env.COZE_API_KEY);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ—Ä–∫—Ñ–ª–æ—É –ø–æ ID
    const interactiveWorkflows = [
      process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID,
      process.env.COZE_NUTRITION_PLAN_WORKFLOW_ID
    ];
    
    const isInteractive = interactiveWorkflows.includes(workflowId);
    
    if (isInteractive) {
      console.log('üîÑ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π workflow - –∏—Å–ø–æ–ª—å–∑—É–µ–º Chat API');
      // –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É –∏—Å–ø–æ–ª—å–∑—É–µ–º Chat API
      return await runInteractiveWorkflow(workflowId, parameters);
    } else {
      console.log('‚ö° –ü—Ä–æ—Å—Ç–æ–π workflow - –∏—Å–ø–æ–ª—å–∑—É–µ–º Workflow API');
      // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Workflow API
      return await runSimpleWorkflow(workflowId, parameters);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ workflow:', error.message);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ workflow: ${error.message}`
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É (deepresearch, composition_analysis)
async function runSimpleWorkflow(workflowId, parameters) {
  try {
    console.log('üåê API URL:', `${COZE_API_BASE_URL}/v1/workflow/run`);

    const requestData = {
      workflow_id: workflowId,
      parameters: parameters,
      is_async: false
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Coze Workflow API:', JSON.stringify(requestData, null, 2));

    const response = await axios.post(
      `${COZE_API_BASE_URL}/v1/workflow/run`,
      requestData,
      {
        headers: {
          'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000 // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
      }
    );

    console.log('üì• –û—Ç–≤–µ—Ç workflow API:', {
      status: response.status,
      code: response.data?.code,
      data: response.data
    });

    if (response.data && response.data.code === 0) {
      let workflowData = response.data.data;
      let resultMessage = null;
      
      console.log('üîç –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ workflow:', typeof workflowData, workflowData);
      
      // –ï—Å–ª–∏ data —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, –ø–∞—Ä—Å–∏–º –µ—ë
      if (typeof workflowData === 'string') {
        try {
          workflowData = JSON.parse(workflowData);
          console.log('üìã –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ workflow:', workflowData);
        } catch (e) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ workflow:', e.message);
        }
      }
      
      // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
      if (workflowData?.output_final) {
        resultMessage = workflowData.output_final;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω output_final:', resultMessage.substring(0, 100) + '...');
      } else if (workflowData?.output) {
        resultMessage = workflowData.output;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω output:', resultMessage.substring(0, 100) + '...');
      } else if (workflowData?.result) {
        resultMessage = workflowData.result;
      } else if (workflowData?.answer) {
        resultMessage = workflowData.answer;
      } else if (typeof workflowData === 'string') {
        resultMessage = workflowData;
      }
      
      console.log('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç workflow:', resultMessage ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
      
      return {
        success: true,
        data: response.data.data,
        message: resultMessage || 'Workflow –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      };
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ workflow:', response.data);
      return {
        success: false,
        error: response.data?.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ workflow'
      };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å—Ç–æ–≥–æ workflow:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      message: error.message
    });
    
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ workflow: ${error.response?.data?.msg || error.message}`
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É (training_program, nutrition_plan)
async function runInteractiveWorkflow(workflowId, parameters) {
  try {
    console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º Chat API –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ—Ä–∫—Ñ–ª–æ—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let message = '';
    const requestType = parameters.request_type;
    const userInput = parameters.input;
    
    if (requestType === 'training_program') {
      message = `–°–æ–∑–¥–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è: ${userInput}`;
    } else if (requestType === 'nutrition_plan') {
      message = `–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è: ${userInput}`;
    } else {
      message = userInput;
    }
    
    console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Chat API:', message);
    
    const chatData = {
      bot_id: process.env.COZE_BOT_ID,
      user_id: parameters.user_id,
      stream: false,
      auto_save_history: true,
      additional_messages: [
        {
          role: 'user',
          content: message,
          content_type: 'text'
        }
      ]
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Coze Chat API:', JSON.stringify(chatData, null, 2));

    const response = await axios.post(
      `${COZE_API_BASE_URL}/v3/chat`,
      chatData,
      {
        headers: {
          'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000 // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
      }
    );

    console.log('üì• –û—Ç–≤–µ—Ç Chat API:', {
      status: response.status,
      code: response.data?.code,
      dataType: typeof response.data?.data
    });

    if (response.data && response.data.code === 0) {
      const chatData = response.data.data;
      let resultMessage = '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
      if (chatData?.messages && Array.isArray(chatData.messages)) {
        const assistantMessages = chatData.messages.filter(msg => msg.role === 'assistant');
        
        if (assistantMessages.length > 0) {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          resultMessage = assistantMessages
            .map(msg => msg.content || '')
            .join('\n\n')
            .trim();
          
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', assistantMessages.length);
        } else {
          console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } else {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ Chat API');
      }
      
      return {
        success: true,
        data: chatData,
        message: resultMessage || '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π workflow –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      };
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ Chat API:', response.data);
      return {
        success: false,
        error: response.data?.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Chat API'
      };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      message: error.message
    });
    
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow: ${error.response?.data?.msg || error.message}`
    };
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Coze AI —á–µ—Ä–µ–∑ Chat API
export async function sendMessageToCoze(message, userId, conversationId = null) {
  try {
    // –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ chat API
    if (process.env.COZE_API_KEY && process.env.COZE_BOT_ID && 
        !process.env.COZE_API_KEY.includes('your_')) {
      
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Coze Chat API:', {
        botId: process.env.COZE_BOT_ID,
        message: message.substring(0, 50) + '...',
        userId
      });

      const chatData = {
        bot_id: process.env.COZE_BOT_ID,
        user_id: userId.toString(),
        stream: false,
        auto_save_history: true,
        additional_messages: [
          {
            role: 'user',
            content: message,
            content_type: 'text'
          }
        ]
      };

      if (conversationId) {
        chatData.conversation_id = conversationId;
      }

      const response = await axios.post(
        `${COZE_API_BASE_URL}/v3/chat`,
        chatData,
        {
          headers: {
            'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 120000 // 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
        }
      );

      if (response.data && response.data.code === 0) {
        const chatResponse = response.data.data;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if (chatResponse?.messages && Array.isArray(chatResponse.messages)) {
          const assistantMessages = chatResponse.messages.filter(msg => msg.role === 'assistant');
          
          if (assistantMessages.length > 0) {
            const fullMessage = assistantMessages
              .map(msg => msg.content || '')
              .join('\n\n')
              .trim();
            
            return {
              success: true,
              data: fullMessage,
              conversationId: chatResponse.conversation_id
            };
          }
        }
        
        return {
          success: false,
          error: '–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞'
        };
      } else {
        return {
          success: false,
          error: response.data?.msg || '–û—à–∏–±–∫–∞ API'
        };
      }
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
      return await simulateAIResponse(message, userId);
    }
  } catch (error) {
    console.error('Error calling Coze API:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      message: error.message,
      url: error.config?.url
    });
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    return await simulateAIResponse(message, userId);
  }
}

// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
async function simulateAIResponse(message, userId) {
  const responses = [
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–æ –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
    "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
    "–û—Ç–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –°–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.",
    "–ü–æ–Ω—è–ª –≤–∞—à—É –∑–∞–¥–∞—á—É! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º."
  ];
  
  const randomResponse = responses[Math.floor(Math.random() * responses.length)];
  
  return {
    success: true,
    data: randomResponse + "\n\n‚ö†Ô∏è *–°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö AI-–æ—Ç–≤–µ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API.*"
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
export function getConversationId(userId) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å conversation_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  return null;
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
export function clearConversation(userId) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å conversation_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  return true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Coze
export async function checkCozeConnection() {
  try {
    if (!process.env.COZE_API_KEY || process.env.COZE_API_KEY.includes('your_')) {
      return { success: false, error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
    }

    const response = await axios.get(`${COZE_API_BASE_URL}/v1/bots`, {
      headers: {
        'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });

    return { success: response.status === 200 };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç Coze
export async function getCozeInstructions() {
  return "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –∏ –¥–∏–µ—Ç–æ–ª–æ–≥. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏!";
}

export async function resetUserConversation(accessToken, userId) {
  return clearConversation(userId);
}

export async function runCozeWorkflow(workflowId, parameters, userId) {
  return await runWorkflow(workflowId, parameters);
}

console.log('Starting payment module with init function...');

import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';
import crypto from 'crypto';

console.log('All imports loaded');

const YOOKASSA_API_URL = 'https://api.yookassa.ru/v3';

function initializePaymentMode() {
  console.log('initializePaymentMode called');
  const mode = process.env.PAYMENT_MODE || 'test';
  let shopId, secretKey;
  
  if (mode === 'production') {
    shopId = process.env.YOOKASSA_PROD_SHOP_ID || '1048732';
    secretKey = process.env.YOOKASSA_PROD_SECRET_KEY || 'live_E2dE-ecYsexDzsBT-AzkDNeZ2HWPCBGQ52yPO6LdnIs';
    console.log('üí≥ –ü–ª–∞—Ç–µ–∂–∏: –ü–†–û–î–ê–ö–®–ù —Ä–µ–∂–∏–º (—Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)');
  } else {
    shopId = process.env.YOOKASSA_TEST_SHOP_ID || '1139867';
    secretKey = process.env.YOOKASSA_TEST_SECRET_KEY || 'test_hczBNmYmZ4vs8QaSMsyGHFdtU_3X039YoTcFS4L7DMo';
    console.log('üß™ –ü–ª–∞—Ç–µ–∂–∏: –¢–ï–°–¢–û–í–´–ô —Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥)');
  }
  
  process.env.YOOKASSA_SHOP_ID = shopId;
  process.env.YOOKASSA_SECRET_KEY = secretKey;
  console.log(`üè™ Shop ID: ${shopId}`);
}

export async function handlePaymentWebhook(data, bot) {
  console.log('üîî Payment webhook received:', JSON.stringify(data, null, 2));
  
  try {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤/–∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
    try {
      const { initDatabase, db } = await import('./database.js');
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      if (!db) {
        console.log('üóÑÔ∏è DB not initialized from context, initializing...');
        await initDatabase();
      }
    } catch (dbInitErr) {
      console.warn('‚ö†Ô∏è Could not proactively ensure DB init (will proceed):', dbInitErr.message);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if (data.event !== 'payment.succeeded') {
      console.log(`‚ö†Ô∏è Ignoring webhook event: ${data.event}`);
      return { success: false, message: `Ignored event: ${data.event}` };
    }

    const payment = data.object;
    console.log('üí≥ Processing successful payment:', {
      id: payment.id,
      amount: payment.amount,
      status: payment.status,
      paid: payment.paid,
      metadata: payment.metadata
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
    const telegramId = payment.metadata?.telegram_id;
    const planType = payment.metadata?.plan_type;
    
    if (!telegramId || !planType) {
      console.error('‚ùå Missing metadata in payment:', { 
        telegramId, 
        planType, 
        fullMetadata: payment.metadata 
      });
      return { success: false, message: 'Missing metadata' };
    }

    console.log(`‚úÖ Payment successful for user ${telegramId}, plan: ${planType}, amount: ${payment.amount.value} ${payment.amount.currency}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞
    const planDetails = {
      'basic': { requests_limit: 100, name: '–ë–∞–∑–æ–≤—ã–π' },
      'standard': { requests_limit: 300, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
      'premium': { requests_limit: 600, name: '–ü—Ä–µ–º–∏—É–º' }
    };

    const plan = planDetails[planType];
    if (!plan) {
      console.error('‚ùå Unknown plan type:', planType);
      return { success: false, message: 'Unknown plan type' };
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    const { createOrUpdateUser, getUserByTelegramId, createSubscription, activateSubscription } = await import('./database.js');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await createOrUpdateUser({ id: telegramId, username: null, first_name: 'User' });
    const dbUser = await getUserByTelegramId(telegramId);
    
    if (!dbUser) {
      console.error('‚ùå Could not find or create user:', telegramId);
      return { success: false, message: 'User not found' };
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const subscriptionId = await createSubscription(
      telegramId,
      planType,
      parseFloat(payment.amount?.value || '0'),
      payment.id
    );
    
    console.log('üíæ Subscription created/updated:', subscriptionId);

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await activateSubscription(payment.id, planType);
    console.log('‚úÖ Subscription activated');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    const subscriptionEndDate = new Date();
    subscriptionEndDate.setMonth(subscriptionEndDate.getMonth() + 1);
    const subscriptionEndFormatted = subscriptionEndDate.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    const successMessage = `üéâ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

‚úÖ **–ü–ª–∞–Ω:** ${plan.name}
üí∞ **–°—É–º–º–∞:** ${payment.amount.value} ‚ÇΩ
üìä **–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:** ${plan.requests_limit} –≤ –º–µ—Å—è—Ü
üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** ${subscriptionEndFormatted}
üîî **ID –ø–ª–∞—Ç–µ–∂–∞:** ${payment.id}

üöÄ **–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞!**

–í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üèãÔ∏è‚Äç‚ôÇÔ∏è
‚Ä¢ –ü–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£ ü•ó
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üìà
‚Ä¢ AI‚Äë—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ü§ñ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!`;

    try {
      await bot.sendMessage(telegramId, successMessage, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üè† –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: 'start_work' },
            { text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'my_status' }
          ]]
        }
      });

      console.log('üì® Success notification sent to user', telegramId);
    } catch (notificationError) {
      console.error('‚ùå Failed to send success notification:', notificationError.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown
      try {
        const simpleMessage = `üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –ü–ª–∞–Ω: ${plan.name}\nüí∞ –°—É–º–º–∞: ${payment.amount.value} ‚ÇΩ\nüìä –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: ${plan.requests_limit} –≤ –º–µ—Å—è—Ü\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${subscriptionEndFormatted}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!`;
        
        await bot.sendMessage(telegramId, simpleMessage, {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üè† –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: 'start_work' },
              { text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'my_status' }
            ]]
          }
        });
        console.log('üì® Simple success notification sent to user', telegramId);
      } catch (secondError) {
        console.error('‚ùå Failed to send simple notification as well:', secondError.message);
        // –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ
    try {
      const adminId = process.env.ADMIN_TELEGRAM_ID;
      if (adminId) {
        const adminMessage = `üí∞ **–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${telegramId}
üì¶ **–ü–ª–∞–Ω:** ${plan.name}
üíµ **–°—É–º–º–∞:** ${payment.amount.value} ‚ÇΩ
üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** ${payment.id}
üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** ${subscriptionEndFormatted}`;

        await bot.sendMessage(adminId, adminMessage, { parse_mode: 'Markdown' });
        console.log('üì® Admin notification sent');
      }
    } catch (adminError) {
      console.error('‚ùå Failed to send admin notification:', adminError.message);
    }

    return { 
      success: true, 
      message: 'Payment processed successfully',
      telegramId,
      planType,
      paymentId: payment.id,
      subscriptionId 
    };

  } catch (error) {
    console.error('‚ùå Error processing payment webhook:', error);
    console.error('‚ùå Error stack:', error.stack);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try {
      const adminId = process.env.ADMIN_TELEGRAM_ID;
      if (adminId && bot) {
        await bot.sendMessage(adminId, `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:\n\nPayment ID: ${data?.object?.id}\nError: ${error.message}`);
      }
    } catch (notifyError) {
      console.error('‚ùå Failed to notify admin:', notifyError.message);
    }
    
    return { success: false, error: error.message };
  }
}

export async function createSubscriptionPayment(telegramUserOrId, planType, amountOverride = null, descriptionOverride = null) {
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –ø–µ—Ä–µ–¥–∞—á—É –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∏ –ø—Ä—è–º–æ–≥–æ telegram_id
  const telegramId = (typeof telegramUserOrId === 'object' && telegramUserOrId)
    ? (telegramUserOrId.telegram_id || telegramUserOrId.id)
    : telegramUserOrId;

  console.log(`Creating payment for user ${telegramId}, plan: ${planType}`);
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∞
    const planDetails = {
      'basic': {
        amount: process.env.BASIC_PRICE || '150',
        description: '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω - 100 –∑–∞–ø—Ä–æ—Å–æ–≤',
        requests_limit: 100
      },
      'standard': {
        amount: process.env.STANDARD_PRICE || '300', 
        description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω - 300 –∑–∞–ø—Ä–æ—Å–æ–≤',
        requests_limit: 300
      },
      'premium': {
        amount: process.env.PREMIUM_PRICE || '450',
        description: '–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω - 600 –∑–∞–ø—Ä–æ—Å–æ–≤', 
        requests_limit: 600
      }
    };

    const plan = planDetails[planType];
    if (!plan) {
      return { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞–Ω–∞' };
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
    const paymentId = uuidv4();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è YooKassa
    const paymentData = {
      amount: {
        value: (amountOverride || plan.amount).toString(),
        currency: 'RUB'
      },
      confirmation: {
        type: 'redirect',
        // –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ YooKassa —ç—Ç–æ URL –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–∞ –Ω–µ URL –≤–µ–±—Ö—É–∫–∞)
        return_url: process.env.RETURN_URL || `https://t.me/${process.env.TELEGRAM_BOT_USERNAME || 'FitnessTrainerAI_bot'}`
      },
      capture: true,
      description: `${(descriptionOverride || plan.description)} –¥–ª—è Telegram ID: ${telegramId}`,
      metadata: {
        telegram_id: String(telegramId),
        plan_type: planType,
        requests_limit: plan.requests_limit.toString()
      }
    };

    console.log('Payment data:', JSON.stringify(paymentData, null, 2));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ YooKassa
    const shopId = process.env.YOOKASSA_SHOP_ID;
    const secretKey = process.env.YOOKASSA_SECRET_KEY;
    
    if (!shopId || !secretKey) {
      return { success: false, error: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏ YooKassa' };
    }

    const authHeader = Buffer.from(`${shopId}:${secretKey}`).toString('base64');

    const response = await axios.post(
      `${YOOKASSA_API_URL}/payments`,
      paymentData,
      {
        headers: {
          'Authorization': `Basic ${authHeader}`,
          'Content-Type': 'application/json',
          'Idempotence-Key': paymentId
        },
        timeout: 30000
      }
    );

    console.log('YooKassa response:', response.data);

    if (response.data && response.data.confirmation && response.data.confirmation.confirmation_url) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –æ–∂–∏–¥–∞–µ–º—É—é —Ç–µ—Å—Ç–∞–º–∏: payment –≤–Ω—É—Ç—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      return {
        success: true,
        payment: response.data,
        paymentUrl: response.data.confirmation.confirmation_url,
        amount: response.data.amount?.value || paymentData.amount.value,
        planType: planType,
        description: descriptionOverride || plan.description
      };
    } else {
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂' };
    }

  } catch (error) {
    console.error('Error creating payment:', error.message);
    if (error.response) {
      console.error('YooKassa error response:', error.response.data);
    }
    return { success: false, error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${error.message}` };
  }
}

console.log('About to call initializePaymentMode...');
initializePaymentMode();
console.log('Payment module with init function loaded');

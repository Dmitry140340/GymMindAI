import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';
import crypto from 'crypto';
import { 
  createPayment, 
  updatePaymentStatus, 
  activateSubscription,
  getUserByTelegramId,
  createSubscription
} from './database.js';

// –ë–∞–∑–æ–≤—ã–π URL –Æ–ö–∞—Å—Å—ã API
const YOOKASSA_API_URL = 'https://api.yookassa.ru/v3';

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Æ–ö–∞—Å—Å–µ
function getYookassaHeaders(idempotenceKey = null) {
  const auth = Buffer.from(`${process.env.YOOKASSA_SHOP_ID}:${process.env.YOOKASSA_SECRET_KEY}`).toString('base64');
  
  const headers = {
    'Authorization': `Basic ${auth}`,
    'Content-Type': 'application/json'
  };
  
  if (idempotenceKey) {
    headers['Idempotence-Key'] = idempotenceKey;
  }
  
  return headers;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
export async function createSubscriptionPayment(telegramId, planType) {
  try {
    const user = await getUserByTelegramId(telegramId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    let amount, description;
    if (planType === 'basic') {
      amount = parseFloat(process.env.BASIC_PRICE || '150');
      description = '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω (100 –∑–∞–ø—Ä–æ—Å–æ–≤) - FitnessBotAI';
    } else if (planType === 'standard') {
      amount = parseFloat(process.env.STANDARD_PRICE || '300');
      description = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω (300 –∑–∞–ø—Ä–æ—Å–æ–≤) - FitnessBotAI';
    } else if (planType === 'premium') {
      amount = parseFloat(process.env.PREMIUM_PRICE || '450');
      description = '–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω (600 –∑–∞–ø—Ä–æ—Å–æ–≤) - FitnessBotAI';
    } else {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const idempotenceKey = uuidv4();

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –Æ–ö–∞—Å—Å–µ
    const paymentData = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB'
      },
      confirmation: {
        type: 'redirect',
        return_url: `https://t.me/${process.env.TELEGRAM_BOT_USERNAME || 'your_fitness_bot'}?start=payment_success`
      },
      capture: true,
      description: description,
      metadata: {
        telegram_id: telegramId.toString(),
        user_id: user.id.toString(),
        plan_type: planType
      }
    };

    const response = await axios.post(
      `${YOOKASSA_API_URL}/payments`,
      paymentData,
      { headers: getYookassaHeaders(idempotenceKey) }
    );

    const payment = response.data;

    console.log('–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂:', payment);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
    const subscriptionId = await createSubscription(
      user.id, 
      planType, 
      amount, 
      payment.id
    );

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
    await createPayment(
      user.id,
      subscriptionId,
      payment.id,
      amount,
      'pending'
    );

    return {
      success: true,
      paymentUrl: payment.confirmation.confirmation_url,
      paymentId: payment.id,
      amount: amount
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –Æ–ö–∞—Å—Å—ã
export async function handlePaymentWebhook(data, bot) {
  try {
    const { type, object: payment } = data;

    if (type === 'payment.succeeded') {
      console.log('–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω:', payment.id);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await updatePaymentStatus(payment.id, 'succeeded');
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const activated = await activateSubscription(payment.id);
      
      if (activated) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const telegramId = parseInt(payment.metadata.telegram_id);
        const planType = payment.metadata.plan_type;
        
        let message = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n';
        if (planType === 'monthly') {
          message += 'üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü\n';
        } else if (planType === 'yearly') {
          message += 'üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥\n';
        }
        message += '‚ú® –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–∞!\n\n';
        message += 'ü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ò–ò-—Ç—Ä–µ–Ω–µ—Ä–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "ü§ñ –î–æ—Å—Ç—É–ø –∫ –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏—Ç–Ω–µ—Å–µ!';

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const { mainKeyboard } = await import('../bot/keyboards.js');
        
        await bot.sendMessage(telegramId, message, mainKeyboard);
        
        console.log(`–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
      }
      
    } else if (type === 'payment.canceled') {
      console.log('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω:', payment.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await updatePaymentStatus(payment.id, 'cancelled');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const telegramId = parseInt(payment.metadata.telegram_id);
      await bot.sendMessage(
        telegramId, 
        '‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–æ–≤–∞.'
      );
      
    } else if (type === 'payment.waiting_for_capture') {
      console.log('–ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', payment.id);
      
    } else {
      console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø webhook:', type);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
export async function getPaymentInfo(paymentId) {
  try {
    const response = await axios.get(
      `${YOOKASSA_API_URL}/payments/${paymentId}`,
      { headers: getYookassaHeaders() }
    );
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', error);
    return null;
  }
}

// –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
export async function refundPayment(paymentId, amount = null) {
  try {
    const refundData = {
      payment_id: paymentId
    };
    
    if (amount) {
      refundData.amount = {
        value: amount.toFixed(2),
        currency: 'RUB'
      };
    }

    const response = await axios.post(
      `${YOOKASSA_API_URL}/refunds`,
      refundData,
      { headers: getYookassaHeaders(uuidv4()) }
    );
    
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return null;
  }
}

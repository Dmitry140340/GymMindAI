import { 
  addFitnessMetric, 
  addWorkout, 
  addAchievement 
} from './database.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function addSampleData(userId) {
  try {
    console.log(`–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const today = new Date();
    const weights = [82.5, 82.2, 81.8, 81.5, 81.3, 81.0, 80.8, 80.5, 80.2, 79.9];
    
    for (let i = 0; i < weights.length; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() - (weights.length - 1 - i) * 3); // –ö–∞–∂–¥—ã–µ 3 –¥–Ω—è
      await addFitnessMetric(userId, 'weight', weights[i], 'kg', null, date.toISOString());
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ—Å—Ç–µ
    await addFitnessMetric(userId, 'height', 175, 'cm', null, new Date().toISOString());
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
    const workoutTypes = ['strength', 'cardio', 'yoga', 'functional'];
    const workoutDurations = [60, 45, 30, 75, 50, 40, 55];
    const caloriesData = [400, 300, 200, 450, 350, 250, 380];
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() - i * 2); // –ö–∞–∂–¥—ã–µ 2 –¥–Ω—è
      
      const type = workoutTypes[i % workoutTypes.length];
      const duration = workoutDurations[i];
      const calories = caloriesData[i];
      const intensity = Math.floor(Math.random() * 5) + 1; // 1-5
      const exercisesCount = Math.floor(Math.random() * 8) + 3; // 3-10 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
      
      await addWorkout(userId, type, duration, calories, intensity, exercisesCount, `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${type}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = [
      {
        type: 'first_workout',
        title: 'üèÉ‚Äç‚ôÇÔ∏è –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–ó–∞–ø–∏—Å–∞–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
      },
      {
        type: 'weight_loss',
        title: 'üìâ –ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
        description: '–°–±—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–≤—ã–π –∫–∏–ª–æ–≥—Ä–∞–º–º'
      },
      {
        type: 'consistency',
        title: 'üî• –ù–µ–¥–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥'
      }
    ];
    
    for (let i = 0; i < achievements.length; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() - (achievements.length - 1 - i) * 5); // –° –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 5 –¥–Ω–µ–π
      await addAchievement(userId, achievements[i].type, achievements[i].title, achievements[i].description);
    }
    
    console.log('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    return true;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function clearUserData(userId) {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    console.log(`–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const COZE_API_BASE_URL = 'https://api.coze.com';

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow
export async function runWorkflow(workflowId, parameters) {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ workflow:', { workflowId, parameters });
    console.log('üîë API Key –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', !!process.env.COZE_API_KEY);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ—Ä–∫—Ñ–ª–æ—É –ø–æ ID
    const interactiveWorkflows = [
      process.env.COZE_TRAINING_PROGRAM_WORKFLOW_ID,
      process.env.COZE_NUTRITION_PLAN_WORKFLOW_ID
    ];
    
    const isInteractive = interactiveWorkflows.includes(workflowId);
    
    if (isInteractive) {
      console.log('üîÑ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π workflow - –∏—Å–ø–æ–ª—å–∑—É–µ–º Workflow Streaming API');
      // –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É –∏—Å–ø–æ–ª—å–∑—É–µ–º Workflow Streaming API
      return await runInteractiveWorkflow(workflowId, parameters);
    } else {
      console.log('‚ö° –ü—Ä–æ—Å—Ç–æ–π workflow - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Workflow API');
      // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Workflow API
      return await runSimpleWorkflow(workflowId, parameters);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ workflow:', error.message);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ workflow: ${error.message}`
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É (deepresearch, composition_analysis)
async function runSimpleWorkflow(workflowId, parameters) {
  try {
    console.log('üåê API URL:', `${COZE_API_BASE_URL}/v1/workflow/run`);

    const requestData = {
      workflow_id: workflowId,
      parameters: parameters,
      is_async: false
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Coze Workflow API:', JSON.stringify(requestData, null, 2));

    const response = await axios.post(
      `${COZE_API_BASE_URL}/v1/workflow/run`,
      requestData,
      {
        headers: {
          'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000
      }
    );

    console.log('üì• –û—Ç–≤–µ—Ç Workflow API - —Å—Ç–∞—Ç—É—Å:', response.status);
    console.log('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));

    if (response.data && response.data.code === 0) {
      let data = response.data.data;
      
      // –ï—Å–ª–∏ data - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, –ø–∞—Ä—Å–∏–º –µ—ë
      if (typeof data === 'string') {
        try {
          data = JSON.parse(data);
          console.log('üì¶ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
        } catch (parseError) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ data –∫–∞–∫ JSON:', parseError.message);
          console.log('üìù Raw data:', data);
        }
      }
      
      if (data && (data.output || data.output_final)) {
        const output = data.output || data.output_final;
        return {
          success: true,
          data: data,
          message: output
        };
      } else {
        return {
          success: false,
          error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ workflow'
        };
      }
    } else {
      return {
        success: false,
        error: response.data?.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ workflow'
      };
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ workflow:', error.message);
    if (error.response) {
      console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ workflow: ${error.message}`
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É (training_program, nutrition_plan)
async function runInteractiveWorkflow(workflowId, parameters) {
  try {
    console.log('üåä –ò—Å–ø–æ–ª—å–∑—É–µ–º Workflow Streaming API –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow');

    const requestData = {
      workflow_id: workflowId,
      parameters: parameters,
      bot_id: process.env.COZE_BOT_ID
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Coze Workflow Streaming API:', JSON.stringify(requestData, null, 2));

    const response = await axios.post(
      `${COZE_API_BASE_URL}/v1/workflow/stream_run`,
      requestData,
      {
        headers: {
          'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000,
        responseType: 'stream'
      }
    );

    console.log('üì• –û—Ç–≤–µ—Ç Workflow Streaming API - —Å—Ç–∞—Ç—É—Å:', response.status);

    return new Promise((resolve, reject) => {
      let resultMessage = '';
      let isDone = false;
      let allChunks = '';
      let interruptEventId = null;

      response.data.on('data', (chunk) => {
        const chunkStr = chunk.toString();
        allChunks += chunkStr;
        console.log('üîç –ü–æ–ª—É—á–µ–Ω chunk:', chunkStr);

        // –ü–∞—Ä—Å–∏–º Server-Sent Events —Ñ–æ—Ä–º–∞—Ç
        const lines = chunkStr.split('\n');
        let currentEvent = { id: null, event: null, data: null };

        for (const line of lines) {
          if (line.trim() === '') {
            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è SSE - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if (currentEvent.event && currentEvent.data) {
              console.log('üîç –ü–æ–ª–Ω–æ–µ SSE —Å–æ–±—ã—Ç–∏–µ:', currentEvent);

              try {
                const eventData = JSON.parse(currentEvent.data);
                console.log('üì® Parsed SSE event:', currentEvent.event, eventData);

                if (currentEvent.event === 'Message') {
                  if (eventData.content) {
                    console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', eventData.content.substring(0, 100) + '...');
                    resultMessage += eventData.content;
                  }
                } else if (currentEvent.event === 'Interrupt') {
                  console.log('‚è∏Ô∏è Workflow —Ç—Ä–µ–±—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                  if (eventData.interrupt_data && eventData.interrupt_data.event_id) {
                    interruptEventId = eventData.interrupt_data.event_id;
                    console.log('üîë –°–æ—Ö—Ä–∞–Ω–µ–Ω event_id –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', interruptEventId);
                  }
                  isDone = true;
                } else if (currentEvent.event === 'Done') {
                  console.log('‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω');
                  isDone = true;
                } else if (currentEvent.event === 'Error') {
                  console.log('‚ùå –û—à–∏–±–∫–∞ workflow:', eventData);
                  reject(new Error(eventData.message || '–û—à–∏–±–∫–∞ workflow'));
                  return;
                }
              } catch (parseError) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å SSE data:', currentEvent.data);
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseError.message);
              }

              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
              currentEvent = { id: null, event: null, data: null };
              continue;
            }
          }

          // –ü–∞—Ä—Å–∏–º SSE –ø–æ–ª—è
          if (line.startsWith('id:')) {
            currentEvent.id = line.slice(3).trim();
          } else if (line.startsWith('event:')) {
            currentEvent.event = line.slice(6).trim();
          } else if (line.startsWith('data:')) {
            currentEvent.data = line.slice(5).trim();
          }
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å interrupt, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫ –¥–æ—Å—Ä–æ—á–Ω–æ
        if (interruptEventId) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º');
          response.data.destroy(); // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —á—Ç–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        }
      });

      response.data.on('end', () => {
        console.log('üîö Streaming –∑–∞–≤–µ—Ä—à–µ–Ω');
        console.log('üìä –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:', allChunks.length, '–±–∞–π—Ç');
        console.log('üîç –í—Å–µ –¥–∞–Ω–Ω—ã–µ (raw):', JSON.stringify(allChunks));
        console.log('üìù –í—Å–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç—Ä–æ–∫–∞):', allChunks);
        console.log('üí¨ –†–µ–∑—É–ª—å—Ç–∞—Ç:', resultMessage.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        console.log('‚úÖ isDone:', isDone);
        console.log('‚úÖ Streaming –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        resolve({
          success: true,
          data: { output: resultMessage },
          message: resultMessage || 'Workflow –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç',
          isDone: true,
          eventId: interruptEventId,
          isInteractive: !!interruptEventId
        });
      });

      response.data.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ streaming:', error);
        reject(error);
      });
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow:', error.message);
    if (error.response) {
      console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ workflow: ${error.message}`
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Coze Chat API
export async function runCozeChat(accessToken, message, userId, instructions) {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Coze Chat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', message);
    console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', instructions);

    if (!process.env.COZE_API_KEY || process.env.COZE_API_KEY.includes('your_')) {
      console.log('‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é');
      return await simulateAIResponse(message, userId);
    }

    if (!process.env.COZE_BOT_ID || process.env.COZE_BOT_ID.includes('your_')) {
      console.log('‚ö†Ô∏è Bot ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é');
      return await simulateAIResponse(message, userId);
    }

    const response = await axios.post(
      `${COZE_API_BASE_URL}/v1/chat`,
      {
        bot_id: process.env.COZE_BOT_ID,
        user_id: userId.toString(),
        query: message,
        chat_history: [],
        stream: false
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 120000
      }
    );

    console.log('üì• –û—Ç–≤–µ—Ç Coze Chat - —Å—Ç–∞—Ç—É—Å:', response.status);

    if (response.data && response.data.code === 0) {
      const messages = response.data.data?.messages || [];
      const botMessage = messages.find(msg => msg.role === 'assistant' && msg.type === 'answer');
      
      if (botMessage && botMessage.content) {
        return {
          success: true,
          data: botMessage.content
        };
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö');
        return {
          success: false,
          error: '–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI'
        };
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Coze:', response.data);
      return {
        success: false,
        error: response.data?.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'
      };
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Coze Chat:', error.message);
    
    if (error.response) {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
      
      if (error.response.status === 401) {
        return {
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á'
        };
      } else if (error.response.status === 429) {
        return {
          success: false,
          error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'
        };
      }
    }

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—é –æ—Ç–≤–µ—Ç–∞');
    return await simulateAIResponse(message, userId);
  }
}

// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
async function simulateAIResponse(message, userId) {
  const responses = [
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–æ –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
    "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
    "–û—Ç–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –°–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.",
    "–ü–æ–Ω—è–ª –≤–∞—à—É –∑–∞–¥–∞—á—É! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º."
  ];
  
  const randomResponse = responses[Math.floor(Math.random() * responses.length)];
  
  return {
    success: true,
    data: randomResponse + "\n\n‚ö†Ô∏è *–°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö AI-–æ—Ç–≤–µ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API.*"
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
export function getConversationId(userId) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å conversation_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  return null;
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
export function clearConversation(userId) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å conversation_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  return true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Coze
export async function checkCozeConnection() {
  try {
    if (!process.env.COZE_API_KEY || process.env.COZE_API_KEY.includes('your_')) {
      return { success: false, error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
    }

    const response = await axios.get(`${COZE_API_BASE_URL}/v1/bots`, {
      headers: {
        'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });

    return { success: response.status === 200 };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow —á–µ—Ä–µ–∑ Chat API
export async function continueInteractiveWorkflow(eventId, userResponse, workflowType) {
  try {
    console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow —á–µ—Ä–µ–∑ Chat API:', { eventId, userResponse, workflowType });

    if (!eventId) {
      throw new Error('Event ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è workflow');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º bot_id –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ workflow
    let botId;
    switch (workflowType) {
      case 'nutrition_plan':
        botId = '7428947126656434182'; // nutrition_plan bot
        break;
      case 'training_program':
        botId = '7428947126656434182'; // training_program bot  
        break;
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø workflow: ${workflowType}`);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Chat API –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    const response = await axios.post(
      `${COZE_API_BASE_URL}/v1/chat`,
      {
        bot_id: botId,
        user_id: eventId.split('/')[0], // –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ event_id
        query: userResponse,
        stream: true
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.COZE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000,
        responseType: 'stream'
      }
    );

    console.log('üì• –û—Ç–≤–µ—Ç Chat API –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è - —Å—Ç–∞—Ç—É—Å:', response.status);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º streaming –æ—Ç–≤–µ—Ç –æ—Ç Chat API
    return new Promise((resolve, reject) => {
      let resultMessage = '';
      let isDone = false;
      let allChunks = '';
      
      response.data.on('data', (chunk) => {
        const chunkStr = chunk.toString();
        allChunks += chunkStr;
        console.log('üîç Chat API chunk:', chunkStr);
        
        // –ü–∞—Ä—Å–∏–º Server-Sent Events —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Chat API
        const lines = chunkStr.split('\n');
        let currentEvent = { id: null, event: null, data: null };
        
        for (const line of lines) {
          if (line.trim() === '') {
            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è SSE - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if (currentEvent.event && currentEvent.data) {
              console.log('üîç Chat API SSE —Å–æ–±—ã—Ç–∏–µ:', currentEvent);
              
              try {
                const eventData = JSON.parse(currentEvent.data);
                
                if (currentEvent.event === 'conversation.message.delta') {
                  // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
                  if (eventData.delta && eventData.delta.content) {
                    resultMessage += eventData.delta.content;
                  }
                } else if (currentEvent.event === 'conversation.message.completed') {
                  // –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                  if (eventData.content) {
                    resultMessage = eventData.content;
                  }
                  console.log('üí¨ Chat API –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', resultMessage);
                } else if (currentEvent.event === 'conversation.chat.completed') {
                  // –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
                  isDone = true;
                  console.log('‚úÖ Chat API –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
                }
              } catch (parseError) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Chat API —Å–æ–±—ã—Ç–∏—è:', parseError);
              }
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
              currentEvent = { id: null, event: null, data: null };
            }
          } else if (line.startsWith('id:')) {
            currentEvent.id = line.substring(3).trim();
          } else if (line.startsWith('event:')) {
            currentEvent.event = line.substring(6).trim();
          } else if (line.startsWith('data:')) {
            currentEvent.data = line.substring(5).trim();
          }
        }
      });

      response.data.on('end', () => {
        console.log('üîö Chat API streaming –∑–∞–≤–µ—Ä—à–µ–Ω');
        console.log('üìä –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:', allChunks.length, '–±–∞–π—Ç');
        console.log('üí¨ –†–µ–∑—É–ª—å—Ç–∞—Ç:', resultMessage.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        console.log('‚úÖ isDone:', isDone);

        resolve({
          success: true,
          message: resultMessage || '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç',
          isDone: true, // Chat API –≤—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥
          eventId: null // –ù–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–ª—è Chat API
        });
      });

      response.data.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ streaming Chat API:', error);
        reject(error);
      });
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow:', error);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è workflow: ${error.message}`
    };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç Coze
export async function getCozeInstructions() {
  return "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –∏ –¥–∏–µ—Ç–æ–ª–æ–≥. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏!";
}

export async function resetUserConversation(accessToken, userId) {
  return clearConversation(userId);
}

export async function runCozeWorkflow(workflowId, parameters, userId) {
  return await runWorkflow(workflowId, parameters);
}
